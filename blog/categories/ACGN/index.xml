<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ACGN on JacobZ</title><link>https://zyxin.xyz/blog/categories/ACGN/</link><description>Recent content in ACGN on JacobZ</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 20 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://zyxin.xyz/blog/categories/ACGN/index.xml" rel="self" type="application/rss+xml"/><item><title>ACGN收藏 - 音频编码与格式</title><link>https://zyxin.xyz/blog/2021-07/ACGNAudioFormats/</link><pubDate>Tue, 20 Jul 2021 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2021-07/ACGNAudioFormats/</guid><description>&lt;p>在我的收藏里面，音乐是占大头的。我非常喜欢尝试各种风格的音乐，也非常喜欢日本音乐圈的多样性，因此收集了很多。在这过程中也了解到了一些音频格式的内容~我也&lt;a class="link" href="https://github.com/cmpute/audio-codec-benchmark" target="_blank" rel="noopener"
>自己做过一个benchmark&lt;/a>，比较不同音频编码的性能区别，如果有兴趣的话可以自己尝试一下~。&lt;/p>
&lt;p>我个人喜欢收藏无损音乐，目的不仅仅是因为高音质，而是无损意味着“无损”，音质与CD或者其他音源是完全一致的（当然，这个一致性音频编码本身并不能保证音源的完整性，但是如果有其他的辅助信息如EAC log，或者AccurateRip测试结果就完全可以保证了）。在这个情况下我把无损压成有损，就能保证这个有损是达到了预期的音质。如果是网上直接下载有损的话，一是很难确定这个有损有没有经过二次压缩，造成额外音质损失，二是有损也最好不要再转换格式了，同样是因为音质损失，这就造成了额外的不便。&lt;/p>
&lt;p>本文就介绍一下我了解的与音频编码相关的知识，以及各种常用音频编码格式的比较。更全面的格式对比可以&lt;a class="link" href="https://en.wikipedia.org/wiki/Comparison_of_audio_coding_formats" target="_blank" rel="noopener"
>参考Wikipedia页面&lt;/a>。另外需要指明的是，本文的介绍基于音乐收藏和本地播放的目的，与流媒体的需求不同，后者追求稳定的码率、低延迟甚至是低能耗。&lt;/p>
&lt;h2 id="音频信号调制">音频信号调制&lt;/h2>
&lt;blockquote>
&lt;p>如果学过信号处理的读者可能已经了解本章内容了，可以跳过这节~&lt;/p>
&lt;/blockquote>
&lt;p>在物理世界中，声音本质上是一种物体震动产生的波，如果要将物理世界中的波存储为数字世界可以存储的格式，则需要进行信号采样（模数转换）和信号调制。波形信号调制主要有两种方法，一种是脉冲编码调制（pulse-code modulation，PCM），一种则是脉冲密度调制（pulse-density modulation，PDM）。简而言之PCM就是通过数字信号的幅度和频率来分别表示模拟信号的幅度和频率，而PDM则通过数字信号的频率和幅度来分别表示模拟信号的幅度和频率（反过来了）。它们对应的音频存储格式是WAV和DSD（Direct Stream Digital），WAV由于编码简单是最广为使用的音频格式，而DSD由于技术和专利的限制则非常罕见，并且音频编辑比WAV复杂很多，因此只有在索尼的SACD上和一些高清音乐网站可以见到。&lt;/p>
&lt;p>PCM的音质在频率上受限于其采样率，根据Nyquist采样定理，两倍以上的采样率可以真实还原出原波形，所以考虑到人耳的听力最高到20kHz，通常PCM音频的采样率都在40kHz以上（如常见的44.1kHz和48kHz）；在振幅上受限于其采样位深。因此采样率低会导致声音高频被裁掉，而采样位深低会导致振幅分辨率下降，音频的动态范围下降，这两者共同导致音频的失真。而PDM由于我没学过，就不评价其音质了。&lt;/p>
&lt;p>在不同的采样方式之间是可能会产生额外失真的。高音质采样到低音质采样就不用说了，反过来也是可能的，如非整数倍地改变采样率（如44.1kHz到48kHz），PCM和PDM的转换。位深由于对应的是二进制的位数，非整数倍提高位深不会产生失真。&lt;/p>
&lt;h2 id="有损lossy编码">有损（Lossy）编码&lt;/h2>
&lt;p>首先是有损编码，有损编码的音乐比较好找，因为（天国的）虾米、网易云、Spotify等网站都可以下到，现在很多平台都提供比较高音质的试听了。但是在曾经的年代，高音质有损编码也是比较难找的，以及现在放在手机上听歌我还是会转换成有损音质。&lt;/p>
&lt;p>不同的有损格式对于“损失”音频的哪一部分、哪一频段是不一样的，他们适合的场景也不一样，比如有的格式设计之初的目的就睡尽量保留人声质量。如果真要比较哪种格式、哪种编码器的音质最好的话，只有A/B测试才是最可靠的，然而A/B测试也会受到被测对象的主观影响，所以如果想选择一个音质最好的编码器的话，可以自行A/B测试来做判断。&lt;/p>
&lt;p>有损音频的音质可以通过码率（birate）直接进行优劣判断。音频的码率指的是每秒文件能够提供的信息量，以CD音质为例，普通CD一般采样率是&lt;code>44.1kHz&lt;/code>（理论能够还原频率高达&lt;code>22kHz&lt;/code>的波形），采样深度&lt;code>16bit&lt;/code>，双声道，那么原始码率就是&lt;code>44100*16*2=1141.2kbps&lt;/code>，注意这里的&lt;code>kbps&lt;/code>是&lt;code>kilo bits per second&lt;/code>。普通能下载到的有损音乐通常是MP3格式（虽然这年头很少有人再下载音乐了），在我高中那会，从QQ音乐等平台上上下载的MP3基本都是128kbps，只有虾米下载的是192kbps甚至320kbps，因此我还是非常喜欢虾米的。&lt;/p>
&lt;p>码率是一个瞬时概念，对于音频编码（甚至视频编码）而言，码率是随时可能变化的。编码器通常提供两种码率控制方法：恒定比特率（Constant BiRate，CBR）和可变比特率（Variable BiRate，VBR）。选择CBR或者VBR需要试场景而定，CBR适合稳定的媒体串流，避免网络波动产生播放不畅，而VBR由于给了编码器更多空间根据媒体内容调节码率，通常而言可以达到更好的质量，适合本地存储回放。&lt;/p>
&lt;p>一种客观的音质测试方式是直接计算编码后音频与原音频信号相差了多少。根据我的测试，有损音频的质量基本和码率成正比（见下图，如果用信号损失的对数值来看的话几乎是线性正比）。而如果使用&lt;a class="link" href="https://en.wikipedia.org/wiki/Weighting_filter#Loudness_measurements_with_weighting_filters" target="_blank" rel="noopener"
>根据人听力敏感度加权&lt;/a>之后的频谱，那么可以看出在低码率时（如96kbps），AAC的音质较好，这正是AAC设计的目标，即在通话音质（一般就是96kbps）下能够有很好的表现。而在高码率时（如320kbps）WavPack和MP3 CBR的表现更好，因此很多人说MP3格式应该被淘汰，但320k的MP3的音质还是非常好的。&lt;/p>
&lt;p>&lt;img src="https://github.com/cmpute/audio-codec-benchmark/raw/master/figs/PLight_-_Bass_tek_2.wav.lossy_err.jpg"
loading="lazy"
alt="有损音质与码率关系图"
>&lt;/p>
&lt;p>简而言之，我的结论是在同等码率下各种有损格式的音质都差不多，更应该关注的是如何找到高码率的音源。下面介绍几个主流的有损音频编码格式。（我个人非常喜欢用WavPack的有损模式，但是这个很非主流）&lt;/p>
&lt;h3 id="mp3">MP3&lt;/h3>
&lt;p>MP3的名字来源于其最开始是作为MPEG-1标准中的第三种音频格式，它应该是（至少在中国）最广为流传的音频编码格式了。而在支持MP3的编码器中，&lt;a class="link" href="https://lame.sourceforge.io/" target="_blank" rel="noopener"
>lame&lt;/a>是其中最常用的。MP3的编码特性是它会根据码率的设置进行低通滤波，320kbps CBR时滤波在20kHz左右比较接近CD音质的22kHz了，而192kbps CBR滤波则在16kHz左右，128kbps在12KHz左右。因此不同码率MP3的听感区别是非常明显的，通俗来讲音质越差的MP3越像是把喇叭蒙在鼓里的声音，各个频段的特点可以&lt;a class="link" href="https://zyxin.xyz/blog/2020-12/AudiophileIntroduction/" >参考我之前的博客&lt;/a>。&lt;/p>
&lt;p>&lt;a class="link" href="https://lame.sourceforge.io/" target="_blank" rel="noopener"
>lame编码器&lt;/a>虽然2012年之后就几乎没有怎么更新了，但是它应该仍然是所有提供mp3的音乐平台使用的主要编码器。它支持CBR、VBR和独有的的ABR。CBR可以指定码率，VBR无法直接指定码率，而通过指定参数&lt;code>-V&lt;/code>来间接实现码率调整，而ABR则是在可变码率的同时支持指定一个目标平均码率。&lt;/p>
&lt;p>MP3虽然是个很古老的格式，并且有不少为人诟病的缺点，但是因为高码率MP3的音质确实不错，而且MP3的硬件支持非常到位，因此到现在仍然是非常流行的音频格式。&lt;/p>
&lt;h3 id="aac">AAC&lt;/h3>
&lt;p>AAC全名为Advanced Audio Coding，AAC设计目标是成为MP3的后继者。虽然维基上说AAC在同等码率下能够得到比MP3更好的音质，但根据我的测试结果这个结论只在相对较低码率的时候成立。不过AAC设计的定位应该就是针对流媒体，以及现在的蓝牙音频，这些地方音频的码率都是受限的，所以也不能说错。AAC比MP3支持更多的采样率、通道数，在视频编码时其实用的非常多，但是其实它不是针对音乐收藏而设计的。&lt;/p>
&lt;p>AAC音频文件的后缀名通常是&lt;code>m4a&lt;/code>和&lt;code>mp4&lt;/code>。这两者都是MPEG-4标准定义的流媒体容器后缀名，其中前者专门针对音频，而后者则是音频和视频都可以用。关于容器是什么，我会在之后的视频编码器博客中详细介绍。&lt;/p>
&lt;p>AAC音频编码器除了万能的ffmpeg以外，还有以下这些专门针对AAC的编码器&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="http://wiki.hydrogenaud.io/index.php?title=Nero_AAC" target="_blank" rel="noopener"
>NeroAAC&lt;/a>：质量最好，但是是商用编码器，不开源。&lt;/li>
&lt;li>QuickTime AAC：由苹果设计、应用在QuickTime和后来的iTunes中、口碑不错。&lt;a class="link" href="https://github.com/nu774/qaac" target="_blank" rel="noopener"
>有第三方开源的实现（qaac）&lt;/a>。&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/knik0/faac" target="_blank" rel="noopener"
>FAAC&lt;/a>：Free AAC，开源，但是感觉用的人不多&lt;/li>
&lt;/ul>
&lt;p>总的而言，AAC的特性非常多，也是一个经过深思熟虑后设计的编码器，但由于是针对流媒体设计的，对音频收藏来说并没有什么吸引力。&lt;/p>
&lt;h2 id="无损lossless编码">无损（Lossless）编码&lt;/h2>
&lt;p>无损编码即经过编码压缩之后不会损失信息的编码方式。如果仅仅是为了压缩而言的话，通用的文件压缩理论上也是可以用作音频编码的，但是通用压缩的效率肯定不如专门设计的音频压缩高，并且需要先解压才能播放。无损编码没有音质之差，它们的主要指标则是编码解码耗时，压缩率、对音频格式的支持以及其他附加功能。对音频格式的支持包括多声道（如5.1）、高采样率和位深（如常见的Hi-Res格式96kHz/24bit）、对DSD的支持等。&lt;/p>
&lt;p>下面介绍一些常用的无损格式（其中我选择的就是WavPack）。&lt;/p>
&lt;h3 id="flac">FLAC&lt;/h3>
&lt;p>FLAC名为Free Lossless Audio Codec，虽然听起来非常老土和山寨，但应该是目前各平台最通用的格式，像是MP3在有损编码里的地位。FLAC开源、性能好、解码快、硬件支持好、压缩率也不错，无脑选flac一般没什么问题。FLAC是MPEG支持的格式，很多高质量的DVD和BD压缩出来的视频里都会用FLAC作为音频编码。因此通常情况下FLAC编码音频文件的后缀名是&lt;code>.flac&lt;/code>，但有时你也能看到&lt;code>.m4a&lt;/code>的后缀名。&lt;/p>
&lt;h3 id="apetak">APE/TAK&lt;/h3>
&lt;p>APE（Monkey&amp;rsquo;s Audio）和TAK（Tom&amp;rsquo;s lossless Audio Kompressor）都是能够提供非常高压缩率的编码器，但是他们俩都是闭源的。在电驴（VeryCD）时代用APE的人非常多，可能就是由于其较高的压缩率吧，但是APE的编码和解码相当慢。TAK的编码解码都很快，估计是利用了多线程或者AVX加速。另外还有一款编码器叫OptimFrog，能够提供最高的压缩率，但是编码和解码都奇慢无比，更像是个Proof of concept的作品，而且还不开源，实际使用就不要考虑了。&lt;/p>
&lt;h3 id="wavpack">WavPack&lt;/h3>
&lt;p>这里隆重推荐我现在使用的WavPack。它开源、功能丰富、支持各种采样率位深和通道数，甚至支持DSD的编码，这个特性是别无二家了。&lt;/p>
&lt;p>不过最吸引我的功能其实是支持混合编码（见后文）。WavPack由于其开源的特点，同样被各大音乐软件所支持，甚至ffmpeg和MKV视频容器都是支持WavPack的，不过MPEG-4仍然不支持比较遗憾。WavPack在硬件上支持可能没有FLAC广，但是WavPack的源码中同样包含了用汇编直接编写的几个核心函数，因此编解码的性能也是非常好的。&lt;/p>
&lt;p>根据我的使用经验，WavPack有损音质好，无损体积小，编码也快，总之除了FLAC之外找WavPack就没错了！&lt;/p>
&lt;h2 id="混合hybrid编码">混合（Hybrid）编码&lt;/h2>
&lt;p>除了有损无损之外还有一种编码方式是混合编码，它指的是编码器在生成有损压缩音频后还生成一个修正文件（Correction File）。当修正文件和本体音频同时存在时原始音频可以被无损还原。这个编码方式的好处是你可以同时拥有大体积的高音质文件和小体积的低音质文件，非常适合我这样的收藏党，文件本体放在云上，然后小体积的有损部分可以经常下载下来听。有损部分也可以用作demo，如果听了demo之后喜欢上这首音乐了再去下载修正文件提高音质。&lt;/p>
&lt;p>支持混合编码的主要有三种音频格式：LossyWav，WavPack和OptimFrog，其中最后一种非常难用，而且好像和LossyWAV一样不支持无损播放，即需要先解码再播放才能达到无损音质。&lt;/p>
&lt;h3 id="lossywav">LossyWAV&lt;/h3>
&lt;p>LossyWAV其实不算是一个完整的音频编码器，而是一个预处理软件。LossyWAV只能处理原始的PCM音频，然后生成的也是PCM音频，之后还需要使用其他的（无损）编码器来进行压缩。它的原理是分析原始音频，然后对其进行某种形式的变换使得音频更容易被压缩，从而降低生成的音频文件平均码率。由于这个变换是不可逆的，因此它也是有损压缩，但是LossyWAV支持生成修正文件，因此它可以看作一种混合编码方式。&lt;/p>
&lt;p>经过以上描述，相信大家可以看出来编码过程非常麻烦，如果想要生成混合模式下的音频文件和修正文件，需要先从原始PCM音频生成有损PCM和修正PCM，然后再分别通过其他方式编码器将它们分别压缩，而无损解码的过程则是把他们反过来。因此LossyWAV在编解码速度和文件体积上都完全没有优势，并且这个原理也意味着LossyWav不支持无损播放。在能够选择WavPack的情况下还是不要用LossyWAV了。&lt;/p>
&lt;h3 id="wavpack-1">WavPack&lt;/h3>
&lt;p>WavPack内置对混合模式的支持，而且WavPack支持无损播放。这意味着只要播放器能够找到修正文件，那么播放器就能直接以无损音质播放音乐而不需要额外解码。这个特性对我来说就是killer！另外从前文图表可以看出，WavPack在有损模式下也能够达到很好的音质水平，甚至在特定码率下比MP3和AAC都要好。唯一遗憾的地方是混合模式下WavPack音频总体的压缩率是比较低的，通常会比无损模式下的体积要高出5%左右。不过这个年头存储空间越来越不值钱了，所以这个问题也完全可以忽略。&lt;/p>
&lt;p>总而言之我完全找不到理由不使用WavPack，再次向大家推荐这个编码器！&lt;/p>
&lt;hr>
&lt;p>本文介绍了在ACG音乐收藏的过程中我了解到的音频编码知识，而在下一篇博客我还会介绍视频编码的内容~&lt;/p>
&lt;blockquote>
&lt;p>参考资料：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://samplerateconverter.com/educational/dsd-pcm" target="_blank" rel="noopener"
>DSD vs PCM&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/cmpute/audio-codec-benchmark" target="_blank" rel="noopener"
>我自己搭的codec对比benchmark&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://en.wikipedia.org/wiki/Comparison_of_audio_coding_formats" target="_blank" rel="noopener"
>维基百科对音频格式的对比页面&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>ACGN 收藏者的自我修养</title><link>https://zyxin.xyz/blog/2021-07/ACGNCollection/</link><pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2021-07/ACGNCollection/</guid><description>&lt;p>很久没写博客了，这次想总结一下自己在ACGN收藏这条道路上越走越远，到底都走了哪些弯路哈哈哈哈 &lt;del>（博客画风突变）&lt;/del>。这一篇算是一个开篇稿吧，想写的内容有挺多的，一些比较短的内容会放在这一篇底下。&lt;/p>
&lt;p>&lt;a class="link" href="https://en.wikipedia.org/wiki/ACG_%28subculture%29" target="_blank" rel="noopener"
>ACGN&lt;/a>即Animation、Comics、Games、Novel，不知道这个年头还有多少人用这个词，但是这个词确实描述了我的兴趣爱好。虽然ACGN从名字上来看没有特定的文化限制，但是一般都是指源自日本的（日本的文化输出是不得不服啊），尤其是Animation这个词，通常在ACG里面的A其实指的是Anime（Animation的日式发音缩写），特指日本动漫。鄙人虽然喜欢看（日本）动漫小说等，算的上半个二刺螈，但是ACGN产业本身也是良莠不齐的文化产品，其中有很多优秀的产品，也不乏令人无语的奇葩。&lt;/p>
&lt;p>个人认为日本ACGN的吸引力不仅仅在于产品制作精良，更在于其涉猎内容的广泛以及表达形式的多样，再加上各式产业的紧密衔接，让人很容易进这个坑里。我从初中入宅以来也接触了很多ACGN的内容，不过主要是看动漫去了，小说漫画看了个别，而日式游戏基本只接触过俩：雀龙门和东方系列。但真正让我入坑收藏的其实是从东方接触到的同人音乐，同人音乐的世界包罗万象，而又大多是限量发售，因此就勾起了我的收藏欲。之后渐渐的不仅收藏同人音乐，也去收藏起ACGN的产品了。&lt;/p>
&lt;p>以前作为一个高中生，实在是没有什么存储资源存那么多的内容，不过现在好很多了，但是却也没有精力去整这些东西了。更悲催的是大二硬盘被偷了一次，导致我一半的收藏没了，也导致我很长一段时间再也没有收藏的欲望了。。。（于是落下了很多坑，悔不当初）&lt;/p>
&lt;p>之后的几篇博文想介绍以下几个内容，虽是由我收藏的爱好衍生出来的一些技术，但也可以适用于很多其他的场合，因此有想把他们写下来的动力：&lt;/p>
&lt;ol>
&lt;li>&lt;a class="link" href="https://zyxin.xyz/blog/2021-07/ACGNFileManagement/" >文件管理&lt;/a>&lt;/li>
&lt;li>音频压制&lt;/li>
&lt;li>音乐整理与播放器&lt;/li>
&lt;li>视频压制&lt;/li>
&lt;li>网页打包&lt;/li>
&lt;/ol>
&lt;p>这篇就写到这里了，希望这个博客的坑最后也能填完orz。。&lt;/p></description></item><item><title>ACGN收藏 - 文件管理</title><link>https://zyxin.xyz/blog/2021-07/ACGNFileManagement/</link><pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2021-07/ACGNFileManagement/</guid><description>&lt;p>对于ACGN收藏来说，文件管理是一个基础任务，毕竟收藏的文件内容多种多样，例如光盘镜像、压制后的音频视频、小册子扫描、字幕甚至小游戏等。把文件按一定结构整理是必要的，我也专门为整理音乐写了&lt;a class="link" href="https://github.com/cmpute/Fluss" target="_blank" rel="noopener"
>一些小工具&lt;/a>，不过整理文件的格式因人而异，也没有特别的难度，因此不需要特别描述我是怎么做的。我觉得值得一提的内容是如何对文件进行定期存档和备份，这也是我在硬盘被偷之后立马开始对收藏的文件进行的操作。备份有一个3-2-1的原则：3份备份，2份本地，1份云端，下面会介绍一些本地的备份和云端备份的方法以及我的选择。&lt;/p>
&lt;h2 id="离线备份">离线备份&lt;/h2>
&lt;p>离线备份就是把文件资料整理并存储到另一个设备上，需要考虑的功能有加密、压缩、增量更新、去重、冗余等。如果是最基本的备份，如果只想直接备份，不考虑加密压缩等的话，著名的&lt;a class="link" href="https://rsync.samba.org/" target="_blank" rel="noopener"
>rsync&lt;/a>是个不错的选择，它可以同步两个目录（可以是挂载FTP的目录），并且有算法来进行去重以减少二进制的传输。&lt;/p>
&lt;p>对我而言最大的需求是有冗余（指恢复记录，Recovery Record）和分卷，因为之前有在光盘上存一部分的音乐，而最后有几个压缩包已经无法恢复了，光这一条一卡几乎没剩下几条选项，可以参考&lt;a class="link" href="https://en.wikipedia.org/wiki/List_of_archive_formats#Data_recovery" target="_blank" rel="noopener"
>维基百科&lt;/a>。内置支持恢复记录的格式最著名且常用的有WinRAR（虽然不开源），另外剩下的里面开源的只有DAR，FreeArc。FreeArc已经10年没更新了，并且代码是毛子用Haskell写的，注释都是俄语。。因此就不考虑了。如果考虑外部支持的话最常用的就是Par2标准。下面对比几种（文件级别）方案的区别&lt;/p>
&lt;blockquote>
&lt;p>如果有多盘的话那么RAID就是不二选择了。不过选择文件系统以及组RAID或者NAS都是比较折腾，而且多数情况下需要Linux，我现在平时还是难免用Windows当主力，换成Linux做备份还是麻烦，因此本文就不介绍支持备份功能的文件系统了。如有兴趣可以自行了解&lt;a class="link" href="https://www.openzfs.org" target="_blank" rel="noopener"
>ZFS&lt;/a>、&lt;a class="link" href="https://btrfs.wiki.kernel.org/index.php/Main_Page" target="_blank" rel="noopener"
>Btrfs&lt;/a>或者&lt;a class="link" href="https://wiki.archlinux.org/title/XFS" target="_blank" rel="noopener"
>XFS&lt;/a>+&lt;a class="link" href="https://en.wikipedia.org/wiki/Logical_Volume_Manager_%28Linux%29" target="_blank" rel="noopener"
>LVM&lt;/a>。这方面还有有很多博文可以参考（如&lt;a class="link" href="https://markmcb.com/2020/01/07/five-years-of-btrfs" target="_blank" rel="noopener"
>这一篇ZFS和Btrfs的比较&lt;/a>，以及&lt;a class="link" href="https://ownyourbits.com/2019/03/03/how-to-recover-a-btrfs-partition/" target="_blank" rel="noopener"
>这一篇如何从Btrfs恢复数据&lt;/a>）&lt;/p>
&lt;/blockquote>
&lt;h3 id="winrar">WinRAR&lt;/h3>
&lt;p>&lt;a class="link" href="https://www.rarlab.com/" target="_blank" rel="noopener"
>WinRAR&lt;/a>除了不开源之外其实没有任何大毛病，它的解压部分也是开源的，因此不用担心以前的rar压缩包以后会打不开。主要的缺陷是WinRAR对增量更新几乎没有支持，最多&lt;a class="link" href="https://x443.wordpress.com/2012/07/11/winrar-incremental-differential-backup/" target="_blank" rel="noopener"
>通过文件flag来实现&lt;/a>，因此不必指望RAR做增量更新了。如果只是想把收藏做个镜像，那WinRAR就很方便了，有不错的压缩和加密，而且内置支持分卷和恢复记录，这两个功能到2021年仍然是独一家。&lt;/p>
&lt;h3 id="dar--par2">DAR + Par2&lt;/h3>
&lt;p>DAR是一个设计来替代Tar的文档格式，内置对Par2的支持，并且支持增量更新，对大量数据的备份其实挺友好的。&lt;a class="link" href="https://en.wikipedia.org/wiki/Parchive#Par2" target="_blank" rel="noopener"
>PAR2&lt;/a>是个给文件生成外部恢复记录的标准，可以生成一些恢复记录文件，当数据主体文件有一些损坏的时候，可以使用PAR2文件进行恢复，并且PAR2文件本身也是能够允许一部分损坏的。这个方案其实功能上来说很不错，但是由于是针对Linux设计的，对Windows支持用cygwin太不友好了。此外DAR的软件支持也不是很全，不知道为什么没有流行起来。&lt;/p>
&lt;h3 id="7zip--par2">7zip + Par2&lt;/h3>
&lt;p>如果不限打包软件（不要求对Par2的直接支持和增量更新）的话7zip应该是当前评价最高的压缩软件了。7zip + Par2是个不错的选择，不过设置Par2的参数就有一些麻烦了。这个方案相比WinRAR的优势仅仅在于7zip和Par2都是开源的。7zip有个额外的坏处是它的slice每个分区不能独立打开，rar的话每个slice包都有对应的文件可以解压。Par2相比WinRAR的修复好处在于它可以progressively提供冗余，就是下载的冗余文件不够的话可以下载更多冗余文件来进行修复，弱势是它不能处理32767以上个文件，因此必定需要跟某个archive格式一起使用。&lt;/p>
&lt;h3 id="7zip--seqbox">7zip + SeqBox&lt;/h3>
&lt;p>除了冗余数据之外，另一种保护对象是磁盘系统的文件头。SeqBox是一个用来保护&lt;strong>单一&lt;/strong>文件在磁盘文件系统损坏的情况下仍能恢复数据的通用工具，其工作原理是将文件分割成尺寸小于硬盘扇区（sector）大小的块，每个文件块有独立的包含文件UID的文件头，这样哪怕分区表损坏，指定文件还是可以通过一次全盘扫描恢复出来。而BlockyArchive则是基于此之上的改进版，给每个文件块加上了冗余码，使得文件本身的损坏也可以得到恢复。这个方法对数据长期冷存储应该是很有用的。不过它会产生不小的额外存储开销，并且对应的功能其实更适合通过文件系统本身来解决，例如之前提到的著名的ZFS和Btrfs。&lt;/p>
&lt;h2 id="在线备份">在线备份&lt;/h2>
&lt;p>由于在线存储服务商通常都会提供数据完整性check以及数据冗余存储的功能，因此对recovery record的需求没有那么大（百度网盘除外！！！辣鸡网盘下载经常文件损坏）。有许多软件支持数据同步和备份，同步比如Google Drive自带的sync，Onedrive或者&lt;a class="link" href="https://rclone.org/" target="_blank" rel="noopener"
>rclone&lt;/a>，他们的缺陷是没有加密、压缩，并且支持的snapshot功能有限。相比于本地备份，在线备份更关注的可能就是文件体积了，因为文件体积可能直接会影响收费策略，而冗余和备份通常会有云服务商来保证，因此去重对于在线备份来说是更重要的。&lt;/p>
&lt;p>更针对性的备份软件则对这些都有支持，在&lt;a class="link" href="https://alternativeto.net/software/time-machine/?license=opensource" target="_blank" rel="noopener"
>这个网站有一个开源软件的list&lt;/a>。这些软件通常支持将数据备份到另一个目录、NAS或者网盘，并且定期执行增量备份。由于Windows或者Mac目前还是不可避免地成为主力系统，因此只考虑支持Windows、Mac的情况下，再加上有GUI，可选项有&lt;a class="link" href="https://www.duplicati.com/" target="_blank" rel="noopener"
>Duplicati&lt;/a>，&lt;a class="link" href="https://duplicacy.com/" target="_blank" rel="noopener"
>Duplicacy&lt;/a>，&lt;a class="link" href="https://www.urbackup.org/impressions.html" target="_blank" rel="noopener"
>UrBackup&lt;/a>和&lt;a class="link" href="https://github.com/BlobBackup/BlobBackup" target="_blank" rel="noopener"
>BlobBackup&lt;/a>。这些软件有些是针对系统备份设计的，但其实我对系统备份没有什么需求，毕竟重装系统也没有很麻烦。Duplicacy有开源CLI，但GUI是收费的，性能很好。UrBackup的UI都很简陋，而且感觉更新不勤。BlockBackup是个定位简洁的产品，看下来Duplicati和Duplicacy还是个不错的选择，Duplicati支持的后端更多，而Duplicacy的性能更好并且更稳定。关于这些选择有不少比较，例如&lt;a class="link" href="https://forum.duplicati.com/t/big-comparison-borg-vs-restic-vs-arq-5-vs-duplicacy-vs-duplicati/9952" target="_blank" rel="noopener"
>Duplicati的论坛里&lt;/a>，&lt;a class="link" href="https://github.com/gilbertchen/benchmarking" target="_blank" rel="noopener"
>Duplicacy作者的benchmark&lt;/a>，可供参考。目前我的选择是Duplicacy，因为稳定并且高效。但Duplicacy由于算法特性，产生的文件块比较小，因此对于大数量的小文件备份不是很友好，如果之后要做日常文件备份的话可能还是会考虑Duplicati。&lt;/p>
&lt;p>这里提以下去重（Deduplication）和&lt;a class="link" href="http://dar.linux.free.fr/doc/usage_notes.html#Decremental_Backup" target="_blank" rel="noopener"
>增量（Incremental）/减量（Decremental）/差分（Differential）备份&lt;/a>的区别，通常增量备份仅仅会保留完整的新文件而可以跳过没有改动的文件（类似Git的模式），对文件中不同的部分一般不做处理，但在这种情况下如果有大文件进行了内容修改，则会产生大量的浪费，因此有专门的去重算法来针对文件整体内容进行去重，其本质上就是将所有文件看作一个大文件，然后通过特定的方法拆分（通常是使用&lt;a class="link" href="https://en.wikipedia.org/wiki/Rolling_hash" target="_blank" rel="noopener"
>Rolling hash&lt;/a>）来达到快速查重的效果。这样的一个比较大的问题就是文件会被分成很多小块（通常只有几个MB），因此对于文件传输来说其实很低效（例如上传到网盘、拷入备用磁盘等），并且将文件分块太细也会带来一定的性能和容量损失。在文件内容大部分为大文件，并且不会内部进行小修改的时候，这样的操作其实比较浪费时间。&lt;/p>
&lt;p>这里提到的在线备份工具都可以把本地磁盘看作一个备份目的地，因此也可以用作离线备份。另外离线备份也可以通过同步工具（如rclone）变成在线备份。上文提到的离线备份一般不能做到multi-version（除了ZFS），不过对于比如我这个音乐收集的任务来说，历史记录不是非常重要，因此也是个可行的方案。&lt;/p>
&lt;h2 id="网站归档">网站归档&lt;/h2>
&lt;p>还有一个比较另类的需求，我不仅想备份自己的文件，还想备份别人的&lt;del>文件&lt;/del>网站。&lt;/p>
&lt;p>很多同人社团的网站有很多信息，如Discography、世界观设定、Stuff List甚至一些正常的blog等，但是这些内容都不是持久的，很多同人社团停止活动之后网站也没了，因此也想备份他们的网站。这个需求通常可以通过知名网站&lt;a class="link" href="https://archive.org/web/" target="_blank" rel="noopener"
>Internet Archive&lt;/a>完成，但是这个网站因为是公益性质的，一些多媒体资源并不一定有保存下来，还是自己搭建网站爬虫会比较可靠，Internet Archive可以作为补充。&lt;/p>
&lt;p>网站爬取以前是通过IDM（Internet Download Manager）可以实现，但是IDM不免费因此后面也没有用了。而单页的存档方式之前很流行的一个格式是Firefox的&lt;a class="link" href="https://en.wikipedia.org/wiki/Mozilla_Archive_Format" target="_blank" rel="noopener"
>maff&lt;/a>，不过Firefox也不再支持这个格式了。现在的计划是下载单独的网页用Save Page WE这个插件来完成，基本可以原封不动地备份一个网页，而对于备份整个网站，计划之后搭建一个自己的&lt;a class="link" href="https://github.com/ArchiveBox/ArchiveBox" target="_blank" rel="noopener"
>ArchiveBox&lt;/a>。&lt;/p></description></item></channel></rss>