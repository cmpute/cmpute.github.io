<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Coding on JacobZ</title><link>https://zyxin.xyz/blog/categories/Coding/</link><description>Recent content in Coding on JacobZ</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 24 Jul 2022 14:15:17 +0000</lastBuildDate><atom:link href="https://zyxin.xyz/blog/categories/Coding/index.xml" rel="self" type="application/rss+xml"/><item><title>（C语言）变长数组的陷阱</title><link>https://zyxin.xyz/blog/2022-07/ThePitfallOfVLA/</link><pubDate>Sun, 24 Jul 2022 14:15:17 +0000</pubDate><guid>https://zyxin.xyz/blog/2022-07/ThePitfallOfVLA/</guid><description>&lt;p>{% note default %}&lt;/p>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>这篇文章转载自&lt;a class="link" href="https://blog.joren.ga/vla-pitfalls" target="_blank" rel="noopener"
>Jorengarenar的博客&lt;/a>。类似于前一篇文章，这一篇博文是我在搜索为什么Rust不支持动态栈分配的时候看到的。有很多人希望Rust支持变长数组，并且有一个&lt;a class="link" href="https://github.com/rust-lang/rust/issues/48055" target="_blank" rel="noopener"
>相关的RFC&lt;/a>，但是&lt;a class="link" href="https://users.rust-lang.org/t/a-question-about-how-memory-is-stored-and-vlas/33901/16?u=cmpute" target="_blank" rel="noopener"
>也有人提到这很危险&lt;/a>，并且不会带来太大的收益，这篇文章总结了变长数组的问题，可供参考。
{% endnote %}&lt;/p>
&lt;h2 id="正文">正文&lt;/h2>
&lt;blockquote>
&lt;p>相比于固定尺寸，它会生成更多的、并且更慢的代码（而且很脆弱）。—— &lt;a class="link" href="https://lkml.org/lkml/2018/3/7/621" target="_blank" rel="noopener"
>Linus Torvalds&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>VLA 是变长数组（variable-length array）的缩写，它指的是长度在运行时而不是编译时决定的数组（真·数组，而不是接口像数组的一块内存）。VLA在C99标准中被引进，乍看上去它很方便并且高效，但是这只是各幻觉，实际上它只是一些顽固问题的源头。&lt;/p>
&lt;p>这篇文章的批评主要针对自动变长数组（automatic VLA），而不是所有形式的VLA，因此我在后文会用缩写aVLA来进行区分。&lt;/p>
&lt;blockquote>
&lt;p>支持某种形式的VLA的语言有：Ada, Algol 68, C, C#, COBOL, Fortran, J 和 Object Pascal。你可能注意到了，除了C和C#之外，其他的语言都不主流了。&lt;/p>
&lt;p>你从开头的引言中可能也猜到了，一个相当依赖于VLA的项目不是别的，正是Linux内核。维护者们花费了很多精力来移除VLA，并且在内核版本4.20（2018年）后实现了完全无VLA。&lt;/p>
&lt;p>在这篇文章刚开头的时候，我还要指出，在一些情形下，VLA是一个好解决方案。这样的情形不多，但是确实存在。未来我会尽力好好介绍他们并且链接到这篇文章来。&lt;/p>
&lt;/blockquote>
&lt;h2 id="栈分配">栈分配&lt;/h2>
&lt;p>aVLA通常分配在栈上，这就绝大部分问题的根源。我们来看一个非常简单并且看起来很适合aVLA的例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">long&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%Lf&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你可以发现，这段代码从用户的输入读取数组长度。编译并且跑一下试试，看看在堆栈溢出造成区块错误（segfault）前，你可以输入多少值。在我的测试里这个上限是50万。这只是一个基础数据类型！想象以下对于一个结构体这个上限可能是多少！或者如果不仅仅是&lt;code>main()&lt;/code>？考虑下递归函数？这个上限会大幅降低。&lt;/p>
&lt;p>并且，你没有任何（可移植、标准）的方法来处理堆栈溢出——你的程序已经无可救药地崩了。因此你要么需要在声明数组之前进行严格的长度审查，要么指望用户不要输入太大的数据。（这样赌博的后果显而易见）&lt;/p>
&lt;p>因此程序员&lt;strong>必须&lt;/strong>保证aVLA的商都不能超过安全的上限。但是实际情况里，如果你知道这个安全上限，那没道理你不会去确认它。&lt;/p>
&lt;h2 id="最糟糕的是">最糟糕的是&lt;/h2>
&lt;p>最糟糕的是segfault只是不当使用aVLA造成的后果中最好的一个。最坏情况是造成可以被利用的漏洞，攻击者可能会选择一个值，使得这个数组与其他内存分配重叠，从而控制那些值。这是个安全性灾难。&lt;/p>
&lt;blockquote>
&lt;p>如果你接受（进一步）损失程序性能，在GCC中你可以开启&lt;code>-fstack-clash-protection&lt;/code>选项，它会在进行变长栈空间分配时，增加额外的指令来在每个内存页上进行探测。这可以确保所有的栈分配是有效的，或者在无效的时候抛出segfault，来缓解栈冲突（stack-clash）问题，从而将可能的代码执行攻击变成服务拒绝（denial of service）&lt;/p>
&lt;/blockquote>
&lt;h2 id="那如何修改这个例子">那如何修改这个例子？&lt;/h2>
&lt;p>如果我想让用户决定数组大小并且创建大的离谱的定长数组很浪费？很简单，用&lt;code>malloc()&lt;/code>！&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">long&lt;/span> &lt;span class="kt">double&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">sizeof&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%Lf&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子里我可以最大输入13亿而不让我的机子报错。这大概是之前的2500倍！但是我最后仍然会碰到segfault是吧？唔，区别在于我们可以检查&lt;code>malloc()&lt;/code>的返回值，然后比如我们就可以告知用户：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">long&lt;/span> &lt;span class="kt">double&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">sizeof&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">perror&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;malloc()&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// output: &amp;#34;malloc(): Cannot allocate memory&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>我碰到过相左的观点：C经常被用于系统和嵌入式的语言，这些情况下可能都没法使用&lt;code>malloc()&lt;/code>。&lt;/p>
&lt;p>唉。。看来我又要重复一遍了，不过这确实很重要。&lt;/p>
&lt;p>在这种设备上你同样也没有多少栈空间。因此相比于在栈上动态分配空间，你应该确定你到底需要多少内存然后只使用固定尺寸的内存。&lt;/p>
&lt;p>当在栈空间很小的设备上使用aVLA的时候，你很容易弄出一些看起来能用的东西，但是当你的函数在栈已经很深的，有很多数据的时候被调用，你的栈就会炸。&lt;/p>
&lt;p>如果你在每个地方都分配固定尺寸的栈空间，那么你知道这肯定没问题。如果你在栈上动态分配内存，你需要测试你所有的代码路径，并且在所有可能的分配尺寸情况下进行测试，这比前者更难更容易出错。不要在甚至没有好处的情况下让它更容易射到你的脚（一个歇后语：footgun）&lt;/p>
&lt;/blockquote>
&lt;h2 id="意外创建">意外创建&lt;/h2>
&lt;p>不像其他危险的C语言特性，aVLA没有什么门槛。很多新手会在试错之后开始使用这个特性，却根本不了解它的问题。有些时候甚至很有经验的程序员都会大意，在不需要aVLA的时候创建它。以下就是一个完全没必要的静静地创建了一个aVLA的例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>好在只要是个比较现代的编译器都会发现并且把这个aVLA给优化掉，但是。。。万一它没发现呢？或者它处于某种原因（安全？）没有这么做呢？优化没打开呢？但这肯定都问题不大，是吧？呃。。。&lt;/p>
&lt;h2 id="比定长慢">比定长慢&lt;/h2>
&lt;p>在编译器不优化的情况下，之前这个&lt;a class="link" href="https://godbolt.org/z/c7nPvGGcP" target="_blank" rel="noopener"
>aVLA的例子&lt;/a>在数组初始化之前会生成7倍多的汇编指令，相比于它&lt;a class="link" href="https://godbolt.org/z/jx94vx84T" target="_blank" rel="noopener"
>对应的定长情况&lt;/a>（参见&lt;code>jmp .L5&lt;/code>之前的汇编部分）。但这是没有开编译器优化的情况，如果开了生成的汇编是一模一样的。&lt;/p>
&lt;p>这里有一个aVLA不是意外插入的例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">bar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#if 1 &lt;/span>&lt;span class="c1">// 1 for aVLA, 0 for aVLA-free
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">;)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">bar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#else
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">// Let&amp;#39;s make it bigger than 10! (or there won&amp;#39;t be what to examine)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">;)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">bar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">bar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">B&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">;)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d %d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">B&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>处于介绍的目的，在这个例子中&lt;code>-O1&lt;/code>级别的优化是最好的（生成的汇编会更清楚，然后&lt;code>-O2&lt;/code>并不会有太大的用处）。&lt;/p>
&lt;p>当我们编译aVLA的版本，在&lt;code>for&lt;/code>循环之前的指令如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">push rbp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mov rbp, rsp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">push r14
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">push r13
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">push r12
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">push rbx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mov r13d, edi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">movsx r12, edi ; here aVLA &amp;#34;starts&amp;#34;...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sal r12, 2 ;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lea rax, [r12+15] ;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">and rax, -16 ;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sub rsp, rax ;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mov r14, rsp ; ... and there &amp;#34;ends&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>而无aVLA的版本则生成：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">push r12
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">push rbp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">push rbx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sub rsp, 4000 ; this is caused by array definition
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mov r12d, edi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>因此不仅定长数组生成更少的代码，它也简单多了。为什么aVLA在最开始的时候会产生更多的开销？它没有什么特别伟大的任务，但仍然不是简简单单的一个指针移动。&lt;/p>
&lt;p>但是这些区别影响很大吗？&lt;a class="link" href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=02361bc77888" target="_blank" rel="noopener"
>是的，很大&lt;/a>。&lt;/p>
&lt;h2 id="无法初始化">无法初始化&lt;/h2>
&lt;p>在aVLA不经意间造成的问题中还有如下不被允许的例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>即便开了优化，aVLA仍然不支持初始化。因此尽管我们想要的是定长数组并且理论上编译器可以干这件事，但它就是行不通。&lt;/p>
&lt;h2 id="给编译器作者带来麻烦">给编译器作者带来麻烦&lt;/h2>
&lt;p>几个月前我存了Reddit上的一个&lt;a class="link" href="https://www.reddit.com/r/C_Programming/comments/jz2213/are_vlas_bad_even_if_theyre_not_allocated_on_the/gdc3hz6" target="_blank" rel="noopener"
>评论&lt;/a>，它列举了从编译器开发者的角度在VLA上碰到的问题。我把它引在下面：&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>VLA其实适用于一个类型，而不是一个实际数组。因此你可以给VLA类型加一个&lt;code>typedef&lt;/code>，它会冻结用到的表达式，即便这个表达式的一部分在VLA类型被使用的时候已经变了&lt;/li>
&lt;li>VLA可以在代码块和循环中使用，这意味着要在栈上分配和释放动态长度的数据，如果你不想让偏移量（offsets）被乱搞，你就需要用指针来间接地实现它。&lt;/li>
&lt;li>你可以在有VLA被使用的情况下用&lt;code>goto&lt;/code>跳进或者跳出代码块，有些事情会被限制，但是也有不被限制的，而编译器却需要跟踪所有的这些骚操作&lt;/li>
&lt;li>VLA可以被用在多维数组上&lt;/li>
&lt;li>VLA可以被指针指向（因此你不需要分配空间，但是仍然需要跟踪所有变量的大小）&lt;/li>
&lt;li>有些编译器允许在结构体定义里面使用VLA（我真的不知道这是怎么弄的，或者在什么地方VLA的尺寸被定下来了，然后所有的结构体会拥有同样的VLA尺寸）&lt;/li>
&lt;li>一个函数可以同时有多个VLA被使用，并且它们可以在不同的地方，或者有条件地，或者在循环里被创建或者销毁。&lt;/li>
&lt;li>&lt;code>sizeof&lt;/code>需要被专门针对VLA实现（针对一个VLA实体，VLA类型，混合VLA和定长尺寸的类型，VLA数组，VLA指针）&lt;/li>
&lt;li>VLA这个词还被用于描述（当维数由传入参数确定时）多维数组的参数&lt;/li>
&lt;li>在Windows上用有些编译器的时候（至少GCC是这样），声明过大的局部数组（使得栈尺寸超过4KB）意味着要调用一个特殊的分配器（&lt;code>__chkstk()&lt;/code>），因为栈空间一次只能增长一个内存页）。当声明一个VLA的时候，编译器不知道它的长度，因此它需要在每个涉及的函数里都调用（&lt;code>__chkstk()&lt;/code>），即便VLA的尺寸实际上很小。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>并且相信我，如果你在C语言的一些论坛里溜一圈，你会发现更多不同的抱怨。&lt;/p>
&lt;h2 id="降低可移植性">降低可移植性&lt;/h2>
&lt;p>由于前面提到的这所有问题，有些编译器决定不完全支持C99。最主要的例子是微软的MSVC。C语言标准委员会页注意到了这个问题，并且在C11修订版中将VLA的支持标为可选的。&lt;/p>
&lt;blockquote>
&lt;p>C2x计划将推翻这个决定，但是aVLA仍然不是强制的&lt;/p>
&lt;/blockquote>
&lt;p>这意味着使用VLA的代码有可能没法被一个C11编译器编译。因此你需要检查&lt;code>__STDC_NO_VLA__&lt;/code>宏，并且在不支持的时候增加备用选项。&lt;/p>
&lt;blockquote>
&lt;p>另外，C++没有VLA并且没有证据表明它有将来会支持。这不是什么大事，但是仍然给C的VLA提供了一个反例&lt;/p>
&lt;/blockquote>
&lt;h2 id="挑骨头打破调用习惯">（挑骨头）打破调用习惯&lt;/h2>
&lt;p>这是鸡蛋里挑骨头了，但是它确实是另一个让人不喜欢VLA的原因。一个常用的函数调用习惯是先传指针，再传参数，对于数组它的意思是：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">**&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="cm">/* arr[i][j] = ... */&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>C99标准中，提到数组的长度必须在参数列表里遇到的时候立马被分析确定，这意味着在用VLA的时候你没法用跟上面一样的语法&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="cm">/* arr[i][j] = ... */&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="c1">// 非法！
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你需要&lt;/p>
&lt;ul>
&lt;li>打破这个习惯
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="cm">/* arr[i][j] = ... */&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>或者使用过时的语法（即将被标准删除）
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// arr[i][j] = ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="结论">结论&lt;/h2>
&lt;p>简而言之，别用VLA，编译你代码的时候开启&lt;code>-Wvla&lt;/code>开关。VLA特性带来了很多危险却经常没有与之匹配的有用的回报。如果你发现在你的使用场景里里VLA是一个有效的解决方法，那就用它，但是记住我上面所提到的这些局限。&lt;/p>
&lt;blockquote>
&lt;p>可能还值得一提的是，VLA还被认为是解决问题同样很多的，不标准的&lt;code>alloca()&lt;/code>的一个途径。&lt;/p>
&lt;/blockquote></description></item><item><title>长浮点数（long double）的陷阱</title><link>https://zyxin.xyz/blog/2022-07/ThePitfallOfLongDouble/</link><pubDate>Sun, 24 Jul 2022 01:19:33 +0000</pubDate><guid>https://zyxin.xyz/blog/2022-07/ThePitfallOfLongDouble/</guid><description>&lt;p>{% note default %}&lt;/p>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>此文转载自Prelert的博客，作者为David。这篇文章目前只能&lt;a class="link" href="https://web.archive.org/web/20170422155137/http://info.prelert.com/blog/author/david" target="_blank" rel="noopener"
>在WebArchive找到&lt;/a>了，因此我把此文转载并翻译到我的博客上。&lt;/p>
&lt;p>我是在搜索为什么Rust没有对应C/C++中&lt;code>long double&lt;/code>的数据类型的时候看到了这篇博文，Rust不提供对应的数据类型造成了一些互操作性的问题（参见&lt;a class="link" href="https://immunant.com/blog/2019/11/rust2020/#:~:text=long%20doubletypes%20in%20C%20are%20specified%20as%20being,with%20C%20code%2C%20Rust%20needs%20to%20support%20long" target="_blank" rel="noopener"
>这里&lt;/a>和&lt;a class="link" href="https://github.com/rust-lang/rust-bindgen/issues/1549" target="_blank" rel="noopener"
>这里&lt;/a>）。与此相对的是，Zig和新发布的Carbon语言都支持&lt;code>f16&lt;/code>和&lt;code>f128&lt;/code>数据类型（其中Zig还支持&lt;code>f80&lt;/code>，Carbon还支持&lt;code>bfloat16&lt;/code>）。不过这倒是不令人意外，因为Zig和Carbon都以与C/C++的极致兼容性为卖点。这篇博客也许能解释一部分Rust不支持更高精度浮点数的原因。
{% endnote %}&lt;/p>
&lt;h2 id="正文">正文&lt;/h2>
&lt;p>C++ 提供三种浮点数据类型：&lt;code>float&lt;/code>, &lt;code>double&lt;/code> 和 &lt;code>long double&lt;/code>。关于这些类型，&lt;a class="link" href="http://webstore.ansi.org/RecordDetail.aspx?sku=INCITS%2FISO%2FIEC&amp;#43;14882-2012" target="_blank" rel="noopener"
>C++11标准&lt;/a>只提到了：&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>double&lt;/code>类型需要提供至少与&lt;code>float&lt;/code>同等的精度，而&lt;code>long double&lt;/code>需要提供至少与&lt;code>double&lt;/code>同等的精度。&lt;/p>
&lt;p>&lt;code>float&lt;/code>类型所有支持的数值是&lt;code>duoble&lt;/code>的子集；&lt;code>double&lt;/code>类型所有支持的数值是&lt;code>long duoble&lt;/code>的子集。各浮点类型的数据表示方法取决于具体的实现。&lt;/p>
&lt;/blockquote>
&lt;p>但是，几乎所有C++编译器都带一个C编译器，而&lt;a class="link" href="http://webstore.ansi.org/RecordDetail.aspx?sku=INCITS/ISO/IEC%209899-1999%20%28R2005%29" target="_blank" rel="noopener"
>C99标准&lt;/a>的F附件则有更详细的规定：&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;code>float&lt;/code> 类型对应IEC 60559标准的单精度浮点数&lt;/li>
&lt;li>&lt;code>double&lt;/code> 类型对应IEC 60559标准的双精度浮点数&lt;/li>
&lt;li>&lt;code>long double&lt;/code>类型对应IEC 60559标准的扩展精度浮点数，或者非IEC 60559的扩展精度浮点数，或者IEC 60559的双精度浮点数。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>只有一个彻头彻尾的M才会编写一个在C++和C部分使用不同浮点类型的C++编译器，因此实际上C++也要服从同样的规定。我所使用果的所有近20年内的C++编译器都使用&lt;a class="link" href="http://en.wikipedia.org/wiki/IEEE_floating_point" target="_blank" rel="noopener"
>IEC 60559&lt;/a>（也就是&lt;a class="link" href="http://en.wikipedia.org/wiki/IEEE_754-1985" target="_blank" rel="noopener"
>IEEE 754&lt;/a>）所规定的单精度和双精度浮点数，但是在实现最后一个类型——&lt;code>long double&lt;/code>——上这些编译器会有不一致，这也导致了一些问题。&lt;/p>
&lt;p>在我的整个软件开发生涯中，我遇到过的几次与&lt;code>long double&lt;/code>类型相关的问题，可以被归为两类：&lt;/p>
&lt;ol>
&lt;li>缺乏测试&lt;/li>
&lt;li>可移植性&lt;/li>
&lt;/ol>
&lt;h3 id="缺乏测试">缺乏测试&lt;/h3>
&lt;p>在去年底我记录了一个&lt;a class="link" href="https://web.archive.org/web/20170305103541/http://www.prelert.com/blog/linux-speeds-ahead/" target="_blank" rel="noopener"
>可以归为第一类的问题&lt;/a>。一个glibc在x86_64平台上的&lt;code>powl()&lt;/code>函数实现中的&lt;a class="link" href="http://sourceware.org/bugzilla/show_bug.cgi?id=2445" target="_blank" rel="noopener"
>bug&lt;/a>有五年多未得到修复。我感觉如果这个bug是在用的更广泛的&lt;a class="link" href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/pow.html" target="_blank" rel="noopener"
>&lt;code>pow()&lt;/code>&lt;/a>函数中，那么会有更多人感到惊奇然后有人会更快修复它。因为这个函数的&lt;code>long double&lt;/code>版本用的人较少，因此这个bug就烂在那了。&lt;/p>
&lt;p>另一个&lt;code>long double&lt;/code>缺乏测试的例子是我在加入Prelert之前碰到的，与IBM的xlC/C++编译器相关在&lt;a class="link" href="http://www-03.ibm.com/systems/power/software/aix/" target="_blank" rel="noopener"
>AIX&lt;/a>系统上的问题。调用这个编译器的时候使用的名字（硬链接）决定了它的行为方式，当使用名称 xlC128_r 调用编译器时，它使用128位的 long double 表示。然后有一段时间，即使是最简单的程序编译都会崩（core dump）。尽管&lt;a class="link" href="http://www-01.ibm.com/support/docview.wss?uid=swg1IY96361" target="_blank" rel="noopener"
>bug报告&lt;/a>里面提到了一个调用&lt;a class="link" href="http://pubs.opengroup.org/onlinepubs/007908775/xsh/fork.html" target="_blank" rel="noopener"
>fork()&lt;/a>的例子，但其实如果打开了&lt;a class="link" href="http://publib.boulder.ibm.com/infocenter/comphelp/v8v101/index.jsp?topic=%2Fcom.ibm.xlcpp8a.doc%2Fcompiler%2Fref%2Fruoptbrt.htm" target="_blank" rel="noopener"
>-brtl&lt;/a>开关，最简单的&amp;quot;hello world&amp;quot;程序也能崩！显然所有的测试都是在使用其他更常用的名字调用编译器时完成的（这些情况下&lt;code>long double&lt;/code>不是128位）。&lt;/p>
&lt;h3 id="可移植性">可移植性&lt;/h3>
&lt;p>而关于可移植性，一些需要注意的坑有：&lt;/p>
&lt;ol>
&lt;li>微软的&lt;a class="link" href="http://en.wikipedia.org/wiki/Visual_C%2B%2B" target="_blank" rel="noopener"
>Visual C++&lt;/a>使用IEEE 754双精度浮点数表示&lt;code>long double&lt;/code>——跟&lt;code>double&lt;/code>一样（&lt;code>C99&lt;/code>标准所允许的第三种情况）。因此在你的代码中区分&lt;code>long double&lt;/code>和&lt;code>double&lt;/code>毫无意义如果你只用微软的VC++进行编译。但如果你的代码需要支持别的平台并且你仍然使用&lt;code>long double&lt;/code>，那么你就给你的代码里面掺入了一个很关键的，与平台相关的行为区别，它会让你吃亏的。大部分其他x86编译器都把&lt;code>long double&lt;/code>看作&lt;a class="link" href="http://en.wikipedia.org/wiki/X87" target="_blank" rel="noopener"
>x87&lt;/a>所使用的80位扩展精度浮点数。&lt;/li>
&lt;li>在&lt;a class="link" href="http://en.wikipedia.org/wiki/SPARC" target="_blank" rel="noopener"
>SPARC芯片&lt;/a>上（我知道它已经快挂了），&lt;code>long double&lt;/code>类型使用128位的表示，但是默认情况下，编译器会生成软件实现，而非硬件实现的（浮点数）操作。这个情况可以回溯到大部分SPARC芯片都不支持这样的操作，然后使用中断来实现的时候。在软件层面实现浮点操作比去响应这些中断要快。但是软实现的浮点操作比硬件加速的浮点操作慢好几个数量级——我们发现一些单元测试会慢20倍，而且这些并不是单纯的做&lt;code>long double&lt;/code>运算的测试。这是一个牺牲性能来换取代码（在编译和正确性方面）可移植的例子。&lt;/li>
&lt;/ol>
&lt;p>参考其他可移植的语言很有指导意义。Java有与IEEE754的单/双精度浮点数对应的&lt;a class="link" href="http://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html" target="_blank" rel="noopener"
>&lt;code>float&lt;/code>和&lt;code>double&lt;/code>类型&lt;/a>（并且不像C++，Java标准&lt;a class="link" href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.2.3" target="_blank" rel="noopener"
>对如何实现浮点数运算非常明确&lt;/a>）。Java没有给程序员提供&lt;code>long double&lt;/code>类型，大概是因为我上面提到的可移植性问题（尽管这个标准允许在中间计算过程中使用x87扩展精度的格式）。&lt;a class="link" href="http://docs.python.org/2/library/stdtypes.html#typesnumeric" target="_blank" rel="noopener"
>Python&lt;/a>只有一个&lt;code>float&lt;/code>类型，并且“通常用C语言的&lt;code>double&lt;/code>实现”。因此，如果你的整体系统包含使用其他语言编写的组件，那你弃用&lt;code>long double&lt;/code>可以避免数据交换中的问题。同样的道理也适用于在数据库中存储浮点数——例如&lt;a class="link" href="http://www.postgresql.org/" target="_blank" rel="noopener"
>PostgreSQL&lt;/a>提供&lt;a class="link" href="http://www.postgresql.org/docs/9.2/static/datatype-numeric.html#DATATYPE-FLOAT" target="_blank" rel="noopener"
>&lt;code>real&lt;/code>和&lt;code>double&lt;/code>&lt;/a>，对应IEEE 754的单/双精度浮点数。&lt;/p>
&lt;p>最后，一个在x86 CPU上只用&lt;code>float&lt;/code>和&lt;code>double&lt;/code>的好处是，编译器可以利用上CPU的&lt;a class="link" href="http://en.wikipedia.org/wiki/Streaming_SIMD_Extensions" target="_blank" rel="noopener"
>SSE&lt;/a>单元，然后两次或四次（浮点）运算有机会并行完成。这时使用64位调用约定的把函数参数传到寄存器中，那之后就可以直接使用SSE寄存器了。反之，&lt;code>long double&lt;/code>变量只能在&lt;code>x87&lt;/code>浮点运算单元中使用，并且不会使用寄存器传参，从而让程序变慢了。&lt;/p>
&lt;h3 id="结论">结论&lt;/h3>
&lt;p>有些人可能会说，使用&lt;code>long double&lt;/code>可以提高结果的精度。这可能是对的，但是无论一个固定精度的浮点数有多少有效位数，它都会有有效位数损失的情况（如果使用的算法不好的话）。使用扩展精度而不是双精度可能会在某些情况下避免这些问题，但是长期来看唯一的解决方法是使用更适合计算机的算法，或者设法检测有效位数损失，并且把结果替换成合适的值。&lt;/p>
&lt;p>在我看来，如果你想编写可移植的C++代码，使得它不仅可以在多个平台运行，并且在某些平台上没有很夸张的性能问题，你最好避开&lt;code>long duoble&lt;/code>。这也是我们在Prelert做法——我们的C++代码不使用&lt;code>long duoble&lt;/code>，并且在使用Boost的时候我们定义&lt;a class="link" href="http://www.boost.org/doc/libs/1_54_0/libs/math/doc/html/math_toolkit/config_macros.html#math_toolkit.config_macros.boost_math_macros" target="_blank" rel="noopener"
>BOOST_MATH_NO_LONG_DOUBLE_MATH_FUNCTIONS&lt;/a>这个宏，让&lt;a class="link" href="http://www.boost.org/doc/libs/1_54_0/libs/math/doc/html/index.html" target="_blank" rel="noopener"
>Boost.Math&lt;/a>也不使用。&lt;/p></description></item><item><title>初识Rust - 从一个Python/C++/C#程序员的角度对比Rust</title><link>https://zyxin.xyz/blog/2021-10/FirstGlanceOnRust/</link><pubDate>Fri, 29 Oct 2021 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2021-10/FirstGlanceOnRust/</guid><description>&lt;p>近些年一直有听闻Rust的发展，相比其他新语言（如julia），我觉得Rust是切实解决了一些程序开发的痛点的，并且Rust比较适合作为底层软件开发的语言，我很感兴趣。Rust官方有一本&lt;a class="link" href="https://doc.rust-lang.org/stable/book/" target="_blank" rel="noopener"
>Gitbook教程&lt;/a>，因此我就直接通过阅读它来上手Rust了。&lt;/p>
&lt;p>本文记录一些我在看完这本书之后初步总结的一些Rust与我熟悉的Python/C++/C#之间的各方面的异同。如果你也有Python/C++/C#的编程经验，并且想上手Rust，那么这篇文章应该能帮助你概括性地了解Rust的特性。本文也是我对Python/C++/C#之间特性的一个对比总结，但是我对这些语言的了解也没有那么深，因此如有谬误还请指教。&lt;/p>
&lt;blockquote>
&lt;p>备注：&lt;/p>
&lt;ul>
&lt;li>本文中的代码仅为代码片段，对于Python之外的代码你可能需要将部分代码放在主函数中才能正确运行。&lt;/li>
&lt;li>本文的代码格式以精简为主，没有按照语言的标准格式编写。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="语法">语法&lt;/h2>
&lt;h3 id="赋值">赋值&lt;/h3>
&lt;p>在变量进行赋值的时候，内容的传递有三种模式：传引用、复制、移动。其中最后一种指的是旧内容被复制到新对象中，然后旧对象中的内容变为不可用。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 是传引用&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 引用类型是传引用、值类型是复制&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 都是复制，但是是浅复制&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 默认是复制，但是可以通过&lt;code>std::move&lt;/code>实现移动（需要C++11)&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 默认是移动。复制需要使用&lt;code>.clone()&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="初始化">初始化&lt;/h3>
&lt;p>这几种语言初始化一个对象的语法有不少相似之处，因此列举在这里供比较。
{% tabs Function Code Example %}&lt;/p>
&lt;!-- tab Python -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">##### initialize class instance #####&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Point&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">y&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">##### intialize array #####&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)]&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="c1"># use list algorithmic operator&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)]&lt;/span> &lt;span class="c1"># use list comprehension&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">///// initialize struct instance /////
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">Point&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="n">Point_t&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// declare and initialize
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point_t&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// bracket initialization
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point_t&lt;/span> &lt;span class="n">q&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Point_t&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// initialize on heap
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Point_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Point_t&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">s&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">///// initialize array /////
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point_t&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">// declare without initialization
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point_t&lt;/span> &lt;span class="n">arr2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">{.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// initializer, here the third value is uninitialized
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point_t&lt;/span> &lt;span class="n">arr3&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">{.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// the size of array is inferred to be 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point_t&lt;/span> &lt;span class="n">arr4&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">{.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="p">...&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// range initialize 2nd ~ 5th item
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">arr_2d&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">};&lt;/span> &lt;span class="c1">// you can even initialize 2D array with bracket initialization
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">arr2_2d&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">},{&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">},{&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">}};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// declare the array on heap with 5 items
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">arr5&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Point_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Point_t&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C++ -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">///// initialize class instance /////
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Point&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// C++ will create default constructors with no args, field args and initializer list
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// declare and initialize
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// direct initialize
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point&lt;/span> &lt;span class="nf">q&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// initializer
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// list initializer (C++11)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// aggregate initializer (C++20)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// initialize on heap
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Point&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">u&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">///// initialize array /////
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// C++ supports all initialization method from C, but you might need C++11/20
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// declare the array on heap with 5 items
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]{&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// all initializer syntax can be used here
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">delele&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C# -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-csharp" data-lang="csharp">&lt;span class="line">&lt;span class="cl">&lt;span class="cs">///// initialize class instance /////&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Point&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">X&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">get&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">set&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">Y&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">get&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">set&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Point&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">X&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">Y&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// declare and initialize&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Point&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// constructor&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Point&lt;/span> &lt;span class="n">q&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Point&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Point&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">X&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Y&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// anonymous type&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">var&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">X&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Y&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cs">///// initialize array /////&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Point&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="n">arr&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">// new array with null values (or default value for struct type)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Point&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="n">arr2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Point&lt;/span>&lt;span class="p">[,]&lt;/span> &lt;span class="n">arr2d&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// initialize 2d array&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">var&lt;/span> &lt;span class="n">numbers&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Dictionary&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="c1">// initialize object with indexers&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na"> [7]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;seven&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na"> [9]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;nine&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na"> [13]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;thirteen&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab Rust -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">///// initialize struct instance /////
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Point&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>: &lt;span class="kt">f64&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>: &lt;span class="kt">f64&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>: &lt;span class="mf">1.&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>: &lt;span class="mf">2.&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// rust don&amp;#39;t automatically cast the type
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">q&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>: &lt;span class="mf">2.&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// partial copy from another instance
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mf">2.&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>: &lt;span class="mf">2.&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// using the variable with the same name in scope
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">///// initialize array /////
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">_&lt;/span>: &lt;span class="p">[&lt;/span>&lt;span class="kt">u8&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">arr&lt;/span>: &lt;span class="p">[&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">q&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;p>{% endtabs %}&lt;/p>
&lt;h3 id="只读">只读&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>： 没有什么东西是只读的，你唯一能做的就是hack一些函数，让别人在修改的时候报错&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 有&lt;code>const&lt;/code>关键字，可以定义全局常量或者函数内常量&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 有&lt;code>const&lt;/code>，&lt;code>constexpr&lt;/code>（后者更接近C的&lt;code>const&lt;/code>，需要C++11），成员函数可以单独控制只读性，相当于可以对成员函数的&lt;code>this&lt;/code>参数加上&lt;code>const&lt;/code>&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 有&lt;code>readonly&lt;/code>, &lt;code>const&lt;/code>，前者修饰不变量而后者是编译器常量。C# 9引入了record，可以实现immutable。&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 变量默认都是不可变的，可变需要添加关键字&lt;code>mut&lt;/code>（这个名字可太迷惑了，默认不可变的东西是不是不应该叫变量），成员函数可以通过外置定义的第一个参数单独控制只读性(&lt;code>self&amp;amp;&lt;/code> / &lt;code>mut self&amp;amp;&lt;/code>)，这个逻辑类似C++&lt;/li>
&lt;/ul>
&lt;p>{% tabs Const Code Example %}&lt;/p>
&lt;!-- tab Python -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># usually people follow certain style (like all uppercase) to name the constant variable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">SOME_CONSTANT&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">SOME_CONSTANT&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C++ -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// constexpr is used for compile time constant
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">constexpr&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">SOME_CONSTANT&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">constexpr&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">constexpr_func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// const can be used to describe class members
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Coords&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">shift&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Coords&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">offset&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="nf">sum&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">_x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">_y&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">_x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Coords&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">_x&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">_y&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">// const field must be initialized using initializer list
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// const variables are only able to call const member function
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Coords&lt;/span> &lt;span class="n">coord&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">coord&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// coord.shift() is illegal here
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C# -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-csharp" data-lang="csharp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// `const` is used for compile time constant&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">SOME_CONSTANT&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">SomeType&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">const_field&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// the value still need to be defined in compile time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">const_field2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SomeType&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">string&lt;/span> &lt;span class="n">str_in&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">const_field2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">str_in&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="c1">// readonly field must be initialized in declaration or constructor&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// since C# 7.2, readonly can be used to declare immutable type&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">Coords&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="n">Coords&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">X&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">Y&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">X&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">get&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">init&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">Y&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">get&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">init&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">Sum&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">X&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="n">Y&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="c1">// C# 8.0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// alternatively readonly can be applied to properties individually&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">Coords&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="n">Coords&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">_x&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">Y&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">_x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">X&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="k">get&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">_x&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">Y&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">get&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">init&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="c1">// C# 9.0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab Rust -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// use `const` for compile time constant
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">const&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">SOME_CONSTANT&lt;/span>: &lt;span class="kt">u32&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">some_constant&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// immutable by default
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">some_constant&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// this will shadow the previous definition
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Coords&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>: &lt;span class="kt">f64&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>: &lt;span class="kt">f64&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Coords&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">f64&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// the instance is also immutable in methods
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">offset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Coords&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">offset&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">offset&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">offset&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;p>{% endtabs %}&lt;/p>
&lt;h3 id="全局变量静态成员">全局变量、静态成员&lt;/h3>
&lt;blockquote>
&lt;p>静态成员可以看作从属于某个范围的全局变量&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 支持全局变量，但是在全局范围以外默认不可变，可变需要使用global关键字&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 支持全局变量&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 支持全局变量，并且支持&lt;code>namespace&lt;/code>级别的，支持静态变量，并且支持函数内定义静态变量&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 不支持，可以通过类型的静态变量和静态构造函数实现&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 支持，通过&lt;code>const&lt;/code>或者&lt;code>static&lt;/code>关键字。由于rust无法追踪静态变量的引用，因此使用静态变量需要在&lt;code>unsafe&lt;/code>代码块中。&lt;/li>
&lt;/ul>
&lt;p>{% tabs Global Code Example %}&lt;/p>
&lt;!-- tab Python -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># variables defined in global are global variables&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">counter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">some_func&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># global vars are available in the current module&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">some_func_mod&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">global&lt;/span> &lt;span class="n">counter&lt;/span> &lt;span class="c1"># you need `global` keyword to modify&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">counter&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Player&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">id&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">counter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="c1"># member defined in class is actually a static member&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@staticmethod&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">create_player&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">player&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Player&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">counter&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">player&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// variables defined in global are global variables
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">counter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C++ -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">counter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// this is a global variable
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">namespace&lt;/span> &lt;span class="n">sub&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">sub_counter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// this is a global variable, but here &amp;#34;global&amp;#34; is a namespace
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">counter2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// rarely used, static here means the variable is local to this compliation unit (this source file)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Player&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// static members of a class
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">counter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">Player&lt;/span> &lt;span class="nf">create_player&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">Player&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">counter&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// static variable can be inside a function
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="n">Player&lt;/span> &lt;span class="nf">create_player2&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">counter2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">Player&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">counter2&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C# -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-csharp" data-lang="csharp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// there is no global variable, you have to tie the variable to a class.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// But note that const variable can be in global scope, and you don&amp;#39;t need to declare it as static&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Utility&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">counter&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">some_constant&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">Utility&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">some_constant&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// the static constructor can be used to assign value to static readonly object&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Player&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Player&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">counter&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="n">Player&lt;/span> &lt;span class="n">create_player&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Player&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="p">++);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab Rust -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// you need static keyword to declare global/static variables
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">some_constant&lt;/span>: &lt;span class="kt">i32&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">counter&lt;/span>: &lt;span class="kt">i32&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Player&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">create_player&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">Player&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">some_constant&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// read constant static variable is safe
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">unsafe&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// read and write to mutable static variable is unsafe in rust
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Player&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;p>{% endtabs %}&lt;/p>
&lt;h3 id="异常处理">异常处理：&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>：exception, try catch finally, raise&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: assert, static_assert, throw&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: error code, assert&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: exception, try catch finally, throw&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: &lt;code>Result&lt;/code> 枚举和 &lt;code>panic!&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="空变量空类型">空变量，空类型&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: &lt;code>None&lt;/code>，是个对象，类型为&lt;code>NoneType&lt;/code>&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: &lt;code>(void*)NULL&lt;/code> 空指针，空类型&lt;code>void&lt;/code>&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: &lt;code>nullptr&lt;/code> 空指针, &lt;code>std::Optional&amp;lt;T&amp;gt;&lt;/code>，空类型&lt;code>void&lt;/code>&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: &lt;code>null&lt;/code> 本质上是空指针, &lt;code>Nullable&amp;lt;T&amp;gt;&lt;/code>, &lt;code>?&lt;/code>操作符支持，没有空类型&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 不提供空类型，&lt;code>Option&amp;lt;T&amp;gt;&lt;/code>，&lt;code>?&lt;/code>操作符支持，有个单元类型（unit type）&lt;code>()&lt;/code>可以看作空类型，用于填充类型参数，另外还有&lt;code>!&lt;/code>类型（叫“从不”类型）专门指无返回值的函数或者表达式&lt;/li>
&lt;/ul>
&lt;h3 id="别名">别名&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 类本身也是对象，可以赋值给别的变量。而&lt;code>import .. as ..&lt;/code>语法也可以实现别名&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: &lt;code>typedef&lt;/code>, &lt;code>#define&lt;/code>&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: &lt;code>typedef&lt;/code>, &lt;code>using&lt;/code>, &lt;code>#define&lt;/code>&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: &lt;code>using&lt;/code>&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: &lt;code>type .. = ..&lt;/code>, &lt;code>use ... as&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="函数声明">函数声明&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 支持默认参数，以列表、字典两种方式支持可变参数&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 支持变长参数，不支持默认参数&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 支持变长参数、变长模板参数（variadic type param)，支持默认参数&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 支持默认参数、变长参数(&lt;code>params&lt;/code>)，不支持变长形参&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 不支持默认参数和变长参数，前者一般通过&lt;code>Option&amp;lt;T&amp;gt;&lt;/code>实现，后者一般通过宏实现&lt;/li>
&lt;/ul>
&lt;h3 id="语法糖">&lt;code>?&lt;/code>语法糖&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 可以通过&lt;code>or&lt;/code>变相实现&lt;/li>
&lt;li>&lt;strong>C/C++&lt;/strong>: 无&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: &lt;code>?&lt;/code>可以用在引用类型上，或者&lt;code>Nullable&amp;lt;T&amp;gt;&lt;/code>加值类型上，还有&lt;code>??&lt;/code>操作符&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 可以用在&lt;code>Option&amp;lt;T&amp;gt;&lt;/code>和&lt;code>Result&amp;lt;T, E&amp;gt;&lt;/code>上&lt;/li>
&lt;/ul>
&lt;h3 id="unicode-字符串">Unicode 字符串&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 在Python 2里，&lt;code>bytes&lt;/code>=&lt;code>str&lt;/code>，都表示的是ANSI字符串，而Unicode字符串需要用&lt;code>unicode&lt;/code>类型，常量需要用&lt;code>u&amp;quot;文字&amp;quot;&lt;/code>。在Python 3里，&lt;code>bytes&lt;/code>可以表示ASCII字符串，而&lt;code>str&lt;/code>是支持Unicode了，&lt;code>&amp;quot;文字&amp;quot;&lt;/code>直接就是UTF8字符串。&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 甚至没有专门的字符串类型，只有&lt;code>char&lt;/code>数组&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: &lt;code>std::string&lt;/code>并没有专门支持Unicode，它可以用来存储Unicode字符串，但是没有针对性的处理工具。声明UTF8字符串需要用&lt;code>u8&amp;quot;文字&amp;quot;&lt;/code>格式的前缀。处理Unicode字符一般会选择ICU这个C++库。&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>：&lt;code>String&lt;/code>是带有编码信息的，并且&lt;code>System.Encoding&lt;/code>里面有&lt;code>String&lt;/code>和&lt;code>byte[]&lt;/code>相互转换的工具。&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 最常用的&lt;code>String&lt;/code>字符串是UTF8编码的（好像不支持UTF16？），并且支持Unicode字符的操作（如字符边界等），另外还有&lt;code>str&lt;/code>类型是个slice类型。Rust还提供了&lt;code>CString&lt;/code>来表示ANSI字符串。&lt;/li>
&lt;/ul>
&lt;h3 id="宏">宏&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 不支持&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 仅支持&lt;code>#define&lt;/code>系列和&lt;code>#if&lt;/code>系列&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 支持的非常丰富，甚至有专门的库。。。&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 仅支持&lt;code>#if&lt;/code>系列&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 有三种宏，声明宏（Declarative macro），主要是进行匹配和展开，类似于C/C++用宏来枚举类型；过程宏（Procedural macro），可以解析语法树，从struct结构生成代码；类属性宏（Attribute-like macros），可以从任意代码生成任意代码；类函数宏（Function-like macro），通常用于解析一小段token&lt;/li>
&lt;/ul>
&lt;h3 id="修饰器">修饰器&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: decorator&lt;/li>
&lt;li>&lt;strong>C/C++&lt;/strong>: 无，一小部分功能可以通过宏实现&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: Attribute&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 类属性宏&lt;/li>
&lt;/ul>
&lt;h2 id="类型系统">类型系统&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 有&lt;code>class&lt;/code>，不过类也是对象，是一个用来生成其他对象的对象。&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 只有&lt;code>struct&lt;/code>（和&lt;code>union&lt;/code>）&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 有&lt;code>struct&lt;/code>和&lt;code>class&lt;/code>，但是&lt;code>struct&lt;/code>只是一个成员默认为&lt;code>public&lt;/code>的&lt;code>class&lt;/code>，没有本质区别，是为了兼容C而存在的。&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 只有&lt;code>struct&lt;/code>（&lt;code>unsafe&lt;/code>模式下有&lt;code>union&lt;/code>）&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: &lt;code>struct&lt;/code>、&lt;code>class&lt;/code>、&lt;code>interface&lt;/code>、&lt;code>enum&lt;/code>、&lt;code>delegates&lt;/code>。其中&lt;code>struct&lt;/code>/&lt;code>enum&lt;/code>是值类型、&lt;code>class&lt;/code>/&lt;code>interface&lt;/code>/&lt;code>delegates&lt;/code>都是引用类型，在之间转换会有封箱和拆箱操作。&lt;/li>
&lt;/ul>
&lt;h3 id="定义成员函数methodmember-function">定义成员函数（method/member function）&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 在&lt;code>class&lt;/code>代码块里写，也可以动态给Python对象添加函数（过于牛逼，不过定义了&lt;code>__slot__&lt;/code>的对象除外）&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 没有成员函数一说&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 在&lt;code>class&lt;/code>代码内部写或者使用外部声明语法&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 在&lt;code>class&lt;/code>代码块内部写，但是有个&lt;code>partial&lt;/code>关键字非常给力，可以让一个类的代码块分成几个区域&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 有个&lt;code>impl&lt;/code>代码块，只有外部声明语法，并且如果是泛型的话也得标记上类型参数。在逻辑上更像是C的写法&lt;/li>
&lt;/ul>
&lt;h3 id="强弱类型">强/弱类型&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 弱类型，没有类型检查，只有Python 3.5引入的类型标注。你可以使用&lt;code>mypy&lt;/code>来实现类型标注检查，但是错误的类型并不会影响程序运行。&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 强类型，所有变量和参数均需要声明类型&lt;/li>
&lt;li>&lt;strong>C++/Rust/C#&lt;/strong>: 强类型，在这些语言中，绝大部分情况下变量和参数都拥有固定的类型，但是他们也提供不同程度的类型推断。此外他们也支持均动态类型。&lt;/li>
&lt;/ul>
&lt;h3 id="类型推断">类型推断&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 动态类型，无需推断&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: &lt;code>var&lt;/code>关键字&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: &lt;code>auto&lt;/code>关键字 (C++11)&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 无&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 默认推断，并且推荐能不写类型就不写，交给编译器，这无疑使代码更简洁了。&lt;/li>
&lt;/ul>
&lt;h3 id="动态类型">动态类型&lt;/h3>
&lt;p>动态类型一般仅在强类型中被提及，因为弱类型语言一般不进行类型检查，其指的是类型检查推迟到运行时。动态类型通常可以分为两种，一种是变体类型（Variant），指的是变量可以是几个类型中的任意一种；另一种是任意类型（Any Type），更接近动态类型的本身，指的是变量可以取任意类型。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 弱类型语言&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 支持，有&lt;code>dynamic&lt;/code>关键字可以使类型检查在运行时进行（需要C# 4），通过&lt;code>System.Dynamic.ExpandoObject&lt;/code>和&lt;code>System.Dynamic.DynamicObject&lt;/code>类型实现动态成员，并且还支持匿名类型&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 通过&lt;code>void*&lt;/code>指针可以变相实现任意类型。&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 通过&lt;code>std::variant&amp;lt;...&amp;gt;&lt;/code>和&lt;code>std::any&amp;lt;T&amp;gt;&lt;/code>可以分别实现变体类型和任意类型（均需要C++17)，也可以通过&lt;code>reintepret_cast&lt;/code>进行强制转换。&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 通过&lt;code>Enum&lt;/code>可以实现变体类型，通过trait object（&lt;code>dyn&lt;/code>关键字+&lt;code>Box&lt;/code>）可以部分实现任意类型。
&lt;blockquote>
&lt;p>这里的&lt;code>dynamic&lt;/code>其实是指的dynamic dispatch（动态分发），也就是类型参数在运行时展开。静态分发就类似于C++的模板，而动态分发就更接近C#的运行时泛型。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h3 id="反射内省">反射/内省&lt;/h3>
&lt;p>反射和内省的概念可能只有学过C#的人比较熟悉，它指的是在运行时获取类型的信息，例如所有的方法、所有的成员变量等等。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 通过&lt;code>__dict__&lt;/code>接口，以及&lt;code>hasattr&lt;/code>, &lt;code>getattr&lt;/code>, &lt;code>setattr&lt;/code>三剑客可以实现动态获取类成员。&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 不支持，唯一相关的就是&lt;code>sizeof&lt;/code>关键字，只能获取类型对象的大小。&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 除了&lt;code>sizeof&lt;/code>以外还有&lt;code>typeid&lt;/code>关键字，但是获取的&lt;code>type_info&lt;/code>对象只有名字信息，仅用于比较。&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 通过&lt;code>Object&lt;/code>这个基类所支持的&lt;code>GetType()&lt;/code>方法可以获取类型信息，返回一个&lt;code>Type&lt;/code>对象。这个对象包含了非常丰富的内容，可以获取名字、成员列表、嵌套类型信息等等&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: &lt;code>Any&lt;/code> trait有&lt;code>get_type_id&lt;/code>方法，类似于C++的&lt;code>typeid&lt;/code>，仅用于类型比较。&lt;/li>
&lt;/ul>
&lt;h2 id="面向对象">面向对象&lt;/h2>
&lt;h3 id="封装">封装&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 除C扩展之外，几乎所有对象都是公开的，无法限制访问，只有一个约定俗成的&lt;code>_&lt;/code>和&lt;code>__&lt;/code>习惯（&lt;code>_&lt;/code>开头的变量表示私有成员，形如&lt;code>__xxx__&lt;/code>的变量表示特殊成员）&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 无访问控制，但是编译之后的library一般是无法修改的，因此可以通过选择头文件的内容来阻止访问部分代码。&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: &lt;code>public&lt;/code>/&lt;code>private&lt;/code>/&lt;code>protected&lt;/code>关键字可以指定成员，或者继承的基类的可见度。另外还有&lt;code>friend&lt;/code>关键字指定特定的可见关系，C++还可以通过匿名命名空间实现模块的私有化。&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: &lt;code>public&lt;/code>/&lt;code>private&lt;/code>/&lt;code>protected&lt;/code>关键字类似于C++，但只能修饰类成员。另外还有&lt;code>internal&lt;/code>关键字可以实现仅对同一个二进制内的代码公开的能力。&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 默认模块、类型、成员均为private，有&lt;code>pub&lt;/code>关键字使得祖先可以访问。与其他语言不同的是&lt;code>pub&lt;/code>可以修饰模块，并且其公开性是仅对祖先模块的。&lt;/li>
&lt;/ul>
&lt;h3 id="继承多态">继承、多态&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 可以多继承，使用Mixin的写法是个常用的范式。&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong> 可以多继承，也有trait体系，还有&lt;code>virtual&lt;/code>和&lt;code>override&lt;/code>。菱形问题可以通过虚继承解决。&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 只能继承一个基类，可以继承多个接口。引用类型的基类都是object，而值类型是ValueType（虽然ValueType继承了object，但是编译器会有特别处理）。另外C#还有抽象类（&lt;code>abstract&lt;/code>)，&lt;code>virtual&lt;/code>, &lt;code>override&lt;/code>, &lt;code>sealed&lt;/code>。在C# 8之后支持接口的默认实现。&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 没有继承，但是可以定义和实现trait（即接口），并且接口支持默认实现。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Rust 在书17.1中认为，用继承的方式实现多态已经越来越不主流了，实际在使用时我确实也发现自己的代码里需要使用继承的方法不多，有点同意这个观点，但是我也仍能想到使用继承的场景，尤其是在面向现实问题以及GUI相关的代码中。而在数据结构中其实使用trait系统会更方便（尤其是二叉树定义其node类型的时候）。当然我猜测Rust选择不引入继承系统的原因还可能是它可能会带来的overhead（如果要允许子类实现自己的方法被父类调用，那就必然会需要虚函数，而这会引入vtable产生内存开销）。
一个比较奇怪的设计是Rust的trait支持静态函数（associated function），直觉上来说接口不应该限制静态成员的设计，毕竟接口方法都是与类型实例相关的，C#的接口中就不允许添加静态成员&lt;/p>
&lt;/blockquote>
&lt;h3 id="泛型">泛型&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 动态类型不需要泛型&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong> 有泛型，并且通过&lt;strong>where&lt;/strong>支持类型限制，编译时不展开&lt;/li>
&lt;li>&lt;strong>C&lt;/strong> 无泛型，但是可以通过指针强制转换进行类型变换以支持动态类型&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong> 有模板，在编译时会展开，并且模板的功能远超一般的泛型。模板参数支持整数&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong> 有泛型，并且通过&lt;strong>where&lt;/strong>支持类型限制，但是在编译时会展开。Rust 1.47正在测试模板参数支持整数。&lt;/li>
&lt;/ul>
&lt;h2 id="函数式编程">函数式编程&lt;/h2>
&lt;h3 id="函数对象和闭包">函数对象和闭包&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 函数也是对象，想怎么玩都可以。Python的局部函数可以当作闭包使用&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 仅支持函数指针&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 有匿名函数和lambda函数，还有&lt;code>Delegate&lt;/code>/&lt;code>event&lt;/code>，lambda函数是闭包，并且无需指定如何封装环境内变量&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 有lambda函数和std::function，lambda函数是闭包，并且可以细致地指定如何封装环境内的变量&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 有闭包，可以赋值给&lt;code>Fn&lt;/code> trait，支持局部函数但局部函数不是闭包。封装方式可以通过&lt;code>Fn&lt;/code>/&lt;code>FnMut&lt;/code>/&lt;code>FnOnce&lt;/code>或者&lt;code>move&lt;/code>关键字进行指定。普通的函数指针有&lt;code>fn&lt;/code>类型&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>匿名函数仅仅指不需要指定函数名的函数，而closure是能够使用外部scope变量的函数，一般是匿名函数，但也可以不匿名。lambda函数即匿名函数，有可能是一个闭包&lt;/p>
&lt;/blockquote>
&lt;p>{% tabs Function Code Example %}&lt;/p>
&lt;!-- tab Python -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># normal function&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">func&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">add&lt;/span> &lt;span class="c1"># function is also an object&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># closure, usually used in decorators&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">closure&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">some_value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">increase&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">some_value&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">x&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">increase&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">func&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">closure&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># lambda function (which is a closure)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">prefix&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;INFO:&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">log_handler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">lambda&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">prefix&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// normal function
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// function pointers
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">fn_ptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">fn_cptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C++ -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// normal function
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// function pointers are also supported in C++
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// note that the syntax can be much more complex in C++ than in C
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">fn_ptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">fn_cptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// std::function is a safer pointer implementation
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// (since C++11, you can use boost::function before C++11)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">func&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">add&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// lambda function (which is a closure, since C++11)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">prefix&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;INFO:&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">auto&lt;/span> &lt;span class="n">log_handler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">prefix&lt;/span>&lt;span class="p">](&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">prefix&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">func2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">log_handler&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C# -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-csharp" data-lang="csharp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// normal function&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="k">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// delegates are function pointer types in C#&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span> &lt;span class="k">delegate&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">AddFunc&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">AddFunc&lt;/span> &lt;span class="n">func&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">add&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Func&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">func2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">add&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// there are also predefined delegates&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// C# also provides Event to handle a chain of functions&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// (usually used in GUI applications)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span> &lt;span class="k">event&lt;/span> &lt;span class="n">AddFunc&lt;/span> &lt;span class="n">addEvents&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">addEvents&lt;/span> &lt;span class="p">+=&lt;/span> &lt;span class="n">func&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// lambda function in C#, note that the types of parameter and return value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// are decided by the function type signature&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">string&lt;/span> &lt;span class="n">prefix&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;INFO:&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Func&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">void&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">log_handler&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">Console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">WriteLine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">prefix&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab Rust -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// normal function
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>: &lt;span class="kt">i32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>: &lt;span class="kt">i32&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">i32&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// function pointer has type `fn`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">func&lt;/span>: &lt;span class="nc">fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">i32&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// define and return closure
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// You need to wrap closure with Box in order to return it since the size of closure is unknown for compiler
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">closure&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Box&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">dyn&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">i32&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">some_value&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">increase&lt;/span>: &lt;span class="nb">Fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">i32&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">some_value&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Box&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">increase&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">func_boxed&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">closure&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;p>{% endtabs %}&lt;/p>
&lt;h3 id="模式匹配">模式匹配&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 3.10开始引入支持&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 不支持&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 暂无语言内置支持，但是可以通过魔改模板实现，例如&lt;a class="link" href="https://github.com/solodon4/Mach7" target="_blank" rel="noopener"
>Mach7&lt;/a>&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: C# 7引入&lt;code>switch&lt;/code>支持&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 内置&lt;code>match&lt;/code>支持&lt;/li>
&lt;/ul>
&lt;h3 id="遍历器iterator">遍历器（iterator）&lt;/h3>
&lt;p>关于异步遍历参见后文&lt;a class="link" href="#%e5%bc%82%e6%ad%a5%e5%92%8c%e5%8d%8f%e7%a8%8b" >异步&lt;/a>一节&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 内置&lt;code>iter()&lt;/code>, generator类型, &lt;code>yield&lt;/code>，Python 3.6之后支持&lt;code>async&lt;/code>函数中使用&lt;code>yield&lt;/code>&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 没有语言支持，但是在STL里面定义了一套通用接口，有&lt;code>std::foreach&lt;/code>，也有&lt;code>for(type value: collection)&lt;/code>语句&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 不支持&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: &lt;code>IEnumerable&lt;/code>, &lt;code>foreach&lt;/code>, &lt;code>yield return&lt;/code>。C# 8.0之后引入&lt;code>IAsyncEnumerable&amp;lt;T&amp;gt;&lt;/code>，支持异步返回流（即在async函数中使用&lt;code>yield return&lt;/code>)。(这个功能支持的比Python晚好多= =)&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 容器类型的&lt;code>iter()&lt;/code>方法&lt;/li>
&lt;/ul>
&lt;h3 id="元组tuple">元组（tuple）&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>：内置&lt;code>tuple&lt;/code>类型，不限长度，一个重要区别是python的tuple是不可变(immutable)的, Cython的ctuple&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: &lt;code>std::tuple&lt;/code>，也不限长度，C++17支持解构语法？（structure binding）&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 内置&lt;code>tuple&lt;/code>支持，tuple类型的签名例如(u32, u32)，长度虽然不限，但是有些语法只支持最长12个对象hhhh&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 曾经对tuple的支持只有&lt;code>System.Tuple&amp;lt;T1, T2, ...&amp;gt;&lt;/code>，由于C#不支持变长类型参数，因此这个&lt;code>Tuple&lt;/code>类型变得相当冗余，而且也很麻烦。在C# 7之后引入了tuple的语法，之后使用起来就方便多了&lt;/li>
&lt;/ul>
&lt;h2 id="不安全代码c交互">不安全代码、C交互&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 由于Python的最常用解释器CPython就是基于C的，并提供了丰富且完整的C-&lt;strong>API&lt;/strong>，因此Python对与C交互的支持非常好，这也是Python被常用为胶水语言的原因。调用C-ABI可以使用内置的&lt;code>ctypes&lt;/code>库, 而如果想给C/C++代码写Python API，则可以用Cython、pybind11、boost.Python&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: C#是托管语言，可以使用&lt;code>unsafe&lt;/code>编写操作指针的代码, 利用&lt;code>DLLImport&lt;/code>（P/Invoke）可以调用C-ABI&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: C++本身是C的超集，几乎可以完美兼容C，也就是说C/C++的代码混合编译是没有问题的。另外在&lt;code>extern&lt;/code>代码块中的函数和类不会被混淆（mangle），可以生成C-ABI&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 在Rust中使用&lt;code>unsafe&lt;/code>代码块可以不进行引用检查, &lt;code>extern&lt;/code>代码块可以避免函数签名被混淆（mangle）&lt;/li>
&lt;/ul>
&lt;h2 id="并行和异步">并行和异步&lt;/h2>
&lt;p>由于Rust对变量生命周期的严格管理，在Rust中进行并行和异步会变得非常麻烦，Rust官方专门有一本&lt;a class="link" href="https://rust-lang.github.io/async-book" target="_blank" rel="noopener"
>独立的书&lt;/a>介绍相关的异步内容，在这我就不细展开Rust的用例了，仅介绍大致的用法，留个印象。&lt;del>因为我也还没学会&lt;/del>&lt;/p>
&lt;blockquote>
&lt;p>关于协程、线程、进程之间的区别可以参考&lt;a class="link" href="https://zyxin.xyz/blog/2019-11/ParallelismInPythonAndCsharp/" >我之前的这篇博客&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;h3 id="异步和协程">异步和协程&lt;/h3>
&lt;p>我对Python和C#的异步都有一定的使用经验，对C++的也略有了解，不得不说还是C#的异步语法使用起来最舒服。这也是部分得益于托管语言带来的好处，像C/C++/Rust想要实现异步就需要非常麻烦的语法和生命周期管理。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: Python 3.5引入了&lt;code>async&lt;/code>，&lt;code>await&lt;/code>关键字，并且有&lt;code>asyncio&lt;/code>库实现各个层级的异步封装（封装过多反而导致使用起来很摸不着头脑）&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 没有内置支持&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: &lt;code>&amp;lt;future&amp;gt;&lt;/code>库提供了异步的初步支持，C++20引入&lt;code>co_await&lt;/code>，终于在语言层面支持了程序流中插入异步块，不过真是太不elegant了，并且还只主要是给库的开发者用的。另外好像C++的协程默认都是单开线程的，而不像是其他语言可以进行单线程协程。&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 从C# 5.0引入了&lt;code>async&lt;/code>，&lt;code>await&lt;/code>关键字，应该是这些语言中引入最早的，也是支持最简明的，最容易上手的。C# 7.0后await的对象可以自定义类型了。&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 有&lt;code>async&lt;/code>, &lt;code>await&lt;/code>关键字支持&lt;/li>
&lt;/ul>
&lt;p>{% tabs Async Code Example %}&lt;/p>
&lt;!-- tab Python -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">asyncio&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># define and use async function&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">io_task&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;fake io processing...&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">await&lt;/span> &lt;span class="n">asyncio&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># launch the task in the current thread&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">asyncio&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_event_loop&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run_until_complete&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">io_task&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C++ -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// before C++20
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;future&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;thread&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">bool&lt;/span> &lt;span class="nf">io_task&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;fake io processing&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">this_thread&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">sleep_for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">chrono&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">seconds&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">future&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">bool&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">fut&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">async&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">io_task&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// start a thread to run the task
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">bool&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fut&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// wait for the result
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// co_await has been introduced in C++20, but it&amp;#39;s still not ready to use
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C# -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-csharp" data-lang="csharp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">using&lt;/span> &lt;span class="nn">System.Threading.Tasks&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span> &lt;span class="n">Task&lt;/span> &lt;span class="n">io_task&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// the return type for async functions is void / Task / Task&amp;lt;T&amp;gt;. For WinRT, you&amp;#39;ll need IAsyncOperation in place of Task&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">WriteLine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;fake io processing...&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">await&lt;/span> &lt;span class="n">Task&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Delay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">io_task&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">Wait&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// start the coroutine and wait for its completion, very intuitive&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">io_task_detached&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">await&lt;/span> &lt;span class="n">io_task&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">io_task_detached&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// start the coroutine and don&amp;#39;t wait for it.&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab Rust -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">std&lt;/span>::&lt;span class="n">time&lt;/span>::&lt;span class="n">Duration&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">async_std&lt;/span>::&lt;span class="n">task&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// async function has normal return types
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">io_task&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;fake io processing...&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">task&lt;/span>::&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Duration&lt;/span>::&lt;span class="n">from_secs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// async block returns a Future&amp;lt;T&amp;gt; object
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">task&lt;/span>::&lt;span class="n">block_on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">io_task&lt;/span>&lt;span class="p">()})&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;p>{% endtabs %}&lt;/p>
&lt;h3 id="线程">线程&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 虽然Python提供了&lt;code>threading&lt;/code>库，但是由于CPython全局锁的存在，实际上通常情况下同时只能执行一个线程，只有在进行IO操作的时候threading会非常游泳&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 在POSIX系统上通常使用&lt;code>pthread&lt;/code>库，而在MSVC下面则可以使用&lt;code>pthread_win32&lt;/code>或者Windows API&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: &lt;code>&amp;lt;thread&amp;gt;&lt;/code>库提供了线程的相关支持（需要C++11）&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: &lt;code>System.Threading&lt;/code>提供了线程的相关支持&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: &lt;code>std::thread&lt;/code>标准模块中提供了线程的相关支持，不过由于Rust对变量声明周期的管理，写代码时经常需要用到&lt;code>Mutex&lt;/code>和&lt;code>Arc&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="进程">进程&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 在&lt;code>os&lt;/code>和&lt;code>subprocess&lt;/code>库中提供了创建进程的函数。另外Python还在&lt;code>multiprocessing&lt;/code>库中则是提供了非常方便的MPI接口，这是Python比其他语言都好用的地方，可能也算是对全局锁的补偿把。&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 在POSIX系统上通常使用&lt;code>unistd.h&lt;/code>中的&lt;code>fork&lt;/code>，而在MSVC下可以使用Windows API&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 标准库中并没有提供支持，可以用&lt;code>boost.process&lt;/code>库来解决&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: &lt;code>System.Diagnostics&lt;/code>中的&lt;code>Process&lt;/code>类提供了相关支持&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: &lt;code>std::process&lt;/code>标准模块中提供了进程相关支持。&lt;/li>
&lt;/ul>
&lt;h2 id="包管理器">包管理器&lt;/h2>
&lt;p>为什么要专门拎出来这一点，是因为包管理是我放弃julia的最大理由。。。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: &lt;code>pip&lt;/code>挺不错，安装方便使用简单；&lt;code>conda&lt;/code>功能更强大，更方便支持带C扩展的包，但是性能差&lt;/li>
&lt;li>&lt;strong>C/C++&lt;/strong>: 一般都依赖Linux的包管理器。在Mac上有&lt;code>brew&lt;/code>，而在Windows上只到最近&lt;code>vcpkg&lt;/code>的出现才算勉强有了可用的包管理。总体而言还是没有好用的包管理器，甚至编译体系都有好几种（&lt;code>conf&lt;/code>/&lt;code>make&lt;/code>, &lt;code>autoconf&lt;/code>, &lt;code>CMake&lt;/code>, Qt的&lt;code>qmake&lt;/code>, Boost的&lt;code>b2&lt;/code>, Visual Studio的&lt;code>nmake&lt;/code>, &amp;hellip;），这也是C++挺劝退的点。&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: &lt;code>nuget&lt;/code>，算不上好用但好在有宇宙第一IDE——VS的支持。&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: &lt;code>cargo&lt;/code>，目前的体验都挺友好的~设计上比较像&lt;code>npm&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="常用数据结构">常用数据结构&lt;/h2>
&lt;p>下表总结了各个语言中常用数据结构的对应关系（非严格对应，他们的实现上或多或少有点区别）&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Python&lt;/th>
&lt;th>C++&lt;/th>
&lt;th>C#&lt;/th>
&lt;th>Rust&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>list&lt;/code>&lt;/td>
&lt;td>&lt;code>vector&lt;/code>&lt;/td>
&lt;td>&lt;code>List&lt;/code>&lt;/td>
&lt;td>&lt;code>Vec&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SortedDict&lt;/code>&lt;/td>
&lt;td>&lt;code>map&lt;/code>&lt;/td>
&lt;td>&lt;code>SortedDictionary&lt;/code>&lt;/td>
&lt;td>&lt;code>BTreeMap&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>dict&lt;/code>&lt;/td>
&lt;td>&lt;code>unordered_map&lt;/code>&lt;/td>
&lt;td>&lt;code>Dictionary&lt;/code>&lt;/td>
&lt;td>&lt;code>HashMap&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SortedSet &lt;/code>&lt;/td>
&lt;td>&lt;code>set&lt;/code>&lt;/td>
&lt;td>&lt;code>SortedSet&lt;/code>&lt;/td>
&lt;td>&lt;code>BTreeSet&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>set&lt;/code>&lt;/td>
&lt;td>&lt;code>unordered_set&lt;/code>&lt;/td>
&lt;td>&lt;code>Set&lt;/code>&lt;/td>
&lt;td>&lt;code>HashSet&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>&lt;code>function&lt;/code>&lt;/td>
&lt;td>&lt;code>Action&lt;/code>/&lt;code>Func&lt;/code>&lt;/td>
&lt;td>&lt;code>Fn&lt;/code>/&lt;code>FnMut&lt;/code>/&lt;code>FnOnce&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>&lt;code>list&lt;/code>&lt;/td>
&lt;td>&lt;code>LinkedList&lt;/code>&lt;/td>
&lt;td>&lt;code>LinkedList&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>deque&lt;/code>&lt;/td>
&lt;td>&lt;code>deque&lt;/code>&lt;/td>
&lt;td>&lt;code>Queue&lt;/code>&lt;/td>
&lt;td>&lt;code>VecDeque&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>heapify&lt;/code>&lt;/td>
&lt;td>&lt;code>make_heap&lt;/code>&lt;/td>
&lt;td>&lt;code>PriorityQueue&lt;/code>&lt;/td>
&lt;td>&lt;code>BinaryHeap&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>&lt;code>unique_ptr&lt;/code>&lt;/td>
&lt;td>-&lt;/td>
&lt;td>&lt;code>Box&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>&lt;code>smart_ptr&lt;/code>&lt;/td>
&lt;td>-&lt;/td>
&lt;td>&lt;code>Rc&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>另外，C++ &lt;code>std::const_cast&lt;/code> 可以在 Rust 中用&lt;code>Cell&amp;lt;T&amp;gt;&lt;/code>和&lt;code>RefCell&amp;lt;T&amp;gt;&lt;/code>起到类似效果(对应引用类型和指针类型？)&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="rust特有的特性">Rust特有的特性&lt;/h2>
&lt;p>在别的语言里面没有的概念，以及Rust独特的语法特性如下&lt;/p>
&lt;ul>
&lt;li>引用检查（Borrow checker）&lt;/li>
&lt;li>生命周期（Lifetime）声明&lt;/li>
&lt;li>&lt;code>{}&lt;/code>代码块和&lt;code>if&lt;/code>、&lt;code>else&lt;/code>、&lt;code>break&lt;/code>也都是表达式，而非语句&lt;/li>
&lt;li>功能强大的宏系统&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>总而言之，语法设计上最优雅的我觉得还是C#和Python，功能和性能最强大的还是C++，最简单和底层的还是C，但是Rust至少有望替代C，这也是我为什么学习这些语言的原因。Rust有一些语法，虽然套用了同一个格式，但是却有很多是编译器特殊支持的（最常见的就是跟Trait相关的，如&lt;code>Box&lt;/code>），这就使得Rust有时候很不优雅，关于这一点可以看&lt;a class="link" href="https://tuna.moe/event/2021/rust/" target="_blank" rel="noopener"
>TUNA的讲座&lt;/a>。&lt;/p>
&lt;p>本文仅为我读完Rust官方入门教材之后的总结，之后有实战经验了我可能会再写一些心得吧~&lt;/p>
&lt;blockquote>
&lt;p>另外在总结本文的时候还发现了一个&lt;a class="link" href="https://ttu.github.io/kotlin-is-like-csharp/" target="_blank" rel="noopener"
>对比Kotlin和C#的网页&lt;/a>，挺有意思的，贴在这供参考&lt;/p>
&lt;/blockquote></description></item><item><title>一句话选择现代编程语言</title><link>https://zyxin.xyz/blog/2021-08/OneLinePerProgrammingLanguage/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2021-08/OneLinePerProgrammingLanguage/</guid><description>&lt;p>最近几年一直有新的编程语言变火，也不断的有新概念的出现。我一直有打算了解各种新的编程语言，并且如果有前景的话多学一门语言也是挺好的。因此本文总结我在了解一些流行的现代语言的过程中，记下来他们的各种特点。如果你也有兴趣尝试新的语言，那么希望这个文章可以帮到你~&lt;/p>
&lt;p>关于语言的流行度可以参考&lt;a class="link" href="https://www.tiobe.com/tiobe-index/" target="_blank" rel="noopener"
>TIOBE排名&lt;/a>、&lt;a class="link" href="https://madnight.github.io/githut" target="_blank" rel="noopener"
>Github排名&lt;/a>和&lt;a class="link" href="https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-languages-loved" target="_blank" rel="noopener"
>Stack Overflow排名&lt;/a>。本文也不会详细介绍每个语言的特性，因为每种语言都用非常多的特性，而且很多也都还在不断开发中。正因如此，本文的评价也仅限用与写下本博客的时候。&lt;/p>
&lt;p>本文主要关注通用程序语言，对于一些领域专用语言（Domain-Specific Language）如SQL就不比较了，因为他们是你需要的时候你就会用，你不需要的话也不需要学。&lt;/p>
&lt;p>关于编程语言的演变，下面是一个很精炼的图（&lt;a class="link" href="https://infographicnow.com/educational/languages/educational-infographic-timeline-of-programming-languages-infographic/" target="_blank" rel="noopener"
>来源点我&lt;/a>），如果想要更完整的演变关系的话可以参考维基的程序语言编年表（&lt;a class="link" href="https://en.wikipedia.org/wiki/History_of_programming_languages" target="_blank" rel="noopener"
>按年代&lt;/a>和&lt;a class="link" href="https://en.wikipedia.org/wiki/Timeline_of_programming_languages" target="_blank" rel="noopener"
>按年份&lt;/a>，推荐后面那个！），或者&lt;a class="link" href="https://www.levenez.com/lang/" target="_blank" rel="noopener"
>参考这个网站&lt;/a>。&lt;/p>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2021-08/OneLinePerProgrammingLanguage/timeline-of-programming-languages.jpg"
width="600"
height="1621"
loading="lazy"
alt="编程语言时间图"
class="gallery-image"
data-flex-grow="37"
data-flex-basis="88px"
>&lt;/p>
&lt;h2 id="现代编程语言的特性">现代编程语言的特性&lt;/h2>
&lt;p>在介绍语言之前，首先还是要介绍以下各种编程语言的概念，不然会埋没很多语言的优秀属性。语言详细特性的比较可以参考&lt;a class="link" href="https://en.wikipedia.org/wiki/Comparison_of_programming_languages#:~:text=General%20comparison%20%20%20%20Language%20%20,%20%20%20%2020%20more%20rows%20" target="_blank" rel="noopener"
>维基百科的比较&lt;/a>，这里的介绍也都是粗略的简介，如果你有兴趣的话可以搜一下这些关键词了解了解~&lt;/p>
&lt;ul>
&lt;li>&lt;strong>面向对象(Object-Oriented)&lt;/strong>：如果有学过程序设计课程的话应该对这个是有了解的。面向对象主要指的是程序是围绕“类”(Class)来编写的。类包含了某一种对象的定义和方法，并且在此之上定义了继承关系，以便于简化代码。&lt;/li>
&lt;li>&lt;strong>动态/静态类型(Dynamic/Static Type)&lt;/strong>：静态类型指的是编程语言中所有变量都必须明确指定的类型，而动态类型语言则不需要指定变量类型。这两个特点是在灵活性和程序安全性之间做的权衡。这两个特性也被称为&lt;strong>强/弱类型&lt;/strong>。在弱类型语言中，有**鸭子类型(Duck-typing)**的概念，也就是我们不关心变量具体是什么类型，只要它提供了指定的接口就可以了。&lt;/li>
&lt;li>&lt;strong>元编程(Meta-Programming)/泛型(Generic Type)&lt;/strong>：元编程指的是可以通过代码生成代码，最典型的例子就是C++的模板。而泛型在用法上很像元编程，但是它并不会显式地生成代码，而是可以看作支持带有“类型参数”的代码。&lt;/li>
&lt;li>&lt;strong>命令式(Imperative)/声明式(Declarative)/函数式(Functional)&lt;/strong>：命令式语言中，你需要一步步指定程序做什么；声明式语言中，你告诉语言你想要达到什么目的；函数式语言中，函数是一等公民，函数本身定义了你想达到什么目标，而程序通过不停地调用函数来实现，并且函数通常可以被存在变量里。&lt;/li>
&lt;li>&lt;strong>并行(Parallelism)&lt;/strong>：并行指的是程序支持多个代码块同时执行。具体的并行三种方法可以参考我之前的博客&lt;a class="link" href="https://zyxin.xyz/blog/2019-11/ParallelismInPythonAndCsharp/" >《进程、线程与协程》&lt;/a>&lt;/li>
&lt;li>&lt;strong>数据科学&lt;/strong>：一些语言是针对数据科学设计的，他们主要的特点是有对高精度数值类型和多维张量的内置支持。&lt;/li>
&lt;li>&lt;strong>测试驱动(Test-driven Development)/契约式(Design by Contract)&lt;/strong>：这两个概念其实是不同的编程逻辑，测试驱动指的是程序最终的目的是通过一定的测试，而契约式编程则是指编写时，程序本身需要满足一定的条件关系。对测试和契约的支持虽然不是必须的，但是在现代大型程序中却是能大大提高程序编写效率和安全性的。&lt;/li>
&lt;li>&lt;strong>虚拟机/中间语言(Intermediate Language)&lt;/strong>：不少语言都通过虚拟机来完成跨平台的实现，编程语言的虚拟机会将语言特定的中间码翻译成机器码。其代表有JVM、CLR、LLVM。&lt;/li>
&lt;li>&lt;strong>垃圾回收(Garbage Collection, GC)&lt;/strong>：垃圾回收是不少语言运行时内置的功能，在有这个功能的语言中你不用操心变量的生命周期，因为对象的销毁由垃圾回收器帮你实现了。&lt;/li>
&lt;/ul>
&lt;hr/>
&lt;blockquote>
&lt;p>下面开始介绍我对各个主流现代编程语言的一句话评价，这些语言主要选择自上文提到的排行榜。知乎&lt;a class="link" href="https://zhuanlan.zhihu.com/p/42534137" target="_blank" rel="noopener"
>有个类似的贴子&lt;/a>，但是主要都是段子。&lt;/p>
&lt;/blockquote>
&lt;h2 id="一n句话描述为什么选择这门语言">一(N)句话描述为什么选择这门语言&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>C&lt;/strong>: YYDS，是这里面最接近汇编的语言，性能好且依赖少，C语言的ABI能够被绝大多数语言调用。&lt;/li>
&lt;li>&lt;strong>CoffeeScript&lt;/strong>: 加糖版Javascript&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 最强大的语言之一，完整的面向对象和元编程支持，兼容C&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 语法糖超级多，最近微软拥抱开源使得编程资源也变多，比Java快&lt;/li>
&lt;li>&lt;strong>D&lt;/strong>: 目标是替代C++，有很多现代语言特性的支持，如契约编程&lt;/li>
&lt;li>&lt;strong>Dart&lt;/strong>: 谷歌背书的取代的Javascript的语言，但是也就仅此而已了&lt;/li>
&lt;li>&lt;strong>Elixir&lt;/strong>: 基于ErlangVM的函数式语言，设计上借鉴Ruby&lt;/li>
&lt;li>&lt;strong>Erlang&lt;/strong>: 有个软实时，可预期的GC，高容错，有精心设计的并行接口（Green threads）&lt;/li>
&lt;li>&lt;strong>F#&lt;/strong>: C#的函数式版本&lt;/li>
&lt;li>&lt;strong>Fortran&lt;/strong>: 古老的语言，但运行非常快，甚至快过C&lt;/li>
&lt;li>&lt;strong>Go&lt;/strong>: 编译巨快，独立无依赖的可执行文件，内置有完整的协程支持&lt;/li>
&lt;li>&lt;strong>Groovy&lt;/strong>: Apache开发的动态类型版Java，对标Ruby&lt;/li>
&lt;li>&lt;strong>Hack&lt;/strong>: 由Facebook支持的PHP方言&lt;/li>
&lt;li>&lt;strong>Haskell&lt;/strong>: 函数式语言代表作，有很多语法概念都是从Haskell走出来的&lt;/li>
&lt;li>&lt;strong>Java&lt;/strong>: 在服务器后端应用特别广的语言，有垃圾收集，包特别多&lt;/li>
&lt;li>&lt;strong>Javascript&lt;/strong>: 前后端都非常流行的语言，语言灵活，被浏览器支持，也有非常多的包&lt;/li>
&lt;li>&lt;strong>Julia&lt;/strong>: 面向科学计算的语言，运行速度快，内置支持多维张量，有望替代Fortran&lt;/li>
&lt;li>&lt;strong>Kotlin&lt;/strong>: JetBrains开发的加语法糖的Java，而且都是很现代的语法糖，可以编译为Java或者Js&lt;/li>
&lt;li>&lt;strong>Matlab&lt;/strong>: 针对工程师和科学家的语言，工具包非常全，Simulink暂无敌手&lt;/li>
&lt;li>&lt;strong>Objective-C&lt;/strong>: 有啥优点吗？&lt;/li>
&lt;li>&lt;strong>Perl&lt;/strong>: 适合用作脚本语言或者胶水语言，字符串处理方便&lt;/li>
&lt;li>&lt;strong>PHP&lt;/strong>: 可以嵌入HTML，灵活，语法简单，针对服务器端&lt;/li>
&lt;li>&lt;strong>Python&lt;/strong>: 非常灵活，所有东西都是对象（包括类、函数），可读性强，与C/C++兼容好，包非常丰富&lt;/li>
&lt;li>&lt;strong>R&lt;/strong>: 针对统计科学家的语言，包也很全&lt;/li>
&lt;li>&lt;strong>Ruby&lt;/strong>: 链式调用、语法糖、跟Python一样的灵活性&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 语法保证的内存安全、无垃圾回收、也就意味着运行很快&lt;/li>
&lt;li>&lt;strong>Scala&lt;/strong>: 相比于Kotlin，像是JVM上的C++，而Kotlin像是JVM上的C#&lt;/li>
&lt;li>&lt;strong>Swift&lt;/strong>: 苹果开发来用以替代Obj-C的语言，定位上类似Java&lt;/li>
&lt;li>&lt;strong>Typescript&lt;/strong>: 强类型版的Javascript&lt;/li>
&lt;li>&lt;strong>Vala&lt;/strong>: 目标是替代C/C++在Linux的GUI编程中的地位，可以编译成C代码，因此性能不错&lt;/li>
&lt;li>&lt;strong>Visual Basic&lt;/strong>: 微软曾经在很多软件中都内置支持&lt;/li>
&lt;/ul>
&lt;h2 id="一n句话描述为什么劝退这门语言">一(N)句话描述为什么劝退这门语言&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>C&lt;/strong>: 功能过于简陋，需要用结构体和指针实现面向对象，不安全&lt;/li>
&lt;li>&lt;strong>CoffeeScript&lt;/strong>: 感觉没有核心竞争力，更多的人会用Typescript&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 模板编译难以纠错，编译也很慢，语法糖靠各种模板和标准库实现，不优雅，&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: .NetStandard标准混乱，API经常变且不向后兼容&lt;/li>
&lt;li>&lt;strong>D&lt;/strong>: 没有好爹，没有生态，混乱的GC&lt;/li>
&lt;li>&lt;strong>Dart&lt;/strong>: 感觉不如选择Typescript&lt;/li>
&lt;li>&lt;strong>Elixir&lt;/strong>: 除了基于ErlangVM以外没有突出的特性&lt;/li>
&lt;li>&lt;strong>Erlang&lt;/strong>: 灵活性不够，没有好爹&lt;/li>
&lt;li>&lt;strong>F#&lt;/strong>: 没人用哈哈哈哈，要么都去用C#了&lt;/li>
&lt;li>&lt;strong>Fortran&lt;/strong>: 老式语法，没有什么现代语言特性&lt;/li>
&lt;li>&lt;strong>Go&lt;/strong>: 功能少，没有泛型、不许有未使用的变量和模块、强制&lt;code>{&lt;/code>不换行&lt;/li>
&lt;li>&lt;strong>Groovy&lt;/strong>: 如果不限于JVM平台的话有更好的选择&lt;/li>
&lt;li>&lt;strong>Hack&lt;/strong>: 本来PHP就要没人用了哈哈哈&lt;/li>
&lt;li>&lt;strong>Haskell&lt;/strong>: 学它像是搞工程的人去学理论数学，包也不多&lt;/li>
&lt;li>&lt;strong>Java&lt;/strong>: 语法繁琐落后，不如C#写着优美，也不如C#性能好&lt;/li>
&lt;li>&lt;strong>Javascript&lt;/strong>: 单线程，语言过于不严格，参见下面著名的三位一体图
&lt;img src="https://zyxin.xyz/blog/blog/2021-08/OneLinePerProgrammingLanguage/js-triangle.jpg"
width="700"
height="336"
loading="lazy"
alt="Javascript等号三位一体"
class="gallery-image"
data-flex-grow="208"
data-flex-basis="500px"
>&lt;/li>
&lt;li>&lt;strong>Julia&lt;/strong>: 超级难用的包管理器，语法也很蛋疼，且暂不适合做通用开发&lt;/li>
&lt;li>&lt;strong>Kotlin&lt;/strong>: 编译慢，此外没有特别大的缺点，不过如果不限于JVM平台的话有很多其他的选择&lt;/li>
&lt;li>&lt;strong>Matlab&lt;/strong>: 语言本身是Mathworks的专利，并且使用一定要装Matlab软件，大部分功能都可以用Python和Julia实现了&lt;/li>
&lt;li>&lt;strong>Objective-C&lt;/strong>: 只有苹果开发曾经在用，可读性差&lt;/li>
&lt;li>&lt;strong>Perl&lt;/strong>: 晦涩难懂，过于灵活，性能也不行，感觉不如用Python&lt;/li>
&lt;li>&lt;strong>PHP&lt;/strong>: 单线程，仅适用于Web开发，通用性和社区活跃程度不如JS&lt;/li>
&lt;li>&lt;strong>Python&lt;/strong>: 性能差，单线程（GIL）&lt;/li>
&lt;li>&lt;strong>R&lt;/strong>: 比Matlab语法还蛋疼&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 编译器太严格、字符串操作很蛋疼&lt;/li>
&lt;li>&lt;strong>Ruby&lt;/strong>: 目前主要是后端工程师使用，性能差&lt;/li>
&lt;li>&lt;strong>Scala&lt;/strong>: 比Kotlin难上手，与Java互操作性也较差&lt;/li>
&lt;li>&lt;strong>Swift&lt;/strong>: 如果不是开发iOS和OSX没必要用&lt;/li>
&lt;li>&lt;strong>Typescript&lt;/strong>: 如果不是Web开发没必要用&lt;/li>
&lt;li>&lt;strong>Vala&lt;/strong>: 主要用户是Gnome和ElementaryOS，生态还不是很完善&lt;/li>
&lt;li>&lt;strong>Visual Basic&lt;/strong>: 如果没有历史包袱就不要用了&lt;/li>
&lt;/ul>
&lt;!-- TODO:
[Crystal](https://crystal-lang.org/),
[Reason](https://reasonml.github.io/),
[Ballerina](https://ballerina.io/),
[Nim](https://nim-lang.org/),
[Zig](https://ziglang.org/),
[Red](https://www.red-lang.org/),
[Pony](https://www.ponylang.io/),
[V](https://vlang.io/) -->
&lt;!-- TODO: Update English version -->
&lt;!-- TODO: Add links to official language website, highlight new languages -->
&lt;blockquote>
&lt;h2 id="拓展阅读">拓展阅读&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.zhihu.com/question/38032439/answer/84176970" target="_blank" rel="noopener"
>为啥Erlang没有像Go、Scala语言那样崛起&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>终端的特殊控制符</title><link>https://zyxin.xyz/blog/2020-05/TerminalControlCharacters/</link><pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2020-05/TerminalControlCharacters/</guid><description>&lt;p>之前碰到过很多终端工具可以显示非常好看的进度条，或者显示丰富的颜色，甚至还有的直接可以在终端通过字符绘制UI（a.k.a. &lt;a class="link" href="https://en.wikipedia.org/wiki/Text-based_user_interface" target="_blank" rel="noopener"
>TUI&lt;/a>），我一直都很好奇是怎么做到的。之后又知道了curses这个Python库和它的一些高层封装（例如asciimatics），然后最终在Stack Overflow里面查到了这些都是通过特殊的终端控制符来实现的。本文就介绍这些终端控制符的使用方法，他们很适合用来写一个简单无依赖的TUI。如果需要更复杂和全面的TUI功能，还是最好使用封装好的库。&lt;/p>
&lt;h2 id="ascii-控制符">ASCII 控制符&lt;/h2>
&lt;p>在最开始接触编程的时候，如果你学的是C，那你一定很熟悉&lt;code>\n&lt;/code>，这就是一个”换行“的转义字符，代表终端光标令起一行。有时你还会碰到&lt;code>\r&lt;/code>，这是”回车“。“回车”这个名字来源于打字机时代，在使用打字机的时候，如果你需要新起一行，那么需要的操作是：转动滚筒把纸往外抽一行，再把字车（相当与打印机的打印头）移到最左端。这两个操作的名字分别是“换行”和“回车”。因此严格来说另起一行的字符串应该是&lt;code>\r\n&lt;/code>，这也是Windows的标准，而在Unix中则简化成&lt;code>\n&lt;/code>会自动执行回车。&lt;/p>
&lt;p>换行和回车是两个非常常用的控制字符，也是定义在了ASCII表中的控制字符。在ASCII表中还定义了其他的控制字符，列在下面了。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>ASCII名字&lt;/th>
&lt;th>ASCII码&lt;/th>
&lt;th>printf风格转义&lt;/th>
&lt;th>用途&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>BEL 铃声&lt;/td>
&lt;td>0x07&lt;/td>
&lt;td>&lt;code>\a&lt;/code>&lt;/td>
&lt;td>哔一下（执不执行取决于终端）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>BS 退格&lt;/td>
&lt;td>0x08&lt;/td>
&lt;td>&lt;code>\b&lt;/code>&lt;/td>
&lt;td>*光标回退一格&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ESC 退出&lt;/td>
&lt;td>0x1B&lt;/td>
&lt;td>&lt;code>\e&lt;/code>&lt;/td>
&lt;td>可代表按下ESC键，不是C标准&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>FF 换页&lt;/td>
&lt;td>0x0C&lt;/td>
&lt;td>&lt;code>\f&lt;/code>&lt;/td>
&lt;td>光标移到新一页&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>LF 换行&lt;/td>
&lt;td>0x0A&lt;/td>
&lt;td>&lt;code>\n&lt;/code>&lt;/td>
&lt;td>光标下移一行&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CR 回车&lt;/td>
&lt;td>0x0D&lt;/td>
&lt;td>&lt;code>\r&lt;/code>&lt;/td>
&lt;td>光标回到行首&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>HT 水平制表&lt;/td>
&lt;td>0x09&lt;/td>
&lt;td>&lt;code>\t&lt;/code>&lt;/td>
&lt;td>标记水平制表位（Tab键）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>VT 垂直制表&lt;/td>
&lt;td>0x0B&lt;/td>
&lt;td>&lt;code>\v&lt;/code>&lt;/td>
&lt;td>标记垂直制表位&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>NUL 空值&lt;/td>
&lt;td>0x00&lt;/td>
&lt;td>&lt;code>\0&lt;/code>&lt;/td>
&lt;td>代表啥也没有，C里面终结字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>**&lt;code>\c&lt;/code>&lt;/td>
&lt;td>终止输出，基本不被支持了&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>*光标这里泛指各类终端的指示当前文本位置的东西，在打字机上叫“type guide”，在显示屏上里面叫“光标 cursor”，而在有些场合也叫指针。
**这个用法貌似只在一些终端中有，我也不确定它是否有对应一个字符。在&lt;a class="link" href="http://www.gnu.org/software/coreutils/manual/html_node/printf-invocation.html" target="_blank" rel="noopener"
>GNU的文档&lt;/a>里有简短解释。&lt;/p>
&lt;h2 id="ansivt100-控制符串">ANSI/VT100 控制符（串）&lt;/h2>
&lt;p>很多终端都支持彩色文字的输出，而彩色文字的表达方式通常都参考ANSI的色彩标准。而ANSI用来实现色彩显示的转义表还定义了指针控制和设备管理的功能。&lt;/p>
&lt;p>这一类控制符实际上是个字符串，所以应该叫控制串？他们都由&lt;code>&amp;lt;ESC&amp;gt;&lt;/code>字符开头，也就是&lt;code>0x1B&lt;/code>。所以我推测实际上&lt;code>ESC&lt;/code>的双关（退出/转义）也被用到了这里哈哈。以下内容大部分来自 ANSI/VT100 Terminal Control Escape Sequences 表格，详细解释可以参考这个表格以及维基的页面。链接都放在引用部分。&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>0x1B&lt;/code>在一些终端中会用&lt;code>^[&lt;/code>代表，因此如果你看到了&lt;code>^[[&lt;/code>那通常也都是通过这种方法转义的字符序列。&lt;/p>
&lt;/blockquote>
&lt;p>我把这个表中能用于bash的字符都拎出来放在下面了。以下表中的转义序列名称都是我自己翻译的，我不知道有没有统一的中文翻译hhh。&lt;/p>
&lt;h3 id="终端设备相关">终端设备相关&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>名称&lt;/th>
&lt;th>转义字符串&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>查询设备码&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[c&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>报告设备码&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[{code}0c&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>查询光标位置&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[6n&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>报告光标位置&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[{ROW};{COLUMN}R&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>重置设备&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;c&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>可以在你的终端里输入&lt;code>printf &amp;quot;\x1b[c&amp;quot;&lt;/code>，看看会输出什么&lt;/p>
&lt;/blockquote>
&lt;h3 id="光标控制">光标控制&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>名称&lt;/th>
&lt;th>转义字符串&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>设置指针位置&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[{ROW};{COLUMN}H&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>指针上移&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[{COUNT}A&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>指针下移&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[{COUNT}B&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>指针前移（右移）&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[{COUNT}C&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>指针后移（左移）&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[{COUNT}D&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>保存指针位置&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[s&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>复原指针位置（到保存位置）&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[u&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>保存指针位置和属性&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;7&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>复原指针位置和属性&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;8&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="滚动">滚动&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>名称&lt;/th>
&lt;th>转义字符串&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>启用滚动&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[r&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>启用指定行之间滚动&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[{START};{END}r&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>向下滚动一行&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;D&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>向上滚动一行&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;M&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="制表">制表&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>名称&lt;/th>
&lt;th>转义字符串&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>设置对齐位&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;H&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>清楚对齐位&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[g&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>清楚所有对齐位&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[3g&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="清除">清除&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>名称&lt;/th>
&lt;th>转义字符串&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>清除文字到行末&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[K&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>清除文字到行首&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[1K&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>清除整行&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[2K&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>清除文字到屏幕底&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[J&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>清除文字到屏幕顶&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[1J&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>清屏&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[2J&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="定义">定义&lt;/h3>
&lt;ul>
&lt;li>设置文字绑定: &lt;code>&amp;lt;ESC&amp;gt;[{key};&amp;quot;{string}&amp;quot;p&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="显示颜色属性">显示颜色属性&lt;/h3>
&lt;ul>
&lt;li>设置光标属性: &lt;code>&amp;lt;ESC&amp;gt;[{attr1};...;{attrn}m&lt;/code>&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>属性代码&lt;/th>
&lt;th>属性效果&lt;/th>
&lt;th>属性代码&lt;/th>
&lt;th>属性效果&lt;/th>
&lt;th>属性代码&lt;/th>
&lt;th>属性效果&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0&lt;/td>
&lt;td>重置&lt;/td>
&lt;td>30&lt;/td>
&lt;td>前景黑&lt;/td>
&lt;td>40&lt;/td>
&lt;td>背景黑&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>亮&lt;/td>
&lt;td>31&lt;/td>
&lt;td>前景红&lt;/td>
&lt;td>41&lt;/td>
&lt;td>背景红&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>暗&lt;/td>
&lt;td>32&lt;/td>
&lt;td>前景绿&lt;/td>
&lt;td>42&lt;/td>
&lt;td>背景绿&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>下划线&lt;/td>
&lt;td>33&lt;/td>
&lt;td>前景黄&lt;/td>
&lt;td>43&lt;/td>
&lt;td>背景黄&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5&lt;/td>
&lt;td>闪烁&lt;/td>
&lt;td>34&lt;/td>
&lt;td>前景蓝&lt;/td>
&lt;td>44&lt;/td>
&lt;td>背景蓝&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>7&lt;/td>
&lt;td>反向&lt;/td>
&lt;td>35&lt;/td>
&lt;td>前景紫&lt;/td>
&lt;td>45&lt;/td>
&lt;td>背景紫&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>8&lt;/td>
&lt;td>隐藏&lt;/td>
&lt;td>36&lt;/td>
&lt;td>前景青&lt;/td>
&lt;td>46&lt;/td>
&lt;td>背景青&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>37&lt;/td>
&lt;td>前景白&lt;/td>
&lt;td>47&lt;/td>
&lt;td>背景白&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;p>ASCII转义符&lt;/p>
&lt;ul>
&lt;li>Wiki &lt;a class="link" href="https://en.wikipedia.org/wiki/Escape_sequences_in_C" target="_blank" rel="noopener"
>Escape sequences in C&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.bing.com/search?q=ascii&amp;#43;table" target="_blank" rel="noopener"
>Bing ASCII table&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://linux.die.net/man/1/printf" target="_blank" rel="noopener"
>&lt;code>printf&lt;/code> Linux man page&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ANSI转移符&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="http://www.termsys.demon.co.uk/vtansi.htm" target="_blank" rel="noopener"
>&lt;code>ANSI/VT100 Terminal Control Escape Sequences&lt;/code>&lt;/a>&lt;/li>
&lt;li>Wiki &lt;a class="link" href="https://en.wikipedia.org/wiki/ANSI_escape_code" target="_blank" rel="noopener"
>&lt;code>ANSI escape code&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;!-- http://ascii-table.com/ansi-escape-sequences-vt-100.php
http://www.termsys.demon.co.uk/vtansi.htm --></description></item><item><title>进程、线程与协程 (C# vs Python)</title><link>https://zyxin.xyz/blog/2019-11/ParallelismInPythonAndCsharp/</link><pubDate>Thu, 07 Nov 2019 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2019-11/ParallelismInPythonAndCsharp/</guid><description>&lt;p>近来由于项目需要，接触了一下一直没去了解过的Python异步语法，发现和之前我熟悉的C#有很多不同。在深入Python的异步逻辑之后，由于Python在语法上保留了很多语言机制的细节（比如成员函数的&lt;code>self&lt;/code>参数），我反而对C#的异步有了更深的了解。这里就来重新梳理一下各种并行方法的区别，以及他们在C#和Python上实现的区别。（这里只讨论单机的并行机制。）&lt;/p>
&lt;p>总的来说，并行机制主要有进程(Process)、线程(Thread)和协程(Coroutine)，其并行实现的开销依次递减，但是他们对每个任务的鲁棒性也是依次递减的。进程是操作系统资源分配的最小单元，线程则是能够被CPU并行处理的最小单元，而协程则是目前实现“并行”的最简单方法。一个进程中可以有多个线程，而一个线程中可以有多个协程。他们具体在特性上有以下区别&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>进程&lt;/th>
&lt;th>线程&lt;/th>
&lt;th>协程&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>独立内存堆&lt;/td>
&lt;td>√&lt;/td>
&lt;td>×&lt;/td>
&lt;td>×&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>独立处理器（可硬件并行）&lt;/td>
&lt;td>√&lt;/td>
&lt;td>√&lt;/td>
&lt;td>×&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>独立上下文&lt;/td>
&lt;td>√&lt;/td>
&lt;td>√&lt;/td>
&lt;td>×&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>独立栈、寄存器状态&lt;/td>
&lt;td>√&lt;/td>
&lt;td>√&lt;/td>
&lt;td>√&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="进程">进程&lt;/h2>
&lt;p>进程是系统层面实现并行的机制了，进程管理是现代操作系统的一大核心之一。进程之间互不影响，操作系统会保证一个程序崩溃了，其他程序以及系统内核不会崩溃。操作系统还会提供其他的进程管理功能，例如&lt;a class="link" href="https://en.wikipedia.org/wiki/Scheduling_%28computing%29" target="_blank" rel="noopener"
>进程调度&lt;/a>、设置进程优先级等等。不同语言底层对进程接口的实现实际上都是对系统接口的封装。&lt;/p>
&lt;h3 id="一些概念">一些概念&lt;/h3>
&lt;p>与进程相关的概念通常都是操作系统课程的必修知识哈哈：&lt;/p>
&lt;ul>
&lt;li>进程间通信(Inter-process communiation, IPC)：故名思意。常用手段有管道、共享内存、信号量(Semaphore)、消息队列等。&lt;/li>
&lt;li>管道(Pipe)：管道大概是进程间通信的最常用方式？分命名管道和匿名管道, 进程双方均可往其中读写数据。&lt;/li>
&lt;li>远程过程调用(Remote procedure call): 远程过程调用通过特定的消息序列化手段，可以实现进程间通信，其使用形式是把一个“远程”的函数在本地进行执行。&lt;/li>
&lt;li>进程锁：如果为了避免多个进程访问同一个资源的冲突的话，就会用到进程锁，其实现方法有&lt;a class="link" href="https://blog.csdn.net/luansxx/article/details/7736618" target="_blank" rel="noopener"
>管道、信号量&lt;/a>、以及文件锁等。&lt;/li>
&lt;li>文件锁：文件锁是实现进程互斥的一种常用手段，只需要建立空文件句柄并锁上就可了~并且文件锁还能做到权限控制，非常方便~&lt;/li>
&lt;/ul>
&lt;h3 id="c35">C#&lt;/h3>
&lt;p>C#中对进程控制的模块主要通过&lt;a class="link" href="https://docs.microsoft.com/dotnet/api/system.diagnostics.process" target="_blank" rel="noopener"
>&lt;code>System.Diagnostics.Process&lt;/code>&lt;/a>实现，可以实现建立进程、管理进程等，还可以指定具体的内存映射参数，如虚拟内存的页大小。而对管道的支持则是在&lt;code>Process&lt;/code>类中有一部分，以及在&lt;a class="link" href="https://docs.microsoft.com/en-us/dotnet/api/system.io.pipes" target="_blank" rel="noopener"
>&lt;code>System.IO.Pipe&lt;/code>&lt;/a>里面有更全面的接口。我觉得这样的命名空间分类是挺合理的，&lt;code>Process&lt;/code>类的API其实只能用来进行程序调用和系统诊断，而&lt;code>Pipe&lt;/code>则由于它和&lt;code>Stream&lt;/code>的概念比较符合，因此归在IO空间下是合适的。&lt;/p>
&lt;h3 id="python">Python&lt;/h3>
&lt;p>Python中对进程的控制以及通信方法的实现都在&lt;code>multiprocess&lt;/code>包里，它的一些具体使用方法可以参考&lt;a class="link" href="https://zyxin.xyz/blog/2017-12/PythonCall/" >另一篇之前的博文&lt;/a>。值得一提的是，Python中还针对Unix系统提供了&lt;code>fcntl&lt;/code>, &lt;code>posix&lt;/code>等库专门用来调用系统底层API，这些API有部分是和进程有关的。相关内容还是查阅对应的资料会比较清楚~&lt;/p>
&lt;h2 id="线程">线程&lt;/h2>
&lt;p>线程是进程中细化的并行机制，线程的实现也需要用到操作系统的接口，不过线程的创建的管理基本都是在进程内部完成的。由于线程之间不独立内存空间，因此在C++这种能够随意操作内存的语言中，一个线程崩了，这个进程也大概率就崩了。但是在C#和Python中，由于有比较完善的Exception机制，并且没有什么机会直接操作内存，一般线程崩了主进程还是能接着跑的。多线程想必应该是大家用的最多的并行方法了~&lt;/p>
&lt;h3 id="一些概念-1">一些概念&lt;/h3>
&lt;p>在线程里面又有一些新的概念&lt;/p>
&lt;ul>
&lt;li>线程池(Thread pool)：线程池与内存池相似，都是为了避免频繁新建和销毁线程(or 内存)而造成额外的开销&lt;/li>
&lt;li>线程锁：线程锁与进程锁相似，是为了避免线程间访问同样的资源而产生冲突（例如&lt;a class="link" href="https://stackoverflow.com/questions/34510/what-is-a-race-condition" target="_blank" rel="noopener"
>race condition&lt;/a>）。线程间产生访问冲突非常常见，因此程序员掌握线程锁的使用是非常必要的。线程锁在C++中的&lt;code>&amp;lt;mutex&amp;gt;&lt;/code>有非常全面的实现。这里面锁的类型具有代表性，分为条件锁、自旋锁等等，具体区别可以参考&lt;a class="link" href="https://blog.csdn.net/bian_qing_quan11/article/details/73734157" target="_blank" rel="noopener"
>这篇博客&lt;/a>。C++的多线程非常令人头大&amp;hellip;这里就不展开了。&lt;/li>
&lt;li>事件(Event)：在多线程体系中，事件是一种常用于线程同步的机制，如果线程需要在运行过程中等待其他线程的运行，就可以使用事件机制。&lt;/li>
&lt;/ul>
&lt;h3 id="c35-1">C#&lt;/h3>
&lt;p>C#中与线程相关的模块在&lt;a class="link" href="https://docs.microsoft.com/dotnet/api/system.threading" target="_blank" rel="noopener"
>&lt;code>System.Threading&lt;/code>&lt;/a>空间下。&lt;code>System.Threading.Thread&lt;/code>提供了线程实现的类，使用delegate即可创建线程对象。这个空间底下也提供了&lt;code>SpinLock&lt;/code>、&lt;code>Semaphore&lt;/code>、&lt;code>Mutex&lt;/code>等线程锁，以及&lt;code>AutoResetEvent&lt;/code>实现了事件机制。&lt;code>System.Threading.ThreadPool&lt;/code>则提供了线程池的实现。另外需要指出的是C#提供了&lt;code>lock&lt;/code>关键字，只需对冲突的对象使用&lt;code>lock&lt;/code>锁上，那么在其对应的上下文中就能够避免冲突。&lt;/p>
&lt;h3 id="python-1">Python&lt;/h3>
&lt;p>Python中与线程相关的对象在&lt;a class="link" href="https://docs.python.org/library/threading.html" target="_blank" rel="noopener"
>&lt;code>threading&lt;/code>&lt;/a>模块中，其中&lt;code>Thread&lt;/code>类提供了线程实现，&lt;code>Lock&lt;/code>, &lt;code>Semaphore&lt;/code>提供了线程锁，&lt;code>Event&lt;/code>实现了事件机制。Python中可以使用&lt;code>with lock:&lt;/code>这样的块实现与C#&lt;code>lock&lt;/code>相似的语法，但是这个地方的lock仍然需要自己声明，不如C#和Java中的&lt;code>lock&lt;/code>用着方便。&lt;/p>
&lt;p>总体而言C#和Python对多线程机制的支持都比较全面，然而CPython有一个臭名昭著的&lt;a class="link" href="http://cenalulu.github.io/python/gil-in-python/" target="_blank" rel="noopener"
>全局锁GIL&lt;/a>，使得其多线程效率大幅下降。因此在很多Python库中，大家宁愿使用&lt;code>multiprocess&lt;/code>多进程来进行并行（即便需要处理进程间通信的问题），也不愿使用&lt;code>threading&lt;/code>来完成并行任务。这一点上不得不说Python辣鸡！&lt;/p>
&lt;h2 id="协程">协程&lt;/h2>
&lt;p>协程应该是21世纪才用的比较多的技术了，并且这个概念应该是在Go里面提的最多。在前文我提到协程是并行时打了引号，这是因为协程本质上还是同一个时刻只能干一件事，没法利用硬件并行，因此我们形容协程都是用“异步”(Asychronized)而不是“并行”(Parallel)。异步是与同步相对的，只要程序能一会干点这个，一会干点那个，不按顺序来，那就可以称作异步了。协程的广泛应用是由于近些年大型服务器的负载越来越大，并发需求越来越高（&lt;del>同时剁手的人越来越多&lt;/del>），多任务切换的开销越来越不可忽视，因此协程这个开销最小的方法就被广泛应用了。协程实际上不是一个比线程更小的概念，而是另一类概念（并行/串行 vs 异步/同步)。协程的特点是一个任务能够跑到一半就暂停，然后把状态存起来，等到需要的东西备齐了以后再把状态复原接着跑；至于暂停之前和之后是不是在同一个线程上跑、有没有跟别的任务一块跑并不重要。因此实际上协程是回调(Callback)机制的一个封装升级。&lt;/p>
&lt;p>实际上不依赖于系统线程的并行技术不止协程一种：
&lt;blockquote>
&lt;p>&lt;p>A &lt;a class="link" href="http://en.wikipedia.org/wiki/Fiber_%28computer_science%29" target="_blank" rel="noopener"
>Fiber&lt;/a> is a lightweight thread that uses cooperative multitasking instead of preemptive multitasking. A running fiber must explicitly &amp;ldquo;yield&amp;rdquo; to allow another fiber to run, which makes their implementation much easier than kernel or user threads.&lt;/p>
&lt;p>A &lt;a class="link" href="http://en.wikipedia.org/wiki/Coroutine" target="_blank" rel="noopener"
>Coroutine&lt;/a> is a component that generalizes a subroutine to allow multiple entry points for suspending and resuming execution at certain locations. Unlike subroutines, coroutines can exit by calling other coroutines, which may later return to the point where they were invoked in the original coroutine.&lt;/p>
&lt;p>A &lt;a class="link" href="http://en.wikipedia.org/wiki/Green_threads" target="_blank" rel="noopener"
>Green Thread&lt;/a> is a thread that is scheduled by a virtual machine (VM) instead of natively by the underlying operating system. Green threads emulate multithreaded environments without relying on any native OS capabilities, and they are managed in user space instead of kernel space, enabling them to work in environments that do not have native thread support.&lt;/p>
&lt;/p>&lt;span class="cite">&lt;span>― &lt;/span>&lt;span>Robert Harvey, &lt;/span>&lt;a href="https://softwareengineering.stackexchange.com/a/254141">&lt;cite>@StackExchange&lt;/cite>&lt;/a>&lt;/span>&lt;/blockquote>&lt;/p>
&lt;h3 id="一些概念-2">一些概念&lt;/h3>
&lt;ul>
&lt;li>事件循环(Event loop)：事件循环是一种非常简单的实现异步的机制，简而言之就是维护一个队列，然后把队列里的任务挨个执行，而任务随时随地可以被添加进队列。&lt;/li>
&lt;li>异步执行/等待(async/await)：这两个关键词在多个语言中都有出现。async用来修饰函数，说明这个函数可以异步执行；await用来等待异步函数的结束，如果没有结束就把当前任务搁着。&lt;/li>
&lt;/ul>
&lt;h3 id="c35-2">C#&lt;/h3>
&lt;p>C#中没有协程的概念，C#在5.0版本中引入的&lt;code>async&lt;/code>/&lt;code>await&lt;/code>关键字提供了异步执行的接口。据我所知C#应该是最早一批引入这个概念的语言了，并且C#里面async和await的使用非常顺滑~。C#的async/await调度与Go一样，都是通过线程池实现，因此性能也非常不错。C#中与async/await有关的接口在&lt;a class="link" href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks%60" target="_blank" rel="noopener"
>&lt;code>System.Threading.Tasks&lt;/code>&lt;/a>下，里面的&lt;code>Task&lt;/code>类型是对能够await的对象的封装。&lt;/p>
&lt;p>C#中也有用到Event loop来实现异步的地方，一般是在UI相关的函数中，例如整个C#里面的&lt;code>event&lt;/code>机制都是通过事件循环来实现的。使用事件循环来完成与UI相关的异步应该是非常标准的做法了，例如Qt里面也有&lt;code>QEventLoop&lt;/code>来实现UI的异步回调。与Event loop相关的是Dispatcher机制，Dispatcher可以将指定任务加进事件循环中执行，例如在WPF中可以用Window的Dispatcher在其他线程中将任务加进UI主线程。&lt;/p>
&lt;p>另外需要指出的是C#还可以通过&lt;code>yield&lt;/code>关键词实现异步，&lt;code>yield return&lt;/code>可能是C#最早的异步机制了，不过功能有限，只能与&lt;code>IEnumerable&lt;/code>合作使用。C#中有一些协程的库（如Unity里的）就是使用&lt;code>yield&lt;/code>机制来实现的。具体怎么使用&lt;code>yield&lt;/code>还请去学习C#的语法~&lt;/p>
&lt;h3 id="python-2">Python&lt;/h3>
&lt;p>Python对异步的支持就来的比较晚了，直到&lt;a class="link" href="https://www.python.org/dev/peps/pep-0492/" target="_blank" rel="noopener"
>PEP 492&lt;/a>才正式加入了对&lt;code>async&lt;/code>关键字的支持，放在了&lt;code>asyncio&lt;/code>模块中。Python对这对关键词的实现又很辣鸡了，&lt;a class="link" href="https://robertoprevato.github.io/Comparisons-of-async-await/" target="_blank" rel="noopener"
>采用的是Event loop机制来实现&lt;/a>（可能是因为多线程性能太差了吧= =）。最让人蛋疼是为了执行异步函数你还需要自己开event loop，如果你之前开过一个了，那你还需要把之前那个loop找回来，然后dispatch进去，这是何其难受！。。&lt;/p>
&lt;p>Python中只要对象有&lt;code>__await__&lt;/code>、&lt;code>__aiter__&lt;/code>或者&lt;code>__aenter__&lt;/code>就可以分别支持&lt;code>await&lt;/code>、&lt;code>async for&lt;/code>和&lt;code>async with&lt;/code>的代码块。Python还设计了三个相关概念：Coroutine代表异步对象、Task代表异步执行计划、Future代表异步执行结果。。何必呢？？？像C#用一个Task代表全部不行吗？再配合event loop的接口，就产生了&lt;code>create_task&lt;/code>、&lt;code>run_coroutine_threadsafe&lt;/code>、&lt;code>run_until_complete&lt;/code>、&lt;code>run_in_executor&lt;/code>等我总是搞不清区别的函数。。。我爱C#！&lt;/p>
&lt;hr>
&lt;p>以上是我对C#和Python中异步机制的总结，我对各语言底层的了解并不深，如有错漏还请指点~&lt;/p></description></item><item><title>Cython中的特殊函数</title><link>https://zyxin.xyz/blog/2019-08/CythonFunctions/</link><pubDate>Wed, 28 Aug 2019 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2019-08/CythonFunctions/</guid><description>&lt;p>这次来介绍一下Cython中的特殊函数定义，Cython相比Python本身的特殊函数之外还增加了一些新的函数，用来满足对C特性的支持，其中有些内容还经常令人混淆。关于Python中特殊变量和特殊函数名的内容，&lt;a class="link" href="https://docs.python.org/3/reference/datamodel.html" target="_blank" rel="noopener"
>请参考Python官方文档&lt;/a>。&lt;/p>
&lt;h2 id="def-cdef和cpdef">&lt;code>def&lt;/code>, &lt;code>cdef&lt;/code>和&lt;code>cpdef&lt;/code>&lt;/h2>
&lt;p>首先最开始需要分清的便是Cython中的三种函数类型。&lt;code>def&lt;/code>定义的对象（包括变量、函数、类型）都是普通的Python对象，是Python可以直接调用的，因此其参数都只能是Python类型或对象；&lt;code>cdef&lt;/code>定义的对象则是C/C++层面的，可以直接用C/C++对象作为参数，因此不能被普通Python代码调用，这样减少了很多overhead因此可以提高运行效率。另外尽管&lt;code>cdef&lt;/code>的函数不是Python对象，无法当作变量使用，但还是可以获取函数指针的。而&lt;code>cpdef&lt;/code>则是同时兼具两方面特性，其本质是用&lt;code>cdef&lt;/code>定义函数后再用&lt;code>def&lt;/code>定义一个函数封装，使得在Cython中调用时可以调用高效的&lt;code>cdef&lt;/code>版本，而在Python中调用的是与Python兼容的&lt;code>def&lt;/code>版本。&lt;/p>
&lt;h2 id="__init__和__cinit__">&lt;code>__init__&lt;/code>和&lt;code>__cinit__&lt;/code>&lt;/h2>
&lt;p>在理清了上面几个关键字后另一个经常令人疑惑的点便是&lt;code>__init__&lt;/code>和&lt;code>__cinit__&lt;/code>的区别。&lt;code>__cinit__&lt;/code>和&lt;code>__dealloc__&lt;/code>都是Cython特有的特殊函数。&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/userguide/special_methods.html#initialisation-methods-cinit-and-init" target="_blank" rel="noopener"
>官方文档在其用法上解释&lt;/a>的并不清楚，只是说&lt;code>__cinit__&lt;/code>可以用来进行C/C++级别的初始化。实际上，使用&lt;code>__cinit__&lt;/code>的重要原因是源于其特性：&lt;code>__cinit__&lt;/code>会像C++一样自动执行基类的&lt;code>__cinit__&lt;/code>，因此它保证会在构造时被执行一次（且只被执行一次）。由于Python中的&lt;code>__init__&lt;/code>函数默认不会调用基类的&lt;code>__init__&lt;/code>，因此如果想保证类型中的&lt;code>cdef&lt;/code>成员被初始化，避免可能的堆栈问题（如指针没有初始化），那么就可以选择使用&lt;code>__cinit__&lt;/code>。如果理解了这一点就可以知道，什么时候需要使用&lt;code>__cinit__&lt;/code>了。&lt;/p>
&lt;p>但是使用&lt;code>__cinit__&lt;/code>的时候有很多限制需要了解：&lt;/p>
&lt;ol>
&lt;li>&lt;code>__cinit__&lt;/code>有时会带来额外的开销，&lt;a class="link" href="https://kaushikghose.wordpress.com/2015/03/08/cython-__cinit__/" target="_blank" rel="noopener"
>这篇博客中有一些分析&lt;/a>。&lt;/li>
&lt;li>&lt;code>__cinit__&lt;/code>的参数声明和&lt;code>__init__&lt;/code>必须一致，因为会同时被调用。因此通常&lt;code>__cinit__&lt;/code>的参数中会留下&lt;code>*kargs&lt;/code>和&lt;code>**kvargs&lt;/code>。&lt;a class="link" href="https://stackoverflow.com/a/33091422" target="_blank" rel="noopener"
>Stackoverflow上也有人问过这个情况&lt;/a>。&lt;/li>
&lt;li>&lt;code>__cinit__&lt;/code>中如果要用&lt;code>malloc&lt;/code>分配内存，记得在&lt;code>__dealloc__&lt;/code>中销毁。&lt;code>__dealloc__&lt;/code>相当于C++版本的&lt;code>__del__&lt;/code>&lt;/li>
&lt;li>&lt;code>__cinit__&lt;/code>和&lt;code>__init__&lt;/code>一样也只能使用&lt;code>def&lt;/code>声明，不能用&lt;code>__cdef__&lt;/code>和&lt;code>__cpdef__&lt;/code>。具体原因我并不清楚。&lt;/li>
&lt;/ol>
&lt;h2 id="运算符重载">运算符重载&lt;/h2>
&lt;p>其他大多数的特殊函数定义和用法几乎和Python相同，但是需要特别指出的是运算符重载的部分。以加法为例，在Python中加法&lt;code>a + b&lt;/code>的实现方式是：&lt;/p>
&lt;ol>
&lt;li>如果&lt;code>a&lt;/code>中定义了&lt;code>__add__&lt;/code>，那么调用&lt;code>a.__add__(b)&lt;/code>&lt;/li>
&lt;li>如果&lt;code>a&lt;/code>中没有定义，而&lt;code>b&lt;/code>中定义了&lt;code>__radd__&lt;/code>，那么调用&lt;code>b.__radd(a)&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>而在Python的C扩展类里（包含Cython和pybind11的实现），其实现方式是寻找接受&lt;code>a&lt;/code>和&lt;code>b&lt;/code>类型的&lt;code>__add__&lt;/code>重载，也就是说本质上在C扩展类中定义的&lt;code>__add__&lt;/code>都是&lt;code>__add__&lt;/code>的重载，这也是与C++的&lt;code>operator&lt;/code>重载理念一致，只不过这个&lt;code>__add__&lt;/code>仍然需要定义在类里。在&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/userguide/special_methods.html#arithmetic-operators" target="_blank" rel="noopener"
>Cython文档中给出的运算符列表&lt;/a>里，参数里带&lt;code>self&lt;/code>的函数都是按照Python中的方法实现的，&lt;code>self&lt;/code>不能指定类型；而以&lt;code>x, y&lt;/code>这种形式为参数的则是按照C扩展类执行方式的函数，&lt;code>x&lt;/code>和&lt;code>y&lt;/code>都可以指定类型。&lt;/p>
&lt;p>另外Cython还定义了一个特殊的运算符函数&lt;code>__richcmp__&lt;/code>，这个是Python中没有的，不过其功能只是把比较符号（&amp;gt;,&amp;lt;,=）的实现合并了，与Python的&lt;code>__eq__&lt;/code>、&lt;code>__lt__&lt;/code>等函数没有本质区别。&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/userguide/special_methods.html#rich-comparison-operators" target="_blank" rel="noopener"
>这在官方文档中也有说明&lt;/a>&lt;/p>
&lt;h2 id="__getbuffer__">&lt;code>__getbuffer__&lt;/code>&lt;/h2>
&lt;p>&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/userguide/special_methods.html#buffer-interface-pep-3118-no-python-equivalents-see-note-1" target="_blank" rel="noopener"
>Cython中有两个版本的Buffer协议&lt;/a>，一种是提案PEP-3118定义的，另一种是Python官方定义之前Cython自己的定义方式。其中前者在&lt;a class="link" href="https://zyxin.xyz/blog/2019-08/CythonInterop/" >之前介绍Cython封装的文章&lt;/a>中已有介绍，就不多赘述。其相关的特殊函数是&lt;code>__getbuffer__&lt;/code>和&lt;code>__releasebuffer__&lt;/code>，这两个函数也都是Cython特有的。而后者比较难用，已经被标记为depricated废弃了，也不介绍了。&lt;/p>
&lt;h2 id="属性property">属性（property）&lt;/h2>
&lt;p>Cython中还提供了一套非常方便的属性定义方法。原本在Python中定义属性非常但疼，例如下面的代码定义了名为&lt;code>length&lt;/code>的属性，使得你可以通过&lt;code>square.length&lt;/code>的方法访问它&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Square&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@property&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">length&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_length&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@length.setter&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">length&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_length&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@length.deleter&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">length&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_length&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>而在Cython中定义属性就更简单了，它除了支持上面的方法外还有另一种更加直观的定义方式（虽然这个方式也已经被标记为depricated了）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Square&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">property&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__get__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_length&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__set__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_length&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__del__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_length&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;p>Cython的类型还有各种其他的奇奇怪怪的小特性，在Cython的这两篇文档里有详细介绍：&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/userguide/extension_types.html" target="_blank" rel="noopener"
>Extension Types&lt;/a>, &lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/userguide/special_methods.html#buffer-interface-pep-3118-no-python-equivalents-see-note-1" target="_blank" rel="noopener"
>Special Methods of Extension Types&lt;/a>，仅供参考～&lt;/p></description></item><item><title>在Cython中操作数组</title><link>https://zyxin.xyz/blog/2019-08/CythonArray/</link><pubDate>Wed, 28 Aug 2019 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2019-08/CythonArray/</guid><description>&lt;p>Cython提供了很多方法来搭建C/C++内存和Python对象间的桥梁，但是官方的教程只介绍了一些基础的方法。这篇文章就介绍一下我在各个场合学到和用到的Cython封装（多维）数组的技巧。一般而言这个桥梁会分为两部分，Python与Cython和Cython与C/C++。其中Python中的数组主要形式是&lt;code>list&lt;/code>、&lt;code>array.array&lt;/code>和&lt;code>numpy.ndarray&lt;/code>；Cython中的数组形式有&lt;code>[:,:,:]&lt;/code>（&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/userguide/memoryviews.html?highlight=pointer#view-cython-arrays" target="_blank" rel="noopener"
>Memoryview&lt;/a>/&lt;a class="link" href="https://www.python.org/dev/peps/pep-3118/" target="_blank" rel="noopener"
>Buffer&lt;/a>）和&lt;code>cython.view.array&lt;/code>；C/C++的数组形式有&lt;code>**&lt;/code>（指针）、&lt;code>vector&lt;/code>和&lt;code>Eigen::Vector/Matrix&lt;/code>。&lt;/p>
&lt;blockquote>
&lt;p>本篇介绍的主要内容也来自于Cython的文档：&lt;a class="link" href="http://cython.readthedocs.io/en/latest/src/userguide/memoryviews.html" target="_blank" rel="noopener"
>Typed Memoryviews&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;p>在这里也先介绍一下Cython中的这几个概念：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Memoryview&lt;/strong>：这是cython提供的一种语法糖，相当于提供了C中&lt;code>int[][][]&lt;/code>形式数组的类型。由于Memoryview可以兼容Python的Buffer协议，因此我把他们放在了一起。Memoryview需要指定元素的类型，这个类型必须是内置数值类型或者&lt;strong>C结构体&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>&lt;code>cython.view.array&lt;/code>&lt;/strong>：这是Cython提供的一个多维数组类型，与&lt;code>numpy.ndarray&lt;/code>非常相似了。
这两个东西也是可以相互转换的，例如&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">cython.view&lt;/span> &lt;span class="n">cimport&lt;/span> &lt;span class="n">array&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">cvarray&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Cython array to Memoryview&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cyarr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cvarray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">itemsize&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">format&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;i&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="nb">int&lt;/span> &lt;span class="p">[:,&lt;/span> &lt;span class="p">:,&lt;/span> &lt;span class="p">:]&lt;/span> &lt;span class="n">cyarr_view&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cyarr&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Memoryview to Cython array&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">cvarray&lt;/span> &lt;span class="n">back&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cyarr_view&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="python与cython数组相互转换">Python与Cython数组相互转换&lt;/h2>
&lt;p>Python与Cython之间的转换基本上都由Cython的Memoryview提供了接口，实际上直接赋值就可以。例如官方给出的这段例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">cpython&lt;/span> &lt;span class="n">cimport&lt;/span> &lt;span class="n">array&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">cparray&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">np&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Memoryview on a NumPy array&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">narr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">arange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">27&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dtype&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;i&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">reshape&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="nb">int&lt;/span> &lt;span class="p">[:,&lt;/span> &lt;span class="p">:,&lt;/span> &lt;span class="p">:]&lt;/span> &lt;span class="n">narr_view&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">narr&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Memoryview on a CPython array&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">parr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cparray&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;i&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="nb">int&lt;/span> &lt;span class="p">[:]&lt;/span> &lt;span class="n">parr_view&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parr&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>顺带一提，&lt;code>list&lt;/code>对象由于本身不代表一段连续内存，因此需要先转换为&lt;code>array&lt;/code>或&lt;code>ndarray&lt;/code>再赋值给Memoryview。反过来由于Numpy支持Buffer协议，因此Memoryview和Cython的&lt;code>cython.view.array&lt;/code>都可以直接转换为&lt;code>numpy.ndarray&lt;/code>，然后转换为&lt;code>array&lt;/code>和&lt;code>list&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">cpython&lt;/span> &lt;span class="n">cimport&lt;/span> &lt;span class="n">array&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">cparray&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">np&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">parr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cparray&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;i&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="nb">int&lt;/span> &lt;span class="p">[:]&lt;/span> &lt;span class="n">parr_view&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parr&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">narr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parr_view&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># explicit version: np.array(parr_view, copy=False)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>以上这些代码中的等式都没有发生内存拷贝。&lt;/p>
&lt;/blockquote>
&lt;h2 id="cython数组与cc数组相互转换">Cython数组与C/C++数组相互转换&lt;/h2>
&lt;p>Cython的Memoryview同样承担了大量与C/C++数组进行转换的功能，不过Memoryview只支持一种转换方法，就是与raw指针的相互转换：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">libc.stdlib&lt;/span> &lt;span class="n">cimport&lt;/span> &lt;span class="n">malloc&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">double&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">double&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">double&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Convert pointer to Memoryview&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">double&lt;/span>&lt;span class="p">[:]&lt;/span> &lt;span class="n">view&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">double&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,:&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">data&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Convert Memoryview to pointer&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">view&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>以上代码的等式中也没有发生内存拷贝。&lt;/p>
&lt;/blockquote>
&lt;p>这里需要指出的是，由于指针本身只是一段内存的代表，因此在转换时制定类型和长度（如&lt;code>&amp;lt;double[4]&amp;gt;&lt;/code>），并且需要保证指针指向的数组是C型连续的（多维数组中最后一维的内存是连续的）。如果要将&lt;code>vector&lt;/code>和&lt;code>Eigen::Matrix&lt;/code>转换为Memoryview，那么也同样需要获取其内存指针（&lt;code>vector::data&lt;/code>和&lt;code>Eigen::Matrix::data&lt;/code>）。另外，通过&lt;strong>指针转换出来的Memoryview没有引用计数&lt;/strong>，因此如果你的指针是某个Cython类的成员，那么不要使用指针转换，而使用Buffer协议的方式进行传递。&lt;/p>
&lt;h2 id="其他直接转换的方法">其他直接转换的方法&lt;/h2>
&lt;p>除了上面提到的方法之外还有一些直接转换的方法，但是这些方法往往不会做类型和尺寸检查，以及很重要的内存连续性检查（Memoryview会区分C型内存和Fortran型内存），因此使用时需要谨慎。&lt;/p>
&lt;ul>
&lt;li>&lt;code>cdef vector[int] data; cdef list view = data&lt;/code>：Cython提供了list和vector直接转换的接口&lt;/li>
&lt;li>&lt;code>cdef np.ndarray[double] data; cdef double* view = &amp;lt;double*&amp;gt; data.data&lt;/code>&lt;/li>
&lt;li>&lt;code>cdef np.ndarray[double, ndim=2] data; cdef double* view = &amp;amp;data[0,0]&lt;/code>&lt;/li>
&lt;li>&lt;code>cdef array.array data; cdef double* view = data.data.as_doubles[0]&lt;/code>：利用了&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/tutorial/array.html#zero-overhead-unsafe-access-to-raw-c-pointer" target="_blank" rel="noopener"
>Cython中的API&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="非内置类型的转换">非内置类型的转换&lt;/h2>
&lt;p>在实际应用过程中还会碰到由复杂元素构成的数组（例如PCL里面的PointXYZ、SLAM里会用到的Quaternion），这时就有将复杂类型（通常是自定义struct）在Python和C/C++之间转换的需求。这时可以选择利用Cython提供的MemoryView，也可以利用Python的Buffer协议直接将C++对象传递给Python。&lt;/p>
&lt;p>使用Buffer协议的方法请直接参考&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/userguide/buffer.html" target="_blank" rel="noopener"
>Cython文档&lt;/a>，使用Memoryview的例子如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">libc.stdlib&lt;/span> &lt;span class="n">cimport&lt;/span> &lt;span class="n">malloc&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">np&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">struct&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">int&lt;/span> &lt;span class="n">size&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">int&lt;/span> &lt;span class="n">count&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">[:]&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">buf&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buf&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># [(&amp;#39;size&amp;#39;, &amp;#39;&amp;lt;i4&amp;#39;), (&amp;#39;count&amp;#39;, &amp;#39;&amp;lt;i4&amp;#39;)]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Cython与C/C++的交互</title><link>https://zyxin.xyz/blog/2019-08/CythonInterop/</link><pubDate>Tue, 27 Aug 2019 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2019-08/CythonInterop/</guid><description>&lt;p>用Cython也用了很有一段时间了，这次就介绍一下它的最重要功能——使用Cython来封装C/C++代码。最基本的封装方法可以参见Cython文档中的相关页面：&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/userguide/external_C_code.html" target="_blank" rel="noopener"
>Interfacing with External C Code&lt;/a>和&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/userguide/wrapping_CPlusPlus.html" target="_blank" rel="noopener"
>Using C++ in Cython&lt;/a>，本文介绍主要是比较重要和常用的Cython/C++交互特性，而自定义Python拓展类（而不是封装现有C++）的一些操作可以&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/tutorial/cdef_classes.html" target="_blank" rel="noopener"
>参考官方教程&lt;/a>。&lt;/p>
&lt;p>封装C++代码时，最重要的关键词就是&lt;code>extern&lt;/code>，在定义函数时使用这个关键字就说明该声明是外部的，而使用&lt;code>cdef extern from&lt;/code>语句就能指定声明对应的头文件。例如如果要封装函数&lt;code>func&lt;/code>，对应的Cython语句是&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">extern&lt;/span> &lt;span class="kn">from&lt;/span> &lt;span class="s2">&amp;#34;func.c&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">void&lt;/span> &lt;span class="n">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span> &lt;span class="n">arg&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="文件结构">文件结构&lt;/h2>
&lt;p>首先讲一下Cython的文件结构。如果你之有一个小模块需要封装的话你可以把所有代码写到同一个&lt;code>pyx&lt;/code>里进行编译，否则的话你就可以利用Cython的目录结构来管理多个层次的代码。Cython的文件一共有三种：&lt;code>pyx&lt;/code>，&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/userguide/language_basics.html#the-include-statement-and-include-files" target="_blank" rel="noopener"
>&lt;code>pxi&lt;/code>&lt;/a>（&lt;a class="link" href="https://stackoverflow.com/a/45440199" target="_blank" rel="noopener"
>注意与&lt;code>pyi&lt;/code>区分&lt;/a>）和&lt;code>pxd&lt;/code>（&lt;a class="link" href="https://stackabuse.com/differences-between-pyc-pyd-and-pyo-python-files/" target="_blank" rel="noopener"
>注意与&lt;code>pyd&lt;/code>区分&lt;/a>）。&lt;/p>
&lt;p>&lt;code>.pyx&lt;/code>是Cython的源文件，类似于&lt;code>.cpp&lt;/code>文件在C++中的地位，而对应&lt;code>.h&lt;/code>头文件地位的则是&lt;code>pyi&lt;/code>。在Cython中添加&lt;code>import 'header.pyi'&lt;/code>的语句就会将&lt;code>header.pyi&lt;/code>文件中的内容原封不动地直接插入当前位置，这与C++的&lt;code>#include&lt;/code>语句的作用是相同的。而&lt;code>pxd&lt;/code>则是另一套符号化的逻辑，&lt;code>.pxd&lt;/code>文件中只能声明函数、声明类型、不能有函数和类型的定义内容（除了&lt;code>inline&lt;/code>函数外），而在&lt;code>cimport&lt;/code>了&lt;code>pxd&lt;/code>的定义之后当前代码便引入了对应的函数或者类型签名。这个工作方式则更符合C++中头文件的实际用途。定义了&lt;code>pxd&lt;/code>后就可以在多个Cython文件之间共享同一个类型了。&lt;/p>
&lt;p>不过既然涉及了&lt;code>include&lt;/code>语法，就必然要指定类似于C++的引用路径了。&lt;code>pxi&lt;/code>和&lt;code>pxd&lt;/code>文件的引用路径可以&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/userguide/sharing_declarations.html#search-paths-for-definition-files" target="_blank" rel="noopener"
>在cythonize过程中手动指定&lt;/a>，而&lt;code>pxd&lt;/code>由于是符号化的还可以通过新建&lt;code>__init__.pxd&lt;/code>的方式来实现类似于Python的引用方法。只要在Cython搜索目录下的文件夹中包含&lt;code>__init__.pxd&lt;/code>文件，Cython就会认为这是一个Cython库，之后就可以用&lt;code>cimport&lt;/code>语句通过与Python中&lt;code>import&lt;/code>相类似的语法将对应模块文件（&lt;code>.pxd&lt;/code>文件）引用进来。当然，&lt;code>pxd&lt;/code>文件&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/userguide/source_files_and_compilation.html#compiling-with-the-cythonize-command" target="_blank" rel="noopener"
>也可以通过命令参数直接导入&lt;/a>。关于如何组织这些文件以及头文件之间的关系，读者可以参考&lt;a class="link" href="https://github.com/cmpute/pcl.py" target="_blank" rel="noopener"
>我写的PCL封装库&lt;/a>和&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/userguide/sharing_declarations.html" target="_blank" rel="noopener"
>Cython的相关文档&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>函数在pxd中的定义不能显式指定默认参数，而是必须用&lt;code>*&lt;/code>代替，例如&lt;code>cdef void func(a=0)&lt;/code>在&lt;code>pxd&lt;/code>中声明的话需要改为&lt;code>cdef void func(a=*)&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;h2 id="类型封装">类型封装&lt;/h2>
&lt;p>Cython对C++的类型提供了基本可用的封装语法。为什么说基本可用，是因为Cython目前对模板的支持还非常有限，因此实际上可以说Cython只支持到C++98的程度。不过尽管如此，Cython已经能够完成大多数代码的封装需求了。Cython对&lt;code>class&lt;/code>的支持通过&lt;code>cdef cppclass &amp;lt;class-name&amp;gt;&lt;/code>来实现，这里&lt;code>cppclass&lt;/code>关键词是为了和Cython的&lt;code>class&lt;/code>关键词进行区分。Cython中&lt;code>class&lt;/code>关键词代表的是和Python一致的&lt;code>PyObject&lt;/code>对象，代表的是Python类型，而&lt;code>cppclass&lt;/code>则指代C++原生类型，由于Cython文件中无法直接编写C++代码，因此&lt;code>cdef cppclass&lt;/code>语句通常在&lt;code>cdef extern from&lt;/code>的语法块中，用来封装现有的C++类型。另外一点需要注意的地方是Cython&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/userguide/language_basics.html#c-variable-and-type-definitions" target="_blank" rel="noopener"
>提供封装&lt;code>enum&lt;/code>和&lt;code>struct&lt;/code>的语法&lt;/a>，但是针对的是C中的&lt;code>enum&lt;/code>和&lt;code>struct&lt;/code>，而非C++中的&lt;code>enum class&lt;/code>和&lt;code>struct&lt;/code>（C++中&lt;code>struct&lt;/code>和&lt;code>class&lt;/code>几乎没有区别）。如果要封装C++版本的&lt;code>enum&lt;/code>和&lt;code>struct&lt;/code>可以直接使用&lt;code>cppclass&lt;/code>关键词。以下是封装C++类型的一个例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">extern&lt;/span> &lt;span class="kn">from&lt;/span> &lt;span class="s2">&amp;#34;test.h&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cdef&lt;/span> &lt;span class="n">cppclass&lt;/span> &lt;span class="n">Test&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">void&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="别名与-namespace-关键字">别名与 namespace 关键字&lt;/h3>
&lt;p>由于Cython最后生成的是全局的C代码，因此在引用C++类时需要明确声明类型含命名空间的全称，这里就需要用到别名的机制。Cython允许从&lt;code>.h&lt;/code>文件中导入声明的时候给类型和方法改名字，具体用法如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">extern&lt;/span> &lt;span class="kn">from&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;header-name&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cdef&lt;/span> &lt;span class="n">void&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">new&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;origin-function-name&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cdef&lt;/span> &lt;span class="n">cppclass&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">new&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">class&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;origin-class-name&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>简而言之就是在方法或者类型名称后添加引号，引号里写上原本C++中的名字。这个机制有很多tricky的用法，它可以用来声明带命名空间的方法和类型、可以用来&lt;a class="link" href="https://stackoverflow.com/a/25955546" target="_blank" rel="noopener"
>重命名C++中的运算符&lt;/a>、可以用来直接声明实例化的模板类型、甚至可以用来把C++常量声明成类型用于模板参数（这种操作可以&lt;a class="link" href="https://github.com/wouterboomsma/eigency/blob/master/eigency/core.pxd" target="_blank" rel="noopener"
>参考eigency库中的代码&lt;/a>）。&lt;/p>
&lt;p>其中针对第一种用法，为了简化带有命名空间对象的声明，Cython加入了&lt;code>namespace&lt;/code>关键字。在&lt;code>cdef&lt;/code>语句中添加&lt;code>namespace&lt;/code>从句可以使得Cython编译器默认给其包含的语句块中所有的类型加上对应的命名空间，例如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">extern&lt;/span> &lt;span class="kn">from&lt;/span> &lt;span class="s2">&amp;#34;test.h&amp;#34;&lt;/span> &lt;span class="n">namespace&lt;/span> &lt;span class="s2">&amp;#34;ns&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cdef&lt;/span> &lt;span class="n">cppclass&lt;/span> &lt;span class="n">Test&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>与以下代码是等价的&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">extern&lt;/span> &lt;span class="kn">from&lt;/span> &lt;span class="s2">&amp;#34;test.h&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cdef&lt;/span> &lt;span class="n">cppclass&lt;/span> &lt;span class="n">Test&lt;/span> &lt;span class="s2">&amp;#34;ns::Test&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="模板支持">模板支持&lt;/h3>
&lt;p>这个特性在&lt;a class="link" href="https://zyxin.xyz/blog/2018-12/CythonTypes/" >之前介绍Cython类型的文章中&lt;/a>也有提到过，这里补充一下它的一些特性。Cython对C++模板的支持通过&lt;code>[]&lt;/code>符号实现，以下是Cython中对&lt;code>vector&lt;/code>的封装代码可供参考&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">extern&lt;/span> &lt;span class="kn">from&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;vector&amp;gt;&amp;#34;&lt;/span> &lt;span class="n">namespace&lt;/span> &lt;span class="s2">&amp;#34;std&amp;#34;&lt;/span> &lt;span class="n">nogil&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cdef&lt;/span> &lt;span class="n">cppclass&lt;/span> &lt;span class="n">vector&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">ALLOCATOR&lt;/span>&lt;span class="o">=*&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctypedef&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="n">value_type&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctypedef&lt;/span> &lt;span class="n">ALLOCATOR&lt;/span> &lt;span class="n">allocator_type&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中&lt;code>vector[T,ALLOCATOR=*]&lt;/code>对应的就是C++中的&lt;code>vector&amp;lt;T, ALLOCATOR&amp;gt;&lt;/code>符号。模板参数在Cython中同样可以有复数个，也可以有默认值，&lt;a class="link" href="https://gist.github.com/bjodah/3cc42d9c5f70a321af29" target="_blank" rel="noopener"
>似乎现在也支持常数作为模板参数&lt;/a>，不过我没有尝试过，而据说老版本是不支持常数模板参数的。&lt;/p>
&lt;p>之前有提到Cython中对模板的支持是阉割过的，主要特征有以下几点：&lt;/p>
&lt;ul>
&lt;li>Cython不支持模板参数的类型声明访问。例如上面的&lt;code>vector&lt;/code>类型声明中不能使用&lt;code>ctypedef allocator_type.size_type size_type&lt;/code>这样的语法，而这样的类型推断在C++中是有很多的。&lt;/li>
&lt;li>Cython不支持模板构造函数中包含新的模板参数
不过Cython一直在改进对模板的支持，因此以后也很有可能会得到改进。&lt;/li>
&lt;/ul>
&lt;h2 id="buffer协议">Buffer协议&lt;/h2>
&lt;p>Cython还针对性地支持了&lt;a class="link" href="https://docs.python.org/3/c-api/buffer.html" target="_blank" rel="noopener"
>Python的Buffer协议&lt;/a>，用来传递一块结构化的内存，这个协议的标准被记录在了&lt;a class="link" href="https://www.python.org/dev/peps/pep-3118/" target="_blank" rel="noopener"
>提案PEP-3118&lt;/a>中。这个协议通过&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/userguide/buffer.html" target="_blank" rel="noopener"
>&lt;code>__getbuffer__&lt;/code>和&lt;code>__releasebuffer__&lt;/code>&lt;/a>两个Cython自定义的特殊函数实现，通过这个方式Cython代码就可以将C++内存转化为Python识别的内存。因为Numpy支持将支持Buffer协议的对象转换为ndarray，因此这个Buffer协议的通常用法是将一个C++对象变成Numpy的矩阵。具体的使用案例也可以&lt;a class="link" href="https://github.com/cmpute/pcl.py/blob/master/pcl/PointCloud.pyx#L565" target="_blank" rel="noopener"
>参照我的pcl封装库中的对应代码&lt;/a>。&lt;/p>
&lt;hr>
&lt;p>本文介绍了Cython中操作C/C++对象的方法，不过仅仅介绍了一些进阶用法。如果是新手的话还是先参照之前提到两篇文档学习基本的函数、类型封装方法吧～&lt;/p></description></item><item><title>如何选择Python与C++之间的胶水</title><link>https://zyxin.xyz/blog/2019-08/GluePythonCpp/</link><pubDate>Sun, 11 Aug 2019 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2019-08/GluePythonCpp/</guid><description>&lt;p>Python作为一门胶水语言，它与C/C++之间的兼容性（Interoperability）我认为是它相比其他动态语言脱颖而出的最大原因。Python原生支持的是与C语言的接口，Python的发行版自带有&lt;code>Python.h&lt;/code>头文件，里面提供了在C中调用Python和反过来在Python中调用C的接口定义。但是C++就不一样了，虽然C++ ⇔ C ⇔ Python的通道是可行的，但是想要完整兼容C++的特性的话需要很多额外的重复代码（boilerplate）。因此相应针对Python/C++绑定的库也就应运而生了，我所了解的库主要有四个：&lt;a class="link" href="https://www.boost.org/doc/libs/1_70_0/libs/python/doc/html/index.html" target="_blank" rel="noopener"
>Boost.Python&lt;/a>，&lt;a class="link" href="https://cython.org/" target="_blank" rel="noopener"
>Cython&lt;/a>，&lt;a class="link" href="https://pybind11.readthedocs.io/en/stable/" target="_blank" rel="noopener"
>pybind11&lt;/a>，&lt;a class="link" href="http://www.swig.org/" target="_blank" rel="noopener"
>SWIG&lt;/a>。虽然网上也有不少比较三者的页面，但是我觉得都不够详细，这篇博客就介绍一下我基于使用这几个库的经验比较。&lt;/p>
&lt;p>上面说到的这些库我基本都有接触过，其中用过的有pybind11和Cython，分别用在了我正在写的&lt;a class="link" href="https://github.com/cmpute/cgal.py" target="_blank" rel="noopener"
>CGAL&lt;/a>和&lt;a class="link" href="https://github.com/cmpute/pcl.py" target="_blank" rel="noopener"
>PCL&lt;/a>的绑定上。另外二者则是在其他库的代码中有读过（如Caffe和CGAL的官方绑定）。总的来说，Boost.Python和pybind11主要用于给现有C++代码提供Python绑定，并且不用学习新的语法;SWIG提供一个给C++代码编写多种语言绑定的框架，它本质上是一种代码生成器，基于SWIG自定义的语法;Cython则是基于Python的C/C++代码封装器，其本质也是代码生成器，但是Cython的语法是Python的超集，也就是说Python的代码可以零成本移植到Cython中。&lt;/p>
&lt;h2 id="boostpython-vs-pybind11">Boost.Python vs pybind11&lt;/h2>
&lt;p>Boost.Python是一个Boost框架中封装C++代码的工具，通过宏定义和元编程来简化Python的API调用，消灭bolierplate。Boost.Python还提供对Numpy底层API的封装，因此适用性很强，能满足Python绑定的绝大多数需求。而pybind11则是受Boost.Python启发的一套类似的API，其目标是提供Header-only的易用的Python接口。由于pybind11脱胎于Boost，因此它们的接口非常相似，例如最简单的封装一个函数，Boost.Python代码如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;boost/python.hpp&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">BOOST_PYTHON_MODULE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">example&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">boost&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">python&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">def&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;add&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">add&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>而对应的pybind11代码则是&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;pybind11/pybind11.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">PYBIND11_MODULE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">example&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">def&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;add&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>因此熟练掌握这两者之一的开发者能很快上手另一个库的使用。他们的编译方式也是相似的，只需添加一个工程，写好对应的封装代码，然后利用他们的CMake模块进行编译，生成的动态链接库只要文件名正确就可以直接从Python进行import了。他们二者的区别主要有以下几个方面：&lt;/p>
&lt;ol>
&lt;li>pybind11是Header-only的，因此只需把它的头文件添加到include目录就算安装好了。而Boost.Python则是需要先编译安装才能使用，需要处理其依赖。&lt;/li>
&lt;li>pybind11的社区更加活跃，Boost.Python则受限于Boost的更新周期，回应反馈可能会比较慢。&lt;/li>
&lt;li>pybind11的易用性更好，文档齐全且友善，由于没有依赖问题，编译方便上手也快。&lt;/li>
&lt;li>Boost.Python兼容旧特性的C++，也兼容Boost自定义的类型（如smartptr），因此如果需要封装的代码是基于Boost的，那可能Boost.Python会比pybind11合适。pybind11针对的环境则是C++1x，并且只支持标准C++库。&lt;/li>
&lt;li>Boost.Python对Numpy的支持比较完备，例如Boost.Python支持自定义&lt;code>numpy.dtype&lt;/code>，而pybind11对Numpy的支持主要基于Python的buffer协议。
因此基本上如果封装不基于Boost的库的话可以先考虑pybind11，而如果是封装基于Boost的库（如PCL），或者深度操作Numpy，那还是直接上Boost.Python吧～&lt;/li>
&lt;/ol>
&lt;h2 id="boostpythonpybind11-vs-cython">Boost.Python/pybind11 vs Cython&lt;/h2>
&lt;p>这两者的选用其实差别非常大，因为他们的代码逻辑都是不同的。而具体选择哪个库就纯粹是根据需求出发了。他们的区别如下（以下pybind11同时也代表了Boost.Python）&lt;/p>
&lt;ol>
&lt;li>pybind11基于C++，更适合C++工程师。Cython则是基于Python，写习惯的Python的人上手更快，并且能同时方便地兼容Python和C++。&lt;/li>
&lt;li>Cython相比pybind11的环境配置更加简单，用户只需通过pip安装Cython就可以利用Cython的功能了，也无需配置路径。&lt;/li>
&lt;li>Cython封装C++类会比Boost.Python更加繁杂，你需要先定义C++类，再封装成Python类。相当于Cython还多一步翻译头文件的工作。&lt;/li>
&lt;li>Cython支持模板（虽然是阉割版本）！这是Cython独家的一个killer特性，不过是与第3点相关联的。如果你已经翻译好了现有的模板代码，那么用户就可以用Python的语法来自行展开模板了！pybind11需要在编译的时候实例化模板，因此一般只封装常用的实例，或者穷举所有实例化可能（这会导致生成的封装库尺寸爆炸）&lt;/li>
&lt;li>pybind11封装重载函数比Cython要方便太多！Cython封装重载函数的话一般需要定义大量的可选参数和类型判断。&lt;/li>
&lt;li>Cython封装继承类就更加麻烦了，不仅要处理方法重载，还要复制继承关系，十分繁复。&lt;/li>
&lt;li>Cython无法利用上C++的宏定义，这对支持条件编译非常不利，很多时候还需要自己利用&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/userguide/language_basics.html#conditional-statements" target="_blank" rel="noopener"
>Cython的条件语句&lt;/a>翻译一套条件编译的逻辑。&lt;/li>
&lt;li>Cython似乎在封装上比pybind11性能好，参见&lt;a class="link" href="https://github.com/pybind/pybind11/issues/1227" target="_blank" rel="noopener"
>pybind11#1227&lt;/a>和&lt;a class="link" href="https://github.com/pybind/pybind11/issues/2005" target="_blank" rel="noopener"
>pybind#2005&lt;/a>。如果你的代码需要经常调用封装后的函数，那么选择Cython性能更好。&lt;/li>
&lt;/ol>
&lt;p>以前很多人使用Cython的原因是Cython可以很方便地加速Python代码，但是&lt;code>numba.jit&lt;/code>的出现则让这个功能实际上成了鸡肋，因此Cython最近的使用率也是越来越低了。如果没有很强的对保留模板灵活性的需求，或者不是封装目标不是基于C语言的，那还是选择pybind11来的方便。如果封装接口只是一小部分需求的话也还是用Cython会更加一致，我在自己的PCL绑定项目中使用Cython的原因是有大量基于Python的扩展代码，因此使用Cython还是能更方便。&lt;/p>
&lt;h2 id="swig">SWIG&lt;/h2>
&lt;p>SWIG是个很神奇的东西，他能够将C++代码封装成Python/C#/Java/Ruby等多种语言，但是也正因为这个灵活性，它对C++的高级特性的支持就比较辣鸡了。在&lt;a class="link" href="https://github.com/sciencectn/cgal-bindings" target="_blank" rel="noopener"
>CGAL官方的绑定库&lt;/a>中可以看到有不少代码需要针对Python和Java打补丁，因此如果没有多语言的需求的话SWIG应该是下下策了。这应该也是SWIG一直没啥发展的原因吧～&lt;/p>
&lt;hr>
&lt;p>总而言之，如果有多语言绑定的需求可以选择SWIG，如果有以下需求可以选择Cython，其他情况选择pybind11即可&lt;/p>
&lt;ul>
&lt;li>需要保留模板参数，让用户可以自行选择用什么类型展开，或者目标用户有继续使用和拓展C++ API的需求时，用Cython便于用户使用&lt;/li>
&lt;li>有大量的封装函数调用时，Cython的性能最好&lt;/li>
&lt;li>绑定的对象是C语言写的API或者不涉及面向对象的话，那么用Cython写封装会更方便（不用处理编译的问题）&lt;/li>
&lt;/ul>
&lt;p>本文介绍了Boost.Python/pybin11/Cython/SWIG之间的特性与区别，而具体用法则是一笔带过。如果大家对其中的某工具感兴趣的话可以直接去官网看教程～也欢迎参考我的&lt;a class="link" href="https://zyxin.xyz/blog/blog/tags/Cython/" >Cython系列博客&lt;/a>，以及我的一些Github项目如&lt;a class="link" href="https://github.com/cmpute/pcl.py" target="_blank" rel="noopener"
>pcl.py&lt;/a>，&lt;a class="link" href="https://github.com/cmpute/cgal.py" target="_blank" rel="noopener"
>cgal.py&lt;/a>。&lt;/p></description></item><item><title>Cython中的类型系统</title><link>https://zyxin.xyz/blog/2018-12/CythonTypes/</link><pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2018-12/CythonTypes/</guid><description>&lt;p>由于最近的几个项目都有接触到Cython的使用，也积累了一些Cython的经验，于是决定把&lt;img src="https://zyxin.xyz/blog/blog/https://zyxin.xyz/blog/2017-12/CythonIntro/"
loading="lazy"
alt="上次的介绍"
>续上（蜜汁发现刚好过了一年。。），将Cython的一些用法记录下来。这一些文章可以作为一些学习的参考，不过kick-start的话还是去看看&lt;a class="link" href="https://zyxin.xyz/blog/2017-12/CythonIntro/" >之前的博文&lt;/a>以及&lt;a class="link" href="http://docs.cython.org/en/latest/src/quickstart/index.html" target="_blank" rel="noopener"
>官方的例子&lt;/a>吧~&lt;/p>
&lt;h2 id="cython对cc内置类型的支持">Cython对C/C++内置类型的支持&lt;/h2>
&lt;p>Cython在类型设置上和C/C++是十分相似的，不仅默认支持基本C类型&lt;code>int&lt;/code>、&lt;code>float&lt;/code>、&lt;code>unsigned long&lt;/code>等等以及他们的指针类型，还支持C的&lt;code>struct&lt;/code>、&lt;code>union&lt;/code>、&lt;code>enum&lt;/code>以及C++的&lt;code>cppclass&lt;/code>（即C++中的类）。需要注意的是在Cython中，定义C/C++对象都需要使用cdef关键字，或者&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/userguide/early_binding_for_speed.html#early-binding-for-speed" target="_blank" rel="noopener"
>使用cpdef关键字定义一个Python封装过的对象&lt;/a>。另外Cython还通过&lt;code>ctypedef&lt;/code>支持C/C++形式的typedef。下面是一些定义变量的例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="nb">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="c1"># i,j,k是C中的int类型&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="nb">float&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">g&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">42&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">h&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">struct&lt;/span> &lt;span class="n">Grail&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># C形式的结构体&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">int&lt;/span> &lt;span class="n">age&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">float&lt;/span> &lt;span class="n">volume&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">Grail&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">gp&lt;/span> &lt;span class="c1"># 结构体指针，注意不是cdef struct Grail&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">enum&lt;/span> &lt;span class="n">CheeseState&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># C++形式的枚举类&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">hard&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">soft&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">runny&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">enum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># C形式的匿名枚举&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">tons_of_spam&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;ul>
&lt;li>&lt;code>size_t&lt;/code>和&lt;code>Py_ssize_t&lt;/code>也是受Cython语言支持的类型。如果想使用&lt;code>uint32_t&lt;/code>形式的类型，则需要添加&lt;code>from libc.stdint cimport uint32_t&lt;/code>形式的语句。&lt;/li>
&lt;li>这些变量的作用域定义与Python是相同的，但是cdef定义的对象是不能import到Python代码中的，而cpdef定义的对象则可以。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="cython对python内置类型的支持">Cython对Python内置类型的支持&lt;/h2>
&lt;p>尽管Cython兼容Python的语法，但是我们还可以通过cdef来使得Python对象具有静态类型，以提高运行效率。Cython在除了支持Python内置的&lt;code>list&lt;/code>、&lt;code>dict&lt;/code>、&lt;code>tuple&lt;/code>外，还支持直接声明Python的基本类型，这需要通过&lt;code>from cpython cimport int&lt;/code>形式的语句来实现。此外有一类特殊的类型是&lt;code>ctuple&lt;/code>，能够直接定义tuple中元素的类型与数量，有些类似于C# 7中的语法，例子如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="nb">dict&lt;/span> &lt;span class="n">sd&lt;/span> &lt;span class="c1"># 直接定义内置类型，实际是PyDict对象&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">cpython&lt;/span> &lt;span class="n">cimport&lt;/span> &lt;span class="nb">int&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">pyint&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">pyint&lt;/span> &lt;span class="n">big_a&lt;/span> &lt;span class="c1"># PyInt对象&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">libcpp&lt;/span> &lt;span class="n">cimport&lt;/span> &lt;span class="nb">bool&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">unsigned&lt;/span> &lt;span class="n">long&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">table&lt;/span> &lt;span class="c1"># ctuple对象&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="cython的类型映射">Cython的类型映射&lt;/h2>
&lt;p>在将Python的基本类型对象与C/C++的基本类型对象进行相互赋值的过程中，Cython会进行自动的类型转换，可识别的转换规则有：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>C types&lt;/th>
&lt;th>From Python types&lt;/th>
&lt;th>To Python types&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>[unsigned] char, [unsigned] short, int, long&lt;/td>
&lt;td>int, long&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>unsigned int, unsigned long, [unsigned] long long&lt;/td>
&lt;td>int, long&lt;/td>
&lt;td>long&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>float, double, long double&lt;/td>
&lt;td>int, long, float&lt;/td>
&lt;td>float&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>char*&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/td>
&lt;td>str/bytes&lt;/td>
&lt;td>str/bytes&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C array&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/td>
&lt;td>iterable&lt;/td>
&lt;td>list&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>struct&lt;/td>
&lt;td>union&lt;/td>
&lt;td>dict&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>如果自动类型转换不被支持、或者自动转换类型不是所需类型的话，还可以使用强制类型转换，语法是在变量前加&lt;code>&amp;lt;type-name&amp;gt;&lt;/code>，例如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">cpython.ref&lt;/span> &lt;span class="n">cimport&lt;/span> &lt;span class="n">PyObject&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">extern&lt;/span> &lt;span class="kn">from&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctypedef&lt;/span> &lt;span class="n">Py_ssize_t&lt;/span> &lt;span class="n">Py_intptr_t&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">python_string&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;foo&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">void&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="n">python_string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">Py_intptr_t&lt;/span> &lt;span class="n">adress_in_c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Py_intptr_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">ptr&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>如果使用&lt;code>&amp;lt;type-name?&amp;gt;&lt;/code>形式则会在转换时执行运行时检查&lt;/p>
&lt;/blockquote>
&lt;h2 id="cython中的模板">Cython中的模板&lt;/h2>
&lt;p>Cython还支持C++中的模板，语法是&lt;code>class_name[template_args]&lt;/code>，不过模板参数目前只支持类型参数，因此更像是C#中的泛型。对模板的支持不仅是可以声明模板类，还可以支持绑定已有C++的模板类，这也是Cython区别于Boost.Python、Pybind11等C++端绑定库的重要一点。由于后者在编译期无法了解Python代码的使用需求，因此只能在编译器展开模板（Instantiation），而Cython则可以通过&lt;code>.pxd&lt;/code>头文件保留模板的格式，在引用该库需要编译时再展开。&lt;/p>
&lt;p>模板的应用例子如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">libcpp.vector&lt;/span> &lt;span class="n">cimport&lt;/span> &lt;span class="n">vector&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">vector&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">vect&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="nb">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vect&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>&lt;strong>参考内容：&lt;/strong>
&lt;a class="link" href="https://cython.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener"
>Cython文档&lt;/a>
&lt;a class="link" href="http://cython.readthedocs.io/en/latest/src/userguide/language_basics.html" target="_blank" rel="noopener"
>Cython文档 - Language Basics&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Python2中转换成str，Python3中转换成bytes&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>char数组除外&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>PowerShell快速上手（针对有C#经验者）</title><link>https://zyxin.xyz/blog/2018-11/PowerShellForCSharpProgrammer/</link><pubDate>Fri, 02 Nov 2018 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2018-11/PowerShellForCSharpProgrammer/</guid><description>&lt;p>PowerShell是微软一个非常棒的产品，终于改变了人们对Windows下命令行的一片鄙视。一直以来都很想学学PowerShell，这样我就不用使用Python作为手边的脚本语言了，对进行一些文件操作、系统操作而言PowerShell还是要比Python来的方便。另外由于有不少C#的经验，因此PowerShell能够调用.NET库的特性也能够充分利用起来，并且实际发现C#的经验让我学习PowerShell快了不少（当然使用bash、CMake这些脚本的经验应该也帮上忙了吧）。本文就是一篇针对有C#经验的用户的PowerShell上手教程，当然如果你有F#、IronPython等基于.NET的脚本经验那就更好了。&lt;/p>
&lt;blockquote>
&lt;p>Note: 后文中PowerShell简称PS。&lt;/p>
&lt;/blockquote>
&lt;h2 id="powershell脚本的运行方法">PowerShell脚本的运行方法&lt;/h2>
&lt;p>PowerShell本质是一个脚本环境/脚本语言。在PS中，语句从第一行开始依次执行，而不像普通程序一样会有一个显式的程序入口（Entry），并且PS的每一行命令（语句）都不用使用结尾标志（如C家族的;）。因此PS脚本的编写将会非常直观，想要输出&lt;code>Hello World&lt;/code>只需一行语句即可：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo &lt;/span>&lt;span class="s2">&amp;#34;Hello World&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行一段PS脚本有两种方式，一种是在PS交互命令行中直接将命令输入，例如你可以直接在PS命令行中输入&lt;code>35+2&lt;/code>，或者&lt;code>$env:Path.GetType()&lt;/code>等复杂语句；另一种则是将脚本写在&lt;code>.ps1&lt;/code>文件中，然后运行&lt;code>.ps1&lt;/code>文件即可。这与大部分脚本语言运行的方法是一致的。&lt;/p>
&lt;p>需要指出的是Windows下PS脚本运行是受到系统的限制的，默认系统配置下，如果再PowerShell窗口中直接运行&lt;code>.ps1&lt;/code>脚本，PS会提示&lt;em>File cannot be loaded because running scripts is disabled on this system.&lt;/em>。解决这个问题有两种方式&lt;/p>
&lt;ol>
&lt;li>将系统中Windows PowerShell执行策略改为“Bypass”，这个可以通过在PS中运行以下命令完成
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Set-ExecutionPolicy&lt;/span> &lt;span class="n">Bypass&lt;/span> &lt;span class="n">-Scope&lt;/span> &lt;span class="n">CurrentUser&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Set-ExecutionPolicy&lt;/span> &lt;span class="n">Bypass&lt;/span> &lt;span class="n">-Scope&lt;/span> &lt;span class="k">Process&lt;/span> &lt;span class="c"># 仅在当前PS进程中生效。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>使用&lt;code>powershell -noprofile -executionpolicy bypass -file &amp;lt;文件路径&amp;gt; [参数]&lt;/code>来运行脚本，这是用户友好的方法。由于该命令可以通过cmd或者PS执行，因此可以通过&lt;code>.bat&lt;/code>文件封装这个命令，以达到双击运行的效果。&lt;/li>
&lt;/ol>
&lt;h2 id="命令-or-参数-or-字符串">命令 or 参数 or 字符串？&lt;/h2>
&lt;p>PowerShell中变量名均以&lt;code>$&lt;/code>开头。与bash、CMake风格相似的是，PS中的内容如果不以&lt;code>$&lt;/code>或者&lt;code>-&lt;/code>开头则默认都是命令或者字符串，例如在&lt;code>echo Hello World&lt;/code>这样的语句中，&lt;code>echo&lt;/code>是命令，&lt;code>Hello&lt;/code>和&lt;code>World&lt;/code>都是命令的参数并且都是字符串类型。在PS中，命令/函数的调用有两种形式：&lt;/p>
&lt;ol>
&lt;li>命令形式：&lt;code>&amp;lt;命令&amp;gt; [参数1] .. [-参数名2 &amp;lt;参数2&amp;gt;] ..&lt;/code>，如&lt;code>Get-ChildItem C:\Windows\* -Include *.exe&lt;/code>。在这类形式中，参数默认都是字符串，在不含空格时都可以不打引号。这里的命令主要是PS内置的命令（cmdlet）或者别名（alias），通常是一个首字母大写的单词或者用短横连接的两个首字母大写单词。&lt;/li>
&lt;li>函数形式: &lt;code>[对象.]函数(参数1, 参数2, ..)&lt;/code>，如&lt;code>&amp;quot;abcd&amp;quot;.Endswith(&amp;quot;cd&amp;quot;)&lt;/code>。在这类形式中，参数需要通过引号来明确指定是字符串。通过这样的方法使用的是.NET的函数，写起来就和C#没什么区别。&lt;/li>
&lt;/ol>
&lt;p>另外，PowerShell支持管道，因此对于命令形式来说可以通过&lt;code>&amp;lt;命令1&amp;gt; | &amp;lt;命令2&amp;gt; | ..&lt;/code>的形式来进行链式调用并且传递参数，而函数形式就没法进行链式调用了。&lt;/p>
&lt;h2 id="net交互interop">.NET交互（Interop）&lt;/h2>
&lt;p>PowerShell本身是用C#编写的，并且其内部运行环境也是基于.NET的，因此PS与.NET交互十分简单。&lt;/p>
&lt;h3 id="powershell对象">PowerShell对象&lt;/h3>
&lt;p>PS中的对象均为.NET中的对象，因此PS变量可以直接当作.NET对象进行操作，例如下列语句：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="mf">123&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">ToString&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c"># 报错，因为123既不是变量也不是命令&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="p">([&lt;/span>&lt;span class="no">int&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="mf">123&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="py">ToString&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c"># 这里将字符串123转换成了System.Int32变量&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mf">123&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">Dir &lt;/span>&lt;span class="n">C:&lt;/span>&lt;span class="p">\).&lt;/span>&lt;span class="py">GetType&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="py">Name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Object&lt;/span>&lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">Get-Item&lt;/span> &lt;span class="n">HKCU&lt;/span>&lt;span class="err">:&lt;/span>&lt;span class="p">\&lt;/span>&lt;span class="n">Software&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="py">GetType&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="py">FullName&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Microsoft&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">Win32&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">RegistryKey&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>PS不仅能操作对象，还能够直接创建对象&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># PS中创建.NET对象&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">New-Object&lt;/span> &lt;span class="n">-TypeName&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">Version&lt;/span> &lt;span class="n">-ArgumentList&lt;/span> &lt;span class="s2">&amp;#34;1.2.3.4&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Major&lt;/span> &lt;span class="n">Minor&lt;/span> &lt;span class="n">Build&lt;/span> &lt;span class="n">Revision&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">-----&lt;/span> &lt;span class="p">-----&lt;/span> &lt;span class="p">-----&lt;/span> &lt;span class="p">--------&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mf">1&lt;/span> &lt;span class="mf">2&lt;/span> &lt;span class="mf">3&lt;/span> &lt;span class="mf">4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c"># PowerShell中的Object对象操作&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="nv">$var&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">New-Object&lt;/span> &lt;span class="n">object&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="nv">$var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">GetType&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="py">Name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">Object&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">Add-Member&lt;/span> &lt;span class="n">-InputObject&lt;/span> &lt;span class="nv">$var&lt;/span> &lt;span class="n">-Name&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="n">-Value&lt;/span> &lt;span class="mf">123&lt;/span> &lt;span class="n">-MemberType&lt;/span> &lt;span class="n">NoteProperty&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="nv">$var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">Value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mf">123&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过&lt;code>Add-Member&lt;/code>和&lt;code>Get-Member&lt;/code>命令，PS不仅能够完成.NET中的反射（Reflection），还能够完成类似匿名对象（Anonymous Object）的创建，这个十分有用！&lt;/p>
&lt;h3 id="powershell中操作net类">PowerShell中操作.NET类&lt;/h3>
&lt;p>在PS中可以直接调用.NET库中的类进行操作&lt;/p>
&lt;ol>
&lt;li>新建对象：&lt;code>New-Object -TypeName System.Version -ArgumentList &amp;quot;1.2.3.4&amp;quot;&lt;/code>&lt;/li>
&lt;li>强制转换：&lt;code>[int]&amp;quot;1234&amp;quot;&lt;/code>（等同于&lt;code>[System.Int32]&amp;quot;1234&amp;quot;&lt;/code>）&lt;/li>
&lt;li>调用静态函数： &lt;code>[System.DateTime]::Parse(&amp;quot;2012-10-13 23:42:55&amp;quot;)&lt;/code>
有了这些操作，PowerShell已经完全可以当一个C#脚本引擎了~&lt;/li>
&lt;/ol>
&lt;h2 id="操作符httpsdocsmicrosoftcompowershellmodulemicrosoftpowershellcoreaboutabout_operators">&lt;a class="link" href="https://docs.microsoft.com/powershell/module/microsoft.powershell.core/about/about_operators" target="_blank" rel="noopener"
>操作符&lt;/a>&lt;/h2>
&lt;p>在利用PS写逻辑流程时就会发现，除了加减乘除外，C#的很多关键字和操作符都不能直接使用。在PS中，这些操作符都变成了命令或者以&lt;code>-&lt;/code>开头的命令符了。下表列出了常用的操作符：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>PS操作符&lt;/th>
&lt;th>C#操作符&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="https://docs.microsoft.com/powershell/module/microsoft.powershell.core/about/about_comparison_operators" target="_blank" rel="noopener"
>&lt;strong>比较&lt;/strong>&lt;/a>&lt;/td>
&lt;td>&lt;code>-eq&lt;/code>&lt;/td>
&lt;td>&lt;code>==&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>比较&lt;/td>
&lt;td>&lt;code>-ne&lt;/code>&lt;/td>
&lt;td>&lt;code>!=&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>比较&lt;/td>
&lt;td>&lt;code>-gt&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>比较&lt;/td>
&lt;td>&lt;code>-ge&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;gt;=&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>比较&lt;/td>
&lt;td>&lt;code>-lt&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;lt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>比较&lt;/td>
&lt;td>&lt;code>-le&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;lt;=&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://docs.microsoft.com/powershell/module/microsoft.powershell.core/about/about_type_operators" target="_blank" rel="noopener"
>&lt;strong>类型&lt;/strong>&lt;/a>&lt;/td>
&lt;td>&lt;code>-is&lt;/code>&lt;/td>
&lt;td>&lt;code>is&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>类型&lt;/td>
&lt;td>&lt;code>-as&lt;/code>&lt;/td>
&lt;td>&lt;code>as&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://docs.microsoft.com/powershell/module/microsoft.powershell.core/about/about_logical_operators" target="_blank" rel="noopener"
>&lt;strong>逻辑&lt;/strong>&lt;/a>&lt;/td>
&lt;td>&lt;code>-and&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;amp;&amp;amp;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>逻辑&lt;/td>
&lt;td>&lt;code>-or&lt;/code>&lt;/td>
&lt;td>&lt;code>||&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>逻辑&lt;/td>
&lt;td>&lt;code>-xor&lt;/code>&lt;/td>
&lt;td>&lt;code>^&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>逻辑&lt;/td>
&lt;td>&lt;code>-not&lt;/code>&lt;/td>
&lt;td>&lt;code>!&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://docs.microsoft.com/powershell/module/microsoft.powershell.core/about/about_arithmetic_operators" target="_blank" rel="noopener"
>&lt;strong>运算&lt;/strong>&lt;/a>&lt;/td>
&lt;td>&lt;code>-band&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;amp;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>运算&lt;/td>
&lt;td>&lt;code>-bnot&lt;/code>&lt;/td>
&lt;td>&lt;code>~&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>运算&lt;/td>
&lt;td>&lt;code>-bor&lt;/code>&lt;/td>
&lt;td>&lt;code>|&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>运算&lt;/td>
&lt;td>&lt;code>-bxor&lt;/code>&lt;/td>
&lt;td>&lt;code>^&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>运算&lt;/td>
&lt;td>&lt;code>-shl&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;lt;&amp;lt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>运算&lt;/td>
&lt;td>&lt;code>-shr&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;gt;&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>运算&lt;/td>
&lt;td>&lt;code>-bxor&lt;/code>&lt;/td>
&lt;td>&lt;code>^&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>另外需要注意的是&lt;code>&amp;gt;&lt;/code>、&lt;code>&amp;gt;&amp;gt;&lt;/code>等等运算符在PS中是重定向运算符。&lt;/p>
&lt;/blockquote>
&lt;p>尽管名字不一样，但是这些操作符的用法还是一样的。另外PS中还定义了一些.NET中没有的操作符，这些操作符通常很实用，如：&lt;/p>
&lt;ul>
&lt;li>&lt;code>-contains&lt;/code>：返回集合包含元素&lt;/li>
&lt;li>&lt;code>-in&lt;/code>：返回元素是否被集合包含&lt;/li>
&lt;li>&lt;code>-like&lt;/code>: 返回字符串是否与通配式匹配（&lt;a class="link" href="https://en.wikipedia.org/wiki/Wildcard_character" target="_blank" rel="noopener"
>Wildcard Pattern&lt;/a>）&lt;/li>
&lt;li>&lt;code>-match&lt;/code>: 返回字符串是否与正则表达式匹配（&lt;a class="link" href="https://en.wikipedia.org/wiki/Regular_expression" target="_blank" rel="noopener"
>Regex&lt;/a>）&lt;/li>
&lt;li>&lt;code>-f&lt;/code>: 等价于&lt;code>String.Format()&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="powershell驱动httpsdocsmicrosoftcompowershellscriptinggetting-startedcookbooksmanaging-windows-powershell-drives">&lt;a class="link" href="https://docs.microsoft.com/powershell/scripting/getting-started/cookbooks/managing-windows-powershell-drives" target="_blank" rel="noopener"
>PowerShell“驱动”&lt;/a>&lt;/h2>
&lt;p>“驱动”（Drive）是PowerShell中很有意思的一个概念，PowerShell提供了一种统一的接口来管理层次信息系统，包括文件系统（FileSystem）、注册表（Registry）、证书（Certificate）、环境变量（Environment），甚至包括当前会话的变量（Variable）和函数（Function）。这些“Drive”支持统一的一套接口，这就非常的有趣了233。&lt;/p>
&lt;p>通过&lt;code>Get-PSDrive&lt;/code>命令我们可以获得当前PowerShell会话支持的驱动，在我的电脑上该命令的运行结果如下（省去部分内容）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Name Provider Root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">---- -------- ----
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Alias Alias
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">C FileSystem C:\
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Cert Certificate \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">D FileSystem D:\
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">E FileSystem E:\
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Env Environment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Function Function
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">G FileSystem G:\
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">HKCU Registry HKEY_CURRENT_USER
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">HKLM Registry HKEY_LOCAL_MACHINE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Variable Variable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">WSMan WSMan
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过这些驱动，&lt;code>ls env:\Path&lt;/code>就能够获取系统环境变量，&lt;code>HKCU:\SOFTWARE&lt;/code>就可以获取注册表键，十分方便。但是需要注意的是这些驱动获得的对象的类型是不同的，如文件对象会是&lt;code>System.IO.FileInfo&lt;/code>，而注册表键则是&lt;code>Microsoft.Win32.RegistryKey&lt;/code>。&lt;/p>
&lt;h3 id="驱动统一支持的命令接口">驱动统一支持的命令接口&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Cmdlet&lt;/th>
&lt;th>Alias&lt;/th>
&lt;th>用途&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Get-ChildItem&lt;/td>
&lt;td>dir, ls&lt;/td>
&lt;td>获取当前位置的所有子项&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Set-Location&lt;/td>
&lt;td>cd&lt;/td>
&lt;td>更改当前位置&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>New-Item&lt;/td>
&lt;td>md, mkdir&lt;/td>
&lt;td>在指定位置新建对象&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Get-Item&lt;/td>
&lt;td>&lt;/td>
&lt;td>获取该位置对应的对象&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Remove-Item&lt;/td>
&lt;td>del, rm&lt;/td>
&lt;td>删除指定位置的对象&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>New-ItemProperty&lt;/td>
&lt;td>&lt;/td>
&lt;td>新建对象的属性&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Get-ItemProperty&lt;/td>
&lt;td>&lt;/td>
&lt;td>获取对象的属性（如文件属性，注册表键）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Set-ItemProperty&lt;/td>
&lt;td>&lt;/td>
&lt;td>设置对象的属性&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Clear-ItemProperty&lt;/td>
&lt;td>&lt;/td>
&lt;td>删除对象的属性&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Test-Path&lt;/td>
&lt;td>&lt;/td>
&lt;td>判断指定位置是否存在对象&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;p>看完这些内容以后你就可以像写C#一样开始写PowerShell啦。更加详细的教程可以参见下方的参考资料~&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>参考资料&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://docs.microsoft.com/powershell/" target="_blank" rel="noopener"
>微软官方文档&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.pstips.net/powershell-online-tutorials" target="_blank" rel="noopener"
>PowerShell在线教程&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>利用Visual Studio Code搭建Latex编辑环境</title><link>https://zyxin.xyz/blog/2018-09/LatexSetup/</link><pubDate>Tue, 18 Sep 2018 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2018-09/LatexSetup/</guid><description>&lt;img src="https://zyxin.xyz/blog/2018-09/LatexSetup/workshop_screenshot.png" alt="Featured image of post 利用Visual Studio Code搭建Latex编辑环境" />&lt;p>由于没有足够的动力，之前一直没有学LaTeX。苍天饶过谁，这回有一门课强制使用LaTeX交作业，没办法只能装上LaTeX了。如果是在几年前大一大二的时候，我可能还忍不了MiKTeX难用的命令行和WinEdit丑陋的界面，但是现在有了VSCode，一切都变得easy and works like a charm。 本文就讲述如何利用VSCode搭建LaTeX的编辑环境。如果你还没有装VSCode的话就赶紧去官网下载吧~&lt;/p>
&lt;h2 id="miktex--lyx">MiKTeX + LyX&lt;/h2>
&lt;p>想要使用LaTeX，首先需要安装一个LaTeX发行版，也就是实现LaTeX功能的软件包。著名的发行版有&lt;a class="link" href="https://tug.org/texlive/" target="_blank" rel="noopener"
>TeX Live&lt;/a>、&lt;a class="link" href="http://miktex.org/" target="_blank" rel="noopener"
>MiKTeX&lt;/a>、&lt;a class="link" href="http://www.ctex.org/HomePage" target="_blank" rel="noopener"
>CTeX&lt;/a>等。我选择的是MiKTeX，原因有&lt;/p>
&lt;ol>
&lt;li>MiKTeX是老师推荐的发行版&lt;/li>
&lt;li>MiKTeX是LyX的默认后端&lt;/li>
&lt;li>MiKTeX体积不大而且安装简单&lt;/li>
&lt;/ol>
&lt;p>安装有多简单呢：直接从&lt;a class="link" href="https://miktex.org/download" target="_blank" rel="noopener"
>官网下载界面&lt;/a>下载对应安装包，双击安装即可。安装过程中的选项可以保持默认。MiKTeX里面有一些包含有Perl脚本，因此建议再给系统装上Perl的运行时。Perl的运行时也有不同的发行版，我选择的是&lt;a class="link" href="http://strawberryperl.com/" target="_blank" rel="noopener"
>Strawberry Perl&lt;/a>。两者都安装完毕后打开命令行，运行&lt;code>latexmk&lt;/code>测试MiKTeX是否安装正常。&lt;/p>
&lt;p>另外你还可以选择安装LyX，这是一个让你像使用Word一样编写tex的软件，由于我也还没怎么用过，就不详细介绍了。LyX安装包有两种，一种是包含了MiKTeX的安装包的，建议先单独安装MiKTeX，再使用独立安装包安装LyX，便于MikTeX的调试。&lt;/p>
&lt;h2 id="visual-studio-code-插件">Visual Studio Code 插件&lt;/h2>
&lt;p>VSCode原生只支持&lt;code>.tex&lt;/code>文件的高亮，如果想要利用VSCode完成TeX的整个编写流程（编写、预览、编译、发布）就需要安装额外的插件。我使用的是目前做多star的&lt;strong>LaTeX Workshop&lt;/strong>。安装上这个插件后，只要你的系统路径中装有MiKTeX，那么就直接使用了~&lt;/p>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2018-09/LatexSetup/workshop_screenshot.png"
width="2736"
height="1744"
loading="lazy"
alt="LaTeX Workshop 使用界面"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="376px"
>&lt;/p>
&lt;p>常用的操作可以通过左侧的TeX选项卡、左下角的TeX状态按钮或在编辑窗口右键来完成。并且LaTeX Workshop提供的预览功能支持实时更新，在你每次保存&lt;code>.tex&lt;/code>文件时它会自动刷新。另外，如果你安装了vscode-pdf插件的话，LaTeX Workshop会提示它已经包含了vscode-pdf的功能重复了，但我感觉如果纯看PDF的话还是用vscode-pdf比较稳定。&lt;/p>
&lt;h2 id="一些latex技巧">一些LaTeX技巧&lt;/h2>
&lt;p>虽然我也是LaTeX新手，但是从Word转换过来时还是有不少操作比较不直观，因此在这里提一些我用到的技巧：&lt;/p>
&lt;ul>
&lt;li>利用&lt;code>.pgf&lt;/code>格式的图片可以使得Matplotlib出的图与LaTeX无缝集成
&lt;blockquote>
&lt;p>在LaTeX中使用pgf格式图片需要引用&lt;code>pgfplots&lt;/code>库：&lt;code>\usepackage{pgfplots}&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>在LaTeX中打单边的括号可以使用&lt;code>\left$&lt;/code>与&lt;code>\right$&lt;/code>，其中&amp;quot;$&amp;ldquo;代表括号，如果只有单边的话另一边的&amp;rdquo;$&amp;ldquo;使用&amp;rdquo;.&amp;ldquo;替代
&lt;blockquote>
&lt;p>LaTeX中&lt;code>\left{ \right.&lt;/code>的效果等价于word中&lt;code>{ \close&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;blockquote>
&lt;p>我的其他博文: 关于Visual Studio Code的其他插件可以参考[VSCode插件推荐](https://zyxin.xyz/blog/2018-02/ToolVisualStudio/，关于Word中公式的输入技巧则可以参见&lt;a class="link" href="https://zyxin.xyz/blog/2017-08/WordMath/" >快速输入数学公式&lt;/a>。&lt;/p>
&lt;/blockquote></description></item><item><title>Python - 如何调用系统命令或外部程序</title><link>https://zyxin.xyz/blog/2017-12/PythonCall/</link><pubDate>Thu, 14 Dec 2017 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2017-12/PythonCall/</guid><description>&lt;p>我经常会碰到拿别人的代码过来用却发现不是Python写的代码的情况。这个时候，如果你想调用他的代码，要么自己费力地把他的和自己的代码翻译成同一种语言，要么利用语言特性直接调用（如Lua直接调用C函数），但其实最简便的办法是通过外部程序调用的方式调用他的程序，只要传入相关参数即可~本文就讲一下在Python下调用外部函数或者命令的几种方法~&lt;/p>
&lt;h2 id="ossystem">os.system&lt;/h2>
&lt;p>这个函数和C语言中的&lt;code>system()&lt;/code>函数是类似的。这个函数比较简单，但是只能调用系统命令，无法直接调用外部函数，也无法获取运行的返回值或者输出流什么的，简便但不够灵活。&lt;/p>
&lt;h2 id="osspawn">os.spawn*&lt;/h2>
&lt;p>Python中&lt;code>os&lt;/code>模块&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>自带的函数&lt;code>spawn*&lt;/code>是我最早接触到可以调用外部程序的函数，根据&lt;code>*&lt;/code>的不同具体一共有八个函数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">spawnl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mode&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">spawnle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mode&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">spawnlp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mode&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">spawnlpe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mode&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">spawnv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mode&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">spawnve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mode&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">spawnvp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mode&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">spawnvpe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mode&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>不同字母代表的含义其实通过函数定义即可看出，具体分别是：&lt;/p>
&lt;ul>
&lt;li>&lt;code>l&lt;/code>和&lt;code>v&lt;/code>的区别在于调用的参数是直接传入的还是通过列表对象进行传入的，从函数定义即可看出。&lt;/li>
&lt;li>&lt;code>p&lt;/code>代表外部程序的文件本体将从系统&lt;code>PATH&lt;/code>中进行寻找，只需输入文件名即可&lt;/li>
&lt;li>&lt;code>e&lt;/code>代表所调用的程序的环境变量可以通过&lt;code>env&lt;/code>参数来指定&lt;/li>
&lt;/ul>
&lt;p>mode代表调用函数的线程模式，有如下几种：&lt;/p>
&lt;ul>
&lt;li>&lt;code>os.P_NOWAIT&lt;/code>: 调用外部程序后函数本身不会等待，将会立即返回，代码继续执行&lt;/li>
&lt;li>&lt;code>os.P_WAIT&lt;/code>: 调用外部程序后函数等待程序执行结束才会返回继续&lt;/li>
&lt;li>&lt;code>os.P_DETACH&lt;/code>: 与&lt;code>os.P_NOWAIT&lt;/code>相似，但是新的线程会脱离所调用的控制台（也就是说新的程序将不会通过当前的控制台来输出）&lt;/li>
&lt;li>&lt;code>os.P_OVERLAY&lt;/code>: 当前线程将会被替换成新的线程，这意味着&lt;code>spawn*&lt;/code>函数将一直不返回&lt;/li>
&lt;/ul>
&lt;h2 id="subprocess">subprocess&lt;/h2>
&lt;p>&lt;code>subprocess&lt;/code>模块&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>据Python官方文档所说，是用来替代以下这些函数的：&lt;/p>
&lt;ul>
&lt;li>&lt;code>os.system&lt;/code>&lt;/li>
&lt;li>&lt;code>os.spawn*&lt;/code>&lt;/li>
&lt;li>&lt;code>os.popen*&lt;/code>&lt;/li>
&lt;li>&lt;code>popen2.*&lt;/code>&lt;/li>
&lt;li>&lt;code>commands.*&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>subprocess常用的函数或对象有这么几个：&lt;code>call&lt;/code>, &lt;code>check_*&lt;/code>, &lt;code>Popen&lt;/code>。下面介绍一下它们的用法。&lt;/p>
&lt;ul>
&lt;li>&lt;code>call&lt;/code>: 调用程序，等待到程序执行完成后返回程序的返回值&lt;/li>
&lt;li>&lt;code>check_call&lt;/code>: 调用程序，等待到程序执行完成后，若返回值为0则函数返回，若返回值不为0则抛出&lt;code>CalledProcessError&lt;/code>异常&lt;/li>
&lt;li>&lt;code>check_output&lt;/code>: 调用程序，将程序的输出字符串以&lt;code>bytes&lt;/code>形式返回&lt;/li>
&lt;li>&lt;code>Popen&lt;/code>: 参数与&lt;code>call&lt;/code>相同，新建&lt;code>Popen&lt;/code>对象即会调用程序，并且将新线程的相关操作封装在了&lt;code>Popen&lt;/code>对象内，包括检查状态，等待等等。&lt;/li>
&lt;/ul>
&lt;p>这些函数或类对象的调用方法与在Shell中直接调用十分相似，并且除了指定参数之外还可以通过&lt;code>stdin&lt;/code>, &lt;code>stdout&lt;/code>, &lt;code>stderr&lt;/code>等参数来指定新进程的输入输出，还可以通过指定&lt;code>shell&lt;/code>参数来让，命令通过Shell进行调用，以利用Shell的一些功能。&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a class="link" href="https://docs.python.org/2/library/os.html#os.spawnl" target="_blank" rel="noopener"
>os.spawn文档&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>&lt;a class="link" href="https://docs.python.org/2/library/os.html#os.spawnl" target="_blank" rel="noopener"
>subprocess文档&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Cython - 入门简介</title><link>https://zyxin.xyz/blog/2017-12/CythonIntro/</link><pubDate>Tue, 05 Dec 2017 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2017-12/CythonIntro/</guid><description>&lt;h2 id="python--cc">Python &amp;amp; C/C++&lt;/h2>
&lt;p>近来用Python用的越来越多，对这种十分灵活的动态语言的哲学也有了较深的理解。虽然Python有不少缺点，如没有强类型，GIL全局锁，没有编译因此效率底下，但正因为其动态性，它非常适合写软件的Prototype。因此一种典型而高效的工作流程是&lt;strong>先用Python调用各种轮子，快速实现软件原型，然后再优化代码，将稳定的部分用C++或其他编译语言进行重写，变成一个供调用的库&lt;/strong>。&lt;/p>
&lt;p>在这个过程中就难免碰到Python与C++相互调用的问题，尤其体现在：&lt;/p>
&lt;ol>
&lt;li>在原型开发阶段，如何将现有的C++库封装成Python能够方便调用的库，避免重造轮子&lt;/li>
&lt;li>当原型开发结束后，如何将Python代码高效地转换成其他语言的代码&lt;/li>
&lt;/ol>
&lt;p>能够完成Python与C/C++相互操作的方式有很多，可以参见&lt;a class="link" href="https://zhuanlan.zhihu.com/p/20150641" target="_blank" rel="noopener"
>知乎的这篇专栏&lt;/a>，但是本文介绍的Cython却鲜有详细或通俗的中文资料。Cython是个易用的Python扩展，在Anaconda等发行包里面都自带了，可以用Python的语法写出Python的C语言扩展。因此我选择这一款扩展库学习，之后也会把相关的学习经验写下来~&lt;/p>
&lt;h2 id="安装与基本使用">安装与基本使用&lt;/h2>
&lt;blockquote>
&lt;p>后文中的环境都是在 Windows10 + Visual Studio 2017 下&lt;/p>
&lt;/blockquote>
&lt;p>Cython在流行的Python发行版本中都有被包含，包括&lt;a class="link" href="http://docs.continuum.io/anaconda/" target="_blank" rel="noopener"
>Anaconda&lt;/a>、&lt;a class="link" href="https://enthought.com/products/canopy/" target="_blank" rel="noopener"
>Canopy&lt;/a>、&lt;a class="link" href="http://www.pythonxy.com/" target="_blank" rel="noopener"
>Pythonxy&lt;/a>和&lt;a class="link" href="http://sagemath.org" target="_blank" rel="noopener"
>Sage&lt;/a>等。如果使用普通的Python的话可以使用pip安装：&lt;code>pip install Cython&lt;/code>。&lt;/p>
&lt;h3 id="简单运行cython代码">简单运行Cython代码&lt;/h3>
&lt;p>从语言层面来说，Cython是一种拓展的Python，其文件的扩展名为&lt;code>.pyx&lt;/code>。这种类型的文件通过编译之后可以变成供Python直接调用的动态链接库（Linux/Mac下是&lt;code>.so&lt;/code>，Windows下是&lt;code>.pyd&lt;/code>）。根据官方文档，主要如下几编译方式：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>(推荐)&lt;/strong> 通过&lt;code>setup.py&lt;/code>中调用&lt;code>Cython.Build&lt;/code>进行编译&lt;/li>
&lt;li>使用&lt;code>pyximport&lt;/code>调用&lt;code>.pyx&lt;/code>文件，这种方法&lt;code>.pyx&lt;/code>文件相当于普通的&lt;code>.py&lt;/code>文件&lt;/li>
&lt;li>在命令行使用&lt;code>cython&lt;/code>命令从&lt;code>.pyx&lt;/code>文件生成&lt;code>.c&lt;/code>文件，再使用外部编译器将&lt;code>.c&lt;/code>文件编译成Python可用的库&lt;/li>
&lt;li>使用&lt;code>Jupyter Notebook&lt;/code>或者&lt;code>Sage Notebook&lt;/code>直接运行Cython代码&lt;/li>
&lt;/ol>
&lt;p>这上面四种方法里&lt;strong>最简单的是第三种方法&lt;/strong>。运行&lt;code>cythonize -i &amp;lt;.pyx File&amp;gt;&lt;/code>即可编译&lt;code>.pyx&lt;/code>成二进制库，并保存在与&lt;code>.pyx&lt;/code>文件相同的目录下。&lt;code>cythonize&lt;/code>命令有其他的参数，可以通过命令行查看。这个命令也可以通过&lt;code>python -m Cython.Build.Cythonize -i &amp;lt;.pyx File&amp;gt;&lt;/code>来完成。&lt;/p>
&lt;p>不过推荐使用的是第一种方法，原理也就是通过指定&lt;code>distutils&lt;/code>或者&lt;code>setuptools&lt;/code>库中的&lt;code>ext_modules&lt;/code>参数来编译Cython代码。以&lt;a class="link" href="http://docs.cython.org/en/latest/src/quickstart/build.html#building-a-cython-module-using-distutils" target="_blank" rel="noopener"
>官方示例&lt;/a>为例，它的&lt;code>setup.py&lt;/code>文件如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">distutils.core&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">setup&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">Cython.Build&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">cythonize&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">setup&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;Hello world app&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ext_modules&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cythonize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;hello.pyx&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中&lt;code>hello.pyx&lt;/code>的代码为&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">say_hello_to&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Hello &lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2">!&amp;#34;&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>编辑保存之后直接运行&lt;code>python setup.py build_ext --inplace&lt;/code>即可进行编译。其中&lt;code>--inplace&lt;/code>参数可以让对应的链接库生成在源代码所在的目录。&lt;/p>
&lt;p>编译中可能遇到的问题有&lt;/p>
&lt;ul>
&lt;li>&lt;code>error: command 'cl.exe' failed: No such file or directory&lt;/code>: 这说明在环境中没有找到C编译器。由于我电脑中安装了Visual Studio，我的解决方法是根据平台使用VS的&lt;strong>x86 Native Command Prompt&lt;/strong>或&lt;strong>x64 Native Command Prompt&lt;/strong>来运行编译命令。此外还可以选择通过&lt;code>python setup.py build_ext --inplace --compiler=mingw32&lt;/code>使用Anaconda内置的MinGW32编译器，不过这种情况下还可能会遇到&lt;a class="link" href="https://stackoverflow.com/questions/24683305/python-cant-install-packages-typeerror-unorderable-types-nonetype-str" target="_blank" rel="noopener"
>内置MinGW32的问题&lt;/a>，具体的解决方法在链接里。&lt;/li>
&lt;/ul>
&lt;p>编译之后直接通过&lt;code>import hello&lt;/code>或&lt;code>from hello import say_hello_to&lt;/code>即可调用这个编译好的库。&lt;/p>
&lt;h3 id="复杂cython工程的setuppy">复杂Cython工程的setup.py&lt;/h3>
&lt;p>如果的Cython工程中有很多&lt;code>.pyx&lt;/code>文件，甚至有很多&lt;code>.cpp&lt;/code>文件需要编译，那么这时候最好使用&lt;code>setup.py&lt;/code>进行编译，并使用&lt;code>Cython.Build.cythonize&lt;/code>模块。具体编写方式如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">distutils.core&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">setup&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">distutils.extension&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Extension&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">Cython.Build&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">cythonize&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">extensions&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Extension&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Module Name&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;file1.pyx&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;file2.cpp&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">include_dirs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">libraries&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">library_dirs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">]),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Extension&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Module 2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">setup&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;XXX&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ext_modules&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cythonize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">extensions&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后的&lt;code>setup&lt;/code>部分还有另一种写法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">setup&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;XXX&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ext_modules&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">extensions&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cmdclass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;build_ext&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Cython&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Build&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">build_ext&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样的写法可以让安装整个库的时候一起执行掉Cython代码的编译和安装。此外，如果要在编译&lt;code>.pyx&lt;/code>和&lt;code>.cpp&lt;/code>时指定语言或者编译参数，在&lt;code>Extension&lt;/code>类的构造函数中添加合适的参数即可。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>本文介绍了Cython的安装与初步使用，看完以后就已经可以动手试试写Cython代码啦~Cython语言的特性也有不少，掌握其中的一小部分就能大大提高你的Python代码的运行效率！这些内容将会在之后的文章中讲述~&lt;/p>
&lt;blockquote>
&lt;p>Cython的完整介绍可以参考&lt;a class="link" href="http://cython.org/" target="_blank" rel="noopener"
>Cython官网&lt;/a>
Cython代码的编译还有其他方法，参见&lt;a class="link" href="http://docs.cython.org/en/latest/src/reference/compilation.html" target="_blank" rel="noopener"
>Cython文档的编译部分&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>Windows10下配置Keras + CNTK (GPU) + Tensorflow (GPU)</title><link>https://zyxin.xyz/blog/2017-09/InstallCNTKKeras/</link><pubDate>Thu, 21 Sep 2017 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2017-09/InstallCNTKKeras/</guid><description>&lt;blockquote>
&lt;p>本文安装时的各软件版本为&lt;/p>
&lt;ul>
&lt;li>Windows 10.0.15063&lt;/li>
&lt;li>Visual Studio 2017 (VS15.2)&lt;/li>
&lt;li>Anaconda3 4.3.25&lt;/li>
&lt;li>CNTK 2.2&lt;/li>
&lt;li>Tensorflow 1.4&lt;/li>
&lt;li>Keras 2.0.6&lt;/li>
&lt;li>NVIDIA Geforce Notebook Driver 376.54&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>配这一波环境又让我对微软爸爸的信仰值飙升一大截！特此记录一下安装过程，虽然步骤十分简单没有什么好写的（笑，但是本着能不再踩的坑就不要再踩的原则，还是记录下来吧~&lt;/p>
&lt;h2 id="安装-cntk">安装 CNTK&lt;/h2>
&lt;p>不得不说我还是非常喜欢CNTK的，不仅因为它是微软爸爸的产品，能在Windows亲儿子上运行，而且性能很不错（关于性能的比较可以参见&lt;a class="link" href="https://github.com/zer0n/deepframeworks/blob/master/README.md" target="_blank" rel="noopener"
>Github一篇评测&lt;/a>、&lt;a class="link" href="https://arxiv.org/abs/1608.07249v7" target="_blank" rel="noopener"
>一篇老文&lt;/a>和&lt;a class="link" href="http://www.datasciencecentral.com/profiles/blogs/search-for-the-fastest-deep-learning-framework-supported-by-keras" target="_blank" rel="noopener"
>一篇新文&lt;/a>），最重要的是它是所有深度学习库里面唯一提供&lt;strong>Pre-built Installation&lt;/strong>的！！不知道多少人在编译Caffe和Tensorflow时被N卡驱动和CUDA、MKL等等安装坑过。。。占空间就罢了，还经常各种报错！而Windows下安装CNTK，由于已经编译好了，就不会碰到这种问题！所以当我得知几个月前Keras已经支持CNTK后端的时候，我立马准备在自己的电脑上装一份了！省的天天跟别人抢服务器= =&lt;/p>
&lt;p>安装流程可以参考&lt;a class="link" href="https://docs.microsoft.com/en-us/cognitive-toolkit/Setup-Windows-Binary-Script" target="_blank" rel="noopener"
>官方教程&lt;/a>。首先就是下载CNTK，我当然是选择下载编译后的包啦，直接进入&lt;a class="link" href="https://github.com/Microsoft/CNTK/releases" target="_blank" rel="noopener"
>CNTK的Release页&lt;/a>找到你需要的版本就可以~（不得再次感叹一声预编译版本好全。。连UWP都有）当然你如果不怕像Linux一样折腾= =那么你可以直接下载源码去编译。&lt;/p>
&lt;p>下载后解压。注意，解压后的位置直接就是之后CNTK运行的位置，因此后文解压到的目录就称作“CNTK目录”了。然后cd进&lt;code>&amp;lt;CNTK目录&amp;gt;\Scripts\install\windows&lt;/code>运行&lt;code>install.bat&lt;/code>即可安装。为了避免cmd把路径识别成两个参数，请把压缩包解压到一个&lt;strong>不含空格的路径&lt;/strong>中。&lt;/p>
&lt;p>如果之前已经装了Anaconda，就可以通过&lt;code>AnacondaBasePath&lt;/code>参数指定Anaconda的位置避免重复安装。这里如果你anaconda的安装位置有空格的话batchfile就会同样因为路径问题用不了了，只能上Powershell直接运行ps1脚本。用管理员模式打开Powershell，先在环境变量中添加ps1的模块位置&lt;code>$Env:PSModulePath=$Env:PSModulePath+&amp;quot;;&amp;lt;CNTK目录&amp;gt;\Scripts\install\windows\ps\Modules&amp;quot;&lt;/code>，然后运行&lt;code>ps/install.ps1 -AnacondaBasePath &amp;quot;&amp;lt;Anaconda安装目录&amp;gt;&amp;quot;&lt;/code>，即可安装。如果遇到&lt;code>无法加载文件，因为在此系统中禁止执行脚本。&lt;/code>的报错，可以运行&lt;code>Set-ExecutionPolicy Bypass&lt;/code>命令（不区分大小写），在运行完脚本后运行&lt;code>Set-Execution Restricted&lt;/code>设置回来。&lt;/p>
&lt;p>此外还可以通过&lt;code>PyVersion&lt;/code>参数来设置conda环境的Python版本，默认的版本是3.5。安装完成后Anaconda中会添加&lt;code>cntk-pyxx&lt;/code>的环境，后两位是你指定的Python版本，后文就用默认的&lt;code>cntk-py35&lt;/code>来表示。&lt;/p>
&lt;p>安装完成后运行&lt;code>&amp;lt;CNTK目录&amp;gt;\Scripts\cntkpy35.bat&lt;/code>设置环境变量，然后会进入&lt;code>cntk-py35&lt;/code>环境。再cd到&lt;code>&amp;lt;CNTK目录&amp;gt;\Tutorials\HelloWorld-LogisticRegression&lt;/code>，运行&lt;code>cntk configFile=lr_bs.cntk makeMode=false command=Train&lt;/code>即可验证安装。&lt;/p>
&lt;h2 id="安装-keras">安装 Keras&lt;/h2>
&lt;p>安装CNTK后安装Keras就很简单了。首先运行&lt;code>activate cntk-py35&lt;/code>进入环境，然后运行&lt;code>pip install keras&lt;/code>即可。&lt;/p>
&lt;p>然后是把Keras后端切换成CNTK，&lt;a class="link" href="https://keras.io/backend/" target="_blank" rel="noopener"
>Keras文档&lt;/a>有对应的说明，只需将&lt;code>%USERPROFILE%\.keras\keras.json&lt;/code>中的&lt;code>backend&lt;/code>值改为&lt;code>cntk&lt;/code>。&lt;/p>
&lt;p>初步测试Keras只需测试&lt;code>import keras&lt;/code>能否成功即可。进一步的测试可以通过运行&lt;a class="link" href="https://github.com/fchollet/keras/blob/master/examples/README.md" target="_blank" rel="noopener"
>Keras的样例脚本&lt;/a>来完成。运行结果如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">(cntk-py35) C:\Users\Jacob&amp;gt;python C:\Users\Jacob\Downloads\mnist_mlp.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Using CNTK backend
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Selected GPU[0] GeForce GTX 850M as the process wide default device.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000 train samples
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">10000 test samples
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_________________________________________________________________
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Layer (type) Output Shape Param #
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">=================================================================
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dense_1 (Dense) (None, 512) 401920
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_________________________________________________________________
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dropout_1 (Dropout) (None, 512) 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_________________________________________________________________
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dense_2 (Dense) (None, 512) 262656
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_________________________________________________________________
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dropout_2 (Dropout) (None, 512) 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_________________________________________________________________
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dense_3 (Dense) (None, 10) 5130
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">=================================================================
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Total params: 669,706
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Trainable params: 669,706
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Non-trainable params: 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_________________________________________________________________
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Train on 60000 samples, validate on 10000 samples
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 1/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">D:\Program Files\Anaconda3\envs\cntk-py35\lib\site-packages\cntk\core.py:361: UserWarning: your data is of type &amp;#34;float64&amp;#34;, but your input variable (uid &amp;#34;Input75&amp;#34;) expects &amp;#34;&amp;lt;class &amp;#39;numpy.float32&amp;#39;&amp;gt;&amp;#34;. Please convert your data beforehand to speed up training.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (sample.dtype, var.uid, str(var.dtype)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 4s - loss: 0.2464 - acc: 0.9248 - val_loss: 0.1097 - val_acc: 0.9653
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 2/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.1035 - acc: 0.9681 - val_loss: 0.0843 - val_acc: 0.9744
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 3/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.0742 - acc: 0.9776 - val_loss: 0.0872 - val_acc: 0.9764
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 4/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.0607 - acc: 0.9822 - val_loss: 0.0688 - val_acc: 0.9804
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 5/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.0502 - acc: 0.9851 - val_loss: 0.0863 - val_acc: 0.9781
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 6/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.0424 - acc: 0.9874 - val_loss: 0.0828 - val_acc: 0.9801
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 7/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.0369 - acc: 0.9890 - val_loss: 0.0758 - val_acc: 0.9812
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 8/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.0367 - acc: 0.9895 - val_loss: 0.0840 - val_acc: 0.9825
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 9/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.0338 - acc: 0.9903 - val_loss: 0.1029 - val_acc: 0.9782
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 10/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.0313 - acc: 0.9912 - val_loss: 0.0837 - val_acc: 0.9827
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 11/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.0273 - acc: 0.9919 - val_loss: 0.1013 - val_acc: 0.9808
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 12/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.0277 - acc: 0.9925 - val_loss: 0.0921 - val_acc: 0.9827
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 13/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.0252 - acc: 0.9931 - val_loss: 0.0900 - val_acc: 0.9832
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 14/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.0268 - acc: 0.9931 - val_loss: 0.1035 - val_acc: 0.9830
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 15/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.0233 - acc: 0.9940 - val_loss: 0.1280 - val_acc: 0.9797
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 16/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.0243 - acc: 0.9942 - val_loss: 0.0998 - val_acc: 0.9830
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 17/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.0222 - acc: 0.9942 - val_loss: 0.1011 - val_acc: 0.9849
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 18/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.0205 - acc: 0.9946 - val_loss: 0.1111 - val_acc: 0.9830
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 19/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.0201 - acc: 0.9951 - val_loss: 0.1302 - val_acc: 0.9801
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 20/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.0206 - acc: 0.9952 - val_loss: 0.1181 - val_acc: 0.9827
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Test loss: 0.11807218486
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Test accuracy: 0.9827
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="安装-tensorflow">安装 Tensorflow&lt;/h2>
&lt;p>Tensorflow虽然没有提供安装即可用的安装包，但是它可以通过&lt;code>pip&lt;/code>和&lt;code>conda&lt;/code>来安装，也是非常方便的，直接&lt;code>pip install tensorflow-gpu&lt;/code>即可。如果想避免CNTK和Tensorflow相互影响，可以专门为Tensorflow也开一个环境。&lt;/p>
&lt;p>Tensorflow的GPU版本需要CUDA和CuDNN的支持，这个是pip无法安装的。独立安装CUDA和CuDNN需要从NVIDIA官网注册下载，也是很麻烦，但而由于CNTK里面是带这两个东西的，因此只需要把PATH设置到CNTK下面即可，非常方便！具体方式是在环境变量&lt;code>PYTHONPATH&lt;/code>中添加&lt;code>&amp;lt;CNTK目录&amp;gt;\cntk&lt;/code>，如果原本没有&lt;code>PYTHONPATH&lt;/code>这个变量就新建一个。&lt;/p>
&lt;p>这样，Tensorflow也很快就安装完成了，修改Keras的后端跑一个测试结果如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">(tf-py35) C:\Users\Jacob&amp;gt;python C:\Users\Jacob\Downloads\mnist_mlp.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Using TensorFlow backend.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000 train samples
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">10000 test samples
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_________________________________________________________________
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Layer (type) Output Shape Param #
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">=================================================================
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dense_1 (Dense) (None, 512) 401920
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_________________________________________________________________
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dropout_1 (Dropout) (None, 512) 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_________________________________________________________________
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dense_2 (Dense) (None, 512) 262656
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_________________________________________________________________
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dropout_2 (Dropout) (None, 512) 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_________________________________________________________________
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dense_3 (Dense) (None, 10) 5130
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">=================================================================
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Total params: 669,706
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Trainable params: 669,706
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Non-trainable params: 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_________________________________________________________________
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Train on 60000 samples, validate on 10000 samples
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 1/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2017-11-19 11:17:30.732744: I C:\tf_jenkins\home\workspace\rel-win\M\windows-gpu\PY\35\tensorflow\core\platform\cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX AVX2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2017-11-19 11:17:31.701106: I C:\tf_jenkins\home\workspace\rel-win\M\windows-gpu\PY\35\tensorflow\core\common_runtime\gpu\gpu_device.cc:1030] Found device 0 with properties:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">name: GeForce GTX 850M major: 5 minor: 0 memoryClockRate(GHz): 0.8625
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pciBusID: 0000:01:00.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">totalMemory: 2.00GiB freeMemory: 1.65GiB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2017-11-19 11:17:31.701257: I C:\tf_jenkins\home\workspace\rel-win\M\windows-gpu\PY\35\tensorflow\core\common_runtime\gpu\gpu_device.cc:1120] Creating TensorFlow device (/device:GPU:0) -&amp;gt; (device: 0, name: GeForce GTX 850M, pci bus id: 0000:01:00.0, compute capability: 5.0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 122s 2ms/step - loss: 0.2460 - acc: 0.9233 - val_loss: 0.1317 - val_acc: 0.9590
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 2/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 6s 96us/step - loss: 0.1023 - acc: 0.9698 - val_loss: 0.0881 - val_acc: 0.9745
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 3/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 6s 95us/step - loss: 0.0762 - acc: 0.9768 - val_loss: 0.0823 - val_acc: 0.9744
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 4/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 5s 91us/step - loss: 0.0612 - acc: 0.9811 - val_loss: 0.0812 - val_acc: 0.9761
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 5/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 6s 98us/step - loss: 0.0514 - acc: 0.9845 - val_loss: 0.0734 - val_acc: 0.9813
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 6/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 6s 102us/step - loss: 0.0454 - acc: 0.9866 - val_loss: 0.0783 - val_acc: 0.9818
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 7/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 6s 93us/step - loss: 0.0388 - acc: 0.9884 - val_loss: 0.0871 - val_acc: 0.9797
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 8/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 6s 95us/step - loss: 0.0354 - acc: 0.9896 - val_loss: 0.0918 - val_acc: 0.9813
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 9/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 6s 96us/step - loss: 0.0330 - acc: 0.9906 - val_loss: 0.0859 - val_acc: 0.9800
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 10/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 6s 103us/step - loss: 0.0308 - acc: 0.9915 - val_loss: 0.0898 - val_acc: 0.9812
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 11/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 5s 89us/step - loss: 0.0261 - acc: 0.9924 - val_loss: 0.0975 - val_acc: 0.9824
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 12/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 6s 103us/step - loss: 0.0266 - acc: 0.9925 - val_loss: 0.0906 - val_acc: 0.9848
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 13/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 6s 102us/step - loss: 0.0248 - acc: 0.9934 - val_loss: 0.0907 - val_acc: 0.9834
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 14/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 6s 96us/step - loss: 0.0224 - acc: 0.9939 - val_loss: 0.1088 - val_acc: 0.9811
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 15/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 6s 97us/step - loss: 0.0217 - acc: 0.9938 - val_loss: 0.0973 - val_acc: 0.9818
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 16/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 6s 97us/step - loss: 0.0202 - acc: 0.9946 - val_loss: 0.1075 - val_acc: 0.9819
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 17/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 6s 99us/step - loss: 0.0197 - acc: 0.9947 - val_loss: 0.1218 - val_acc: 0.9815
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 18/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 6s 96us/step - loss: 0.0208 - acc: 0.9945 - val_loss: 0.1131 - val_acc: 0.9832
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 19/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 6s 93us/step - loss: 0.0190 - acc: 0.9949 - val_loss: 0.1285 - val_acc: 0.9805
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 20/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 6s 94us/step - loss: 0.0185 - acc: 0.9955 - val_loss: 0.1153 - val_acc: 0.9833
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Test loss: 0.115294696707
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Test accuracy: 0.9833
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;em>（可以看出Tensorflow比CNTK要慢不少）&lt;/em>&lt;/p></description></item><item><title>C/C++中的特殊宏</title><link>https://zyxin.xyz/blog/2017-09/SpecialMacrosInCpp/</link><pubDate>Wed, 20 Sep 2017 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2017-09/SpecialMacrosInCpp/</guid><description>&lt;p>在阅读VTK和QT的源码时，遇到了类似于Python中特殊变量形式的宏，如&lt;code>__LINE__&lt;/code>和&lt;code>__FILE__&lt;/code>，这两个宏的用途是作为函数参数返回调用行数和文件名。一时惊奇，原来C里面也有这个内置宏，而且貌似在各大库的Debug模块中都经常被用到。此外也碰到了变长的宏的用法，于是查了一下标准中对宏的描述，做一下笔记，对宏代码很有帮助~&lt;/p>
&lt;blockquote>
&lt;p>文中点击标题的角标即可转到GCC文档对应页面。&lt;/p>
&lt;/blockquote>
&lt;h2 id="stringizing1-字符串化">Stringizing&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> (字符串化)&lt;/h2>
&lt;p>在宏定义中可以将传入的参数原封不动地&lt;strong>变成字符串常量插入代码中&lt;/strong>，使用的方法是利用&lt;code>#&lt;/code>运算符。例如下面的宏&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define WARN_IF(EXPR) \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">do { if (EXPR) \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"> fprintf (stderr, &amp;#34;Warning: &amp;#34; #EXPR &amp;#34;\n&amp;#34;); } \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">while (0)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="n">WARN_IF&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中&lt;code>#EXPR&lt;/code>便是字符串化的参数，在编译时会变成&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">do&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fprintf&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Warning: &amp;#34;&lt;/span> &lt;span class="s">&amp;#34;x == 0&amp;#34;&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>会输出&lt;code>Warning: x == 0&lt;/code>。这一特性可以使得使用宏定义的时候同时输出参数名字或者表达式，便于进行记录。此时若&lt;code>x&lt;/code>本身也是宏的话在&lt;code>#EXPR&lt;/code>中不会展开。如果想让宏&lt;code>x&lt;/code>在&lt;code>#EXPR&lt;/code>中也展开的话，需要再用另一个宏把这个宏包起来即可。&lt;/p>
&lt;h2 id="concatenation2-符号连接">Concatenation&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> (符号连接)&lt;/h2>
&lt;p>有时候向宏内传入的参数不完全是你想要的参数，或者希望通过一个参数展开成多个变量的时候，就可以使用符号连接的宏，使用方法是利用&lt;code>##&lt;/code>运算符。例如假设有一个储存命名函数的结构体&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">command&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用下面的宏可以简洁方便地定义多个结构体&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define COMMAND(NAME) { #NAME, NAME ## _command }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">command&lt;/span> &lt;span class="n">commands&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">COMMAND&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">quit&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">COMMAND&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">help&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中&lt;code>NAME ## _command&lt;/code>的作用就是在&lt;code>NAME&lt;/code>展开后在末尾加上&lt;code>_command&lt;/code>，避免直接连接会导致宏无法被识别的现象。展开后得到&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">command&lt;/span> &lt;span class="n">commands&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="s">&amp;#34;quit&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">quit_command&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="s">&amp;#34;help&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">help_command&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="variadic-macros3-可变参数的">Variadic Macros&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> (可变参数的)&lt;/h2>
&lt;p>可变参数的用法与普通代码中的可变参数用法是一致的，即通过对最后一个参数进行特殊声明来让这个宏可以接受变长的参数。举例如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define eprintf(…) fprintf (stderr, __VA_ARGS__)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define eprintf(args…) fprintf (stderr, args)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这两个宏的展开效果是一样的，如果在代码中插入&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">eprintf&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%s:%d: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">input_file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lineno&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>则会展开成&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">fprintf&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;%s:%d: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">input_file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lineno&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>从上面的代码可以看出，如果使用&lt;code>...&lt;/code>来表示变长参数，那么在宏定义中就用预定义宏变量&lt;code>__VA_ARGS__&lt;/code>来代表这些参数，如果是在某一个参数名的后面加上&lt;code>...&lt;/code>，那么就是用将这个参数变成变长参数。&lt;/p>
&lt;p>另外，变长参数之前可以有普通的参数，如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define eprintf(format, …) fprintf (stderr, format, __VA_ARGS__)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>不过需要注意的是，在标准C中这样的情况下变长参数至少需要输入一个参数，否则在转义时参数末尾会多一个逗号。即&lt;code>eprintf(&amp;quot;success!\n&amp;quot;, );&lt;/code>会变成&lt;code>fprintf(stderr, &amp;quot;success!\n&amp;quot;, );&lt;/code>。在GNU CPP中这个问题可以通过在&lt;code>__VA_ARGS__&lt;/code>前面加上&lt;code>##&lt;/code>符号来解决。&lt;/p>
&lt;h2 id="predefined-macros4-预定义的宏">Predefined Macros&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup> (预定义的宏)&lt;/h2>
&lt;p>在标准中有提供一些内置的宏，可以给调试提供很多方便~&lt;/p>
&lt;ul>
&lt;li>&lt;code>__FILE__&lt;/code>：当前文件的路径名&lt;/li>
&lt;li>&lt;code>__LINE__&lt;/code>：调用处的行号&lt;/li>
&lt;li>&lt;code>__func__&lt;/code>(C99)/&lt;code>__FUNCTION__&lt;/code>(GCC)：调用处所属的函数名&lt;/li>
&lt;li>&lt;code>__DATE__&lt;/code>：处理器上当前的日期&lt;/li>
&lt;li>&lt;code>__TIME__&lt;/code>：处理器上当前的时间&lt;/li>
&lt;li>&lt;code>__STDC_VERSION__&lt;/code>：C标准的版本，例如C11标准下会展开成201103&lt;/li>
&lt;li>&lt;code>__cplusplus&lt;/code>：在C++编译器时会被定义，展开结果同&lt;code>__STDC_VERSION__&lt;/code>
其他还有很多的不在标准中的预定义的宏，具体可以查看编译器的说明。其中GNU C的预定义宏可以参考&lt;a class="link" href="https://gcc.gnu.org/onlinedocs/cpp/Common-Predefined-Macros.html#Common-Predefined-Macros" target="_blank" rel="noopener"
>Common Predefined Macros&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="directives-within-macro-arguments5-在宏参数里修改宏">Directives Within Macro Arguments&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup> (在宏参数里修改宏)&lt;/h2>
&lt;p>GNU编译器还提供了在展开宏的参数时修改宏的功能。。。这个功能非常少用，先举个病态的例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define f(x) x x
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="n">f&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#undef f
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define f 2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这一段语句展开后得到的结果是&lt;code>1 2 1 2&lt;/code>，这就是在参数中修改宏。但是这个宏非常影响阅读，太tricky了，最好还是别用。&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a class="link" href="https://gcc.gnu.org/onlinedocs/cpp/Stringizing.html#Stringizing" target="_blank" rel="noopener"
>GCC文档中的Stringizing部分&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>&lt;a class="link" href="https://gcc.gnu.org/onlinedocs/cpp/Concatenation.html#Concatenation" target="_blank" rel="noopener"
>GCC文档中的Concatenation部分&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>&lt;a class="link" href="https://gcc.gnu.org/onlinedocs/cpp/Variadic-Macros.html#Variadic-Macros" target="_blank" rel="noopener"
>GCC文档中的Variadic部分&lt;/a>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>&lt;a class="link" href="https://gcc.gnu.org/onlinedocs/cpp/Predefined-Macros.html#Predefined-Macros" target="_blank" rel="noopener"
>GCC文档中的预定义宏&lt;/a>&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5">
&lt;p>&lt;a class="link" href="https://gcc.gnu.org/onlinedocs/cpp/Directives-Within-Macro-Arguments.html#Directives-Within-Macro-Arguments" target="_blank" rel="noopener"
>GCC文档中Directives部分&lt;/a>&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item></channel></rss>