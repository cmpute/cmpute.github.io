<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C# on JacobZ</title><link>https://zyxin.xyz/blog/tags/C#/</link><description>Recent content in C# on JacobZ</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 29 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://zyxin.xyz/blog/tags/C#/index.xml" rel="self" type="application/rss+xml"/><item><title>初识Rust - 从一个Python/C++/C#程序员的角度对比Rust</title><link>https://zyxin.xyz/blog/2021-10/FirstGlanceOnRust/</link><pubDate>Fri, 29 Oct 2021 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2021-10/FirstGlanceOnRust/</guid><description>&lt;p>近些年一直有听闻Rust的发展，相比其他新语言（如julia），我觉得Rust是切实解决了一些程序开发的痛点的，并且Rust比较适合作为底层软件开发的语言，我很感兴趣。Rust官方有一本&lt;a class="link" href="https://doc.rust-lang.org/stable/book/" target="_blank" rel="noopener"
>Gitbook教程&lt;/a>，因此我就直接通过阅读它来上手Rust了。&lt;/p>
&lt;p>本文记录一些我在看完这本书之后初步总结的一些Rust与我熟悉的Python/C++/C#之间的各方面的异同。如果你也有Python/C++/C#的编程经验，并且想上手Rust，那么这篇文章应该能帮助你概括性地了解Rust的特性。本文也是我对Python/C++/C#之间特性的一个对比总结，但是我对这些语言的了解也没有那么深，因此如有谬误还请指教。&lt;/p>
&lt;blockquote>
&lt;p>备注：&lt;/p>
&lt;ul>
&lt;li>本文中的代码仅为代码片段，对于Python之外的代码你可能需要将部分代码放在主函数中才能正确运行。&lt;/li>
&lt;li>本文的代码格式以精简为主，没有按照语言的标准格式编写。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="语法">语法&lt;/h2>
&lt;h3 id="赋值">赋值&lt;/h3>
&lt;p>在变量进行赋值的时候，内容的传递有三种模式：传引用、复制、移动。其中最后一种指的是旧内容被复制到新对象中，然后旧对象中的内容变为不可用。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 是传引用&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 引用类型是传引用、值类型是复制&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 都是复制，但是是浅复制&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 默认是复制，但是可以通过&lt;code>std::move&lt;/code>实现移动（需要C++11)&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 默认是移动。复制需要使用&lt;code>.clone()&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="初始化">初始化&lt;/h3>
&lt;p>这几种语言初始化一个对象的语法有不少相似之处，因此列举在这里供比较。
{% tabs Function Code Example %}&lt;/p>
&lt;!-- tab Python -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">##### initialize class instance #####&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Point&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">y&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">##### intialize array #####&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)]&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="c1"># use list algorithmic operator&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)]&lt;/span> &lt;span class="c1"># use list comprehension&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">///// initialize struct instance /////
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">Point&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="n">Point_t&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// declare and initialize
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point_t&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// bracket initialization
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point_t&lt;/span> &lt;span class="n">q&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Point_t&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// initialize on heap
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Point_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Point_t&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">s&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">///// initialize array /////
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point_t&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">// declare without initialization
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point_t&lt;/span> &lt;span class="n">arr2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">{.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// initializer, here the third value is uninitialized
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point_t&lt;/span> &lt;span class="n">arr3&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">{.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// the size of array is inferred to be 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point_t&lt;/span> &lt;span class="n">arr4&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">{.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="p">...&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// range initialize 2nd ~ 5th item
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">arr_2d&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">};&lt;/span> &lt;span class="c1">// you can even initialize 2D array with bracket initialization
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">arr2_2d&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">},{&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">},{&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">}};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// declare the array on heap with 5 items
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">arr5&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Point_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Point_t&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C++ -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">///// initialize class instance /////
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Point&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// C++ will create default constructors with no args, field args and initializer list
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// declare and initialize
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// direct initialize
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point&lt;/span> &lt;span class="nf">q&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// initializer
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// list initializer (C++11)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// aggregate initializer (C++20)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// initialize on heap
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Point&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">u&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">///// initialize array /////
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// C++ supports all initialization method from C, but you might need C++11/20
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// declare the array on heap with 5 items
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]{&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// all initializer syntax can be used here
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">delele&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C# -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-csharp" data-lang="csharp">&lt;span class="line">&lt;span class="cl">&lt;span class="cs">///// initialize class instance /////&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Point&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">X&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">get&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">set&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">Y&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">get&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">set&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Point&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">X&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">Y&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// declare and initialize&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Point&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// constructor&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Point&lt;/span> &lt;span class="n">q&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Point&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Point&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">X&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Y&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// anonymous type&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">var&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">X&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Y&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cs">///// initialize array /////&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Point&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="n">arr&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">// new array with null values (or default value for struct type)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Point&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="n">arr2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Point&lt;/span>&lt;span class="p">[,]&lt;/span> &lt;span class="n">arr2d&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// initialize 2d array&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">var&lt;/span> &lt;span class="n">numbers&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Dictionary&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="c1">// initialize object with indexers&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na"> [7]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;seven&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na"> [9]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;nine&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na"> [13]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;thirteen&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab Rust -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">///// initialize struct instance /////
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Point&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>: &lt;span class="kt">f64&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>: &lt;span class="kt">f64&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>: &lt;span class="mf">1.&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>: &lt;span class="mf">2.&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// rust don&amp;#39;t automatically cast the type
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">q&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>: &lt;span class="mf">2.&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// partial copy from another instance
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mf">2.&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>: &lt;span class="mf">2.&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// using the variable with the same name in scope
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">///// initialize array /////
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">_&lt;/span>: &lt;span class="p">[&lt;/span>&lt;span class="kt">u8&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">arr&lt;/span>: &lt;span class="p">[&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">q&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;p>{% endtabs %}&lt;/p>
&lt;h3 id="只读">只读&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>： 没有什么东西是只读的，你唯一能做的就是hack一些函数，让别人在修改的时候报错&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 有&lt;code>const&lt;/code>关键字，可以定义全局常量或者函数内常量&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 有&lt;code>const&lt;/code>，&lt;code>constexpr&lt;/code>（后者更接近C的&lt;code>const&lt;/code>，需要C++11），成员函数可以单独控制只读性，相当于可以对成员函数的&lt;code>this&lt;/code>参数加上&lt;code>const&lt;/code>&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 有&lt;code>readonly&lt;/code>, &lt;code>const&lt;/code>，前者修饰不变量而后者是编译器常量。C# 9引入了record，可以实现immutable。&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 变量默认都是不可变的，可变需要添加关键字&lt;code>mut&lt;/code>（这个名字可太迷惑了，默认不可变的东西是不是不应该叫变量），成员函数可以通过外置定义的第一个参数单独控制只读性(&lt;code>self&amp;amp;&lt;/code> / &lt;code>mut self&amp;amp;&lt;/code>)，这个逻辑类似C++&lt;/li>
&lt;/ul>
&lt;p>{% tabs Const Code Example %}&lt;/p>
&lt;!-- tab Python -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># usually people follow certain style (like all uppercase) to name the constant variable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">SOME_CONSTANT&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">SOME_CONSTANT&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C++ -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// constexpr is used for compile time constant
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">constexpr&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">SOME_CONSTANT&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">constexpr&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">constexpr_func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// const can be used to describe class members
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Coords&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">shift&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Coords&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">offset&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="nf">sum&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">_x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">_y&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">_x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Coords&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">_x&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">_y&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">// const field must be initialized using initializer list
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// const variables are only able to call const member function
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Coords&lt;/span> &lt;span class="n">coord&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">coord&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// coord.shift() is illegal here
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C# -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-csharp" data-lang="csharp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// `const` is used for compile time constant&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">SOME_CONSTANT&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">SomeType&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">const_field&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// the value still need to be defined in compile time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">const_field2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SomeType&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">string&lt;/span> &lt;span class="n">str_in&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">const_field2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">str_in&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="c1">// readonly field must be initialized in declaration or constructor&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// since C# 7.2, readonly can be used to declare immutable type&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">Coords&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="n">Coords&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">X&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">Y&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">X&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">get&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">init&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">Y&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">get&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">init&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">Sum&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">X&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="n">Y&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="c1">// C# 8.0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// alternatively readonly can be applied to properties individually&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">Coords&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="n">Coords&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">_x&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">Y&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">_x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">X&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="k">get&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">_x&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">Y&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">get&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">init&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="c1">// C# 9.0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab Rust -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// use `const` for compile time constant
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">const&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">SOME_CONSTANT&lt;/span>: &lt;span class="kt">u32&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">some_constant&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// immutable by default
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">some_constant&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// this will shadow the previous definition
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Coords&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>: &lt;span class="kt">f64&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>: &lt;span class="kt">f64&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Coords&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">f64&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// the instance is also immutable in methods
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">offset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Coords&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">offset&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">offset&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">offset&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;p>{% endtabs %}&lt;/p>
&lt;h3 id="全局变量静态成员">全局变量、静态成员&lt;/h3>
&lt;blockquote>
&lt;p>静态成员可以看作从属于某个范围的全局变量&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 支持全局变量，但是在全局范围以外默认不可变，可变需要使用global关键字&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 支持全局变量&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 支持全局变量，并且支持&lt;code>namespace&lt;/code>级别的，支持静态变量，并且支持函数内定义静态变量&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 不支持，可以通过类型的静态变量和静态构造函数实现&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 支持，通过&lt;code>const&lt;/code>或者&lt;code>static&lt;/code>关键字。由于rust无法追踪静态变量的引用，因此使用静态变量需要在&lt;code>unsafe&lt;/code>代码块中。&lt;/li>
&lt;/ul>
&lt;p>{% tabs Global Code Example %}&lt;/p>
&lt;!-- tab Python -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># variables defined in global are global variables&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">counter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">some_func&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># global vars are available in the current module&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">some_func_mod&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">global&lt;/span> &lt;span class="n">counter&lt;/span> &lt;span class="c1"># you need `global` keyword to modify&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">counter&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Player&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">id&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">counter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="c1"># member defined in class is actually a static member&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@staticmethod&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">create_player&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">player&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Player&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">counter&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">player&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// variables defined in global are global variables
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">counter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C++ -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">counter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// this is a global variable
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">namespace&lt;/span> &lt;span class="n">sub&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">sub_counter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// this is a global variable, but here &amp;#34;global&amp;#34; is a namespace
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">counter2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// rarely used, static here means the variable is local to this compliation unit (this source file)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Player&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// static members of a class
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">counter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">Player&lt;/span> &lt;span class="nf">create_player&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">Player&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">counter&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// static variable can be inside a function
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="n">Player&lt;/span> &lt;span class="nf">create_player2&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">counter2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">Player&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">counter2&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C# -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-csharp" data-lang="csharp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// there is no global variable, you have to tie the variable to a class.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// But note that const variable can be in global scope, and you don&amp;#39;t need to declare it as static&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Utility&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">counter&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">some_constant&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">Utility&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">some_constant&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// the static constructor can be used to assign value to static readonly object&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Player&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Player&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">counter&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="n">Player&lt;/span> &lt;span class="n">create_player&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Player&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="p">++);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab Rust -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// you need static keyword to declare global/static variables
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">some_constant&lt;/span>: &lt;span class="kt">i32&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">counter&lt;/span>: &lt;span class="kt">i32&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Player&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">create_player&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">Player&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">some_constant&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// read constant static variable is safe
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">unsafe&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// read and write to mutable static variable is unsafe in rust
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Player&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;p>{% endtabs %}&lt;/p>
&lt;h3 id="异常处理">异常处理：&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>：exception, try catch finally, raise&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: assert, static_assert, throw&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: error code, assert&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: exception, try catch finally, throw&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: &lt;code>Result&lt;/code> 枚举和 &lt;code>panic!&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="空变量空类型">空变量，空类型&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: &lt;code>None&lt;/code>，是个对象，类型为&lt;code>NoneType&lt;/code>&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: &lt;code>(void*)NULL&lt;/code> 空指针，空类型&lt;code>void&lt;/code>&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: &lt;code>nullptr&lt;/code> 空指针, &lt;code>std::Optional&amp;lt;T&amp;gt;&lt;/code>，空类型&lt;code>void&lt;/code>&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: &lt;code>null&lt;/code> 本质上是空指针, &lt;code>Nullable&amp;lt;T&amp;gt;&lt;/code>, &lt;code>?&lt;/code>操作符支持，没有空类型&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 不提供空类型，&lt;code>Option&amp;lt;T&amp;gt;&lt;/code>，&lt;code>?&lt;/code>操作符支持，有个单元类型（unit type）&lt;code>()&lt;/code>可以看作空类型，用于填充类型参数，另外还有&lt;code>!&lt;/code>类型（叫“从不”类型）专门指无返回值的函数或者表达式&lt;/li>
&lt;/ul>
&lt;h3 id="别名">别名&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 类本身也是对象，可以赋值给别的变量。而&lt;code>import .. as ..&lt;/code>语法也可以实现别名&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: &lt;code>typedef&lt;/code>, &lt;code>#define&lt;/code>&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: &lt;code>typedef&lt;/code>, &lt;code>using&lt;/code>, &lt;code>#define&lt;/code>&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: &lt;code>using&lt;/code>&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: &lt;code>type .. = ..&lt;/code>, &lt;code>use ... as&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="函数声明">函数声明&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 支持默认参数，以列表、字典两种方式支持可变参数&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 支持变长参数，不支持默认参数&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 支持变长参数、变长模板参数（variadic type param)，支持默认参数&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 支持默认参数、变长参数(&lt;code>params&lt;/code>)，不支持变长形参&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 不支持默认参数和变长参数，前者一般通过&lt;code>Option&amp;lt;T&amp;gt;&lt;/code>实现，后者一般通过宏实现&lt;/li>
&lt;/ul>
&lt;h3 id="语法糖">&lt;code>?&lt;/code>语法糖&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 可以通过&lt;code>or&lt;/code>变相实现&lt;/li>
&lt;li>&lt;strong>C/C++&lt;/strong>: 无&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: &lt;code>?&lt;/code>可以用在引用类型上，或者&lt;code>Nullable&amp;lt;T&amp;gt;&lt;/code>加值类型上，还有&lt;code>??&lt;/code>操作符&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 可以用在&lt;code>Option&amp;lt;T&amp;gt;&lt;/code>和&lt;code>Result&amp;lt;T, E&amp;gt;&lt;/code>上&lt;/li>
&lt;/ul>
&lt;h3 id="unicode-字符串">Unicode 字符串&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 在Python 2里，&lt;code>bytes&lt;/code>=&lt;code>str&lt;/code>，都表示的是ANSI字符串，而Unicode字符串需要用&lt;code>unicode&lt;/code>类型，常量需要用&lt;code>u&amp;quot;文字&amp;quot;&lt;/code>。在Python 3里，&lt;code>bytes&lt;/code>可以表示ASCII字符串，而&lt;code>str&lt;/code>是支持Unicode了，&lt;code>&amp;quot;文字&amp;quot;&lt;/code>直接就是UTF8字符串。&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 甚至没有专门的字符串类型，只有&lt;code>char&lt;/code>数组&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: &lt;code>std::string&lt;/code>并没有专门支持Unicode，它可以用来存储Unicode字符串，但是没有针对性的处理工具。声明UTF8字符串需要用&lt;code>u8&amp;quot;文字&amp;quot;&lt;/code>格式的前缀。处理Unicode字符一般会选择ICU这个C++库。&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>：&lt;code>String&lt;/code>是带有编码信息的，并且&lt;code>System.Encoding&lt;/code>里面有&lt;code>String&lt;/code>和&lt;code>byte[]&lt;/code>相互转换的工具。&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 最常用的&lt;code>String&lt;/code>字符串是UTF8编码的（好像不支持UTF16？），并且支持Unicode字符的操作（如字符边界等），另外还有&lt;code>str&lt;/code>类型是个slice类型。Rust还提供了&lt;code>CString&lt;/code>来表示ANSI字符串。&lt;/li>
&lt;/ul>
&lt;h3 id="宏">宏&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 不支持&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 仅支持&lt;code>#define&lt;/code>系列和&lt;code>#if&lt;/code>系列&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 支持的非常丰富，甚至有专门的库。。。&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 仅支持&lt;code>#if&lt;/code>系列&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 有三种宏，声明宏（Declarative macro），主要是进行匹配和展开，类似于C/C++用宏来枚举类型；过程宏（Procedural macro），可以解析语法树，从struct结构生成代码；类属性宏（Attribute-like macros），可以从任意代码生成任意代码；类函数宏（Function-like macro），通常用于解析一小段token&lt;/li>
&lt;/ul>
&lt;h3 id="修饰器">修饰器&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: decorator&lt;/li>
&lt;li>&lt;strong>C/C++&lt;/strong>: 无，一小部分功能可以通过宏实现&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: Attribute&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 类属性宏&lt;/li>
&lt;/ul>
&lt;h2 id="类型系统">类型系统&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 有&lt;code>class&lt;/code>，不过类也是对象，是一个用来生成其他对象的对象。&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 只有&lt;code>struct&lt;/code>（和&lt;code>union&lt;/code>）&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 有&lt;code>struct&lt;/code>和&lt;code>class&lt;/code>，但是&lt;code>struct&lt;/code>只是一个成员默认为&lt;code>public&lt;/code>的&lt;code>class&lt;/code>，没有本质区别，是为了兼容C而存在的。&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 只有&lt;code>struct&lt;/code>（&lt;code>unsafe&lt;/code>模式下有&lt;code>union&lt;/code>）&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: &lt;code>struct&lt;/code>、&lt;code>class&lt;/code>、&lt;code>interface&lt;/code>、&lt;code>enum&lt;/code>、&lt;code>delegates&lt;/code>。其中&lt;code>struct&lt;/code>/&lt;code>enum&lt;/code>是值类型、&lt;code>class&lt;/code>/&lt;code>interface&lt;/code>/&lt;code>delegates&lt;/code>都是引用类型，在之间转换会有封箱和拆箱操作。&lt;/li>
&lt;/ul>
&lt;h3 id="定义成员函数methodmember-function">定义成员函数（method/member function）&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 在&lt;code>class&lt;/code>代码块里写，也可以动态给Python对象添加函数（过于牛逼，不过定义了&lt;code>__slot__&lt;/code>的对象除外）&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 没有成员函数一说&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 在&lt;code>class&lt;/code>代码内部写或者使用外部声明语法&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 在&lt;code>class&lt;/code>代码块内部写，但是有个&lt;code>partial&lt;/code>关键字非常给力，可以让一个类的代码块分成几个区域&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 有个&lt;code>impl&lt;/code>代码块，只有外部声明语法，并且如果是泛型的话也得标记上类型参数。在逻辑上更像是C的写法&lt;/li>
&lt;/ul>
&lt;h3 id="强弱类型">强/弱类型&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 弱类型，没有类型检查，只有Python 3.5引入的类型标注。你可以使用&lt;code>mypy&lt;/code>来实现类型标注检查，但是错误的类型并不会影响程序运行。&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 强类型，所有变量和参数均需要声明类型&lt;/li>
&lt;li>&lt;strong>C++/Rust/C#&lt;/strong>: 强类型，在这些语言中，绝大部分情况下变量和参数都拥有固定的类型，但是他们也提供不同程度的类型推断。此外他们也支持均动态类型。&lt;/li>
&lt;/ul>
&lt;h3 id="类型推断">类型推断&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 动态类型，无需推断&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: &lt;code>var&lt;/code>关键字&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: &lt;code>auto&lt;/code>关键字 (C++11)&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 无&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 默认推断，并且推荐能不写类型就不写，交给编译器，这无疑使代码更简洁了。&lt;/li>
&lt;/ul>
&lt;h3 id="动态类型">动态类型&lt;/h3>
&lt;p>动态类型一般仅在强类型中被提及，因为弱类型语言一般不进行类型检查，其指的是类型检查推迟到运行时。动态类型通常可以分为两种，一种是变体类型（Variant），指的是变量可以是几个类型中的任意一种；另一种是任意类型（Any Type），更接近动态类型的本身，指的是变量可以取任意类型。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 弱类型语言&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 支持，有&lt;code>dynamic&lt;/code>关键字可以使类型检查在运行时进行（需要C# 4），通过&lt;code>System.Dynamic.ExpandoObject&lt;/code>和&lt;code>System.Dynamic.DynamicObject&lt;/code>类型实现动态成员，并且还支持匿名类型&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 通过&lt;code>void*&lt;/code>指针可以变相实现任意类型。&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 通过&lt;code>std::variant&amp;lt;...&amp;gt;&lt;/code>和&lt;code>std::any&amp;lt;T&amp;gt;&lt;/code>可以分别实现变体类型和任意类型（均需要C++17)，也可以通过&lt;code>reintepret_cast&lt;/code>进行强制转换。&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 通过&lt;code>Enum&lt;/code>可以实现变体类型，通过trait object（&lt;code>dyn&lt;/code>关键字+&lt;code>Box&lt;/code>）可以部分实现任意类型。
&lt;blockquote>
&lt;p>这里的&lt;code>dynamic&lt;/code>其实是指的dynamic dispatch（动态分发），也就是类型参数在运行时展开。静态分发就类似于C++的模板，而动态分发就更接近C#的运行时泛型。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h3 id="反射内省">反射/内省&lt;/h3>
&lt;p>反射和内省的概念可能只有学过C#的人比较熟悉，它指的是在运行时获取类型的信息，例如所有的方法、所有的成员变量等等。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 通过&lt;code>__dict__&lt;/code>接口，以及&lt;code>hasattr&lt;/code>, &lt;code>getattr&lt;/code>, &lt;code>setattr&lt;/code>三剑客可以实现动态获取类成员。&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 不支持，唯一相关的就是&lt;code>sizeof&lt;/code>关键字，只能获取类型对象的大小。&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 除了&lt;code>sizeof&lt;/code>以外还有&lt;code>typeid&lt;/code>关键字，但是获取的&lt;code>type_info&lt;/code>对象只有名字信息，仅用于比较。&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 通过&lt;code>Object&lt;/code>这个基类所支持的&lt;code>GetType()&lt;/code>方法可以获取类型信息，返回一个&lt;code>Type&lt;/code>对象。这个对象包含了非常丰富的内容，可以获取名字、成员列表、嵌套类型信息等等&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: &lt;code>Any&lt;/code> trait有&lt;code>get_type_id&lt;/code>方法，类似于C++的&lt;code>typeid&lt;/code>，仅用于类型比较。&lt;/li>
&lt;/ul>
&lt;h2 id="面向对象">面向对象&lt;/h2>
&lt;h3 id="封装">封装&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 除C扩展之外，几乎所有对象都是公开的，无法限制访问，只有一个约定俗成的&lt;code>_&lt;/code>和&lt;code>__&lt;/code>习惯（&lt;code>_&lt;/code>开头的变量表示私有成员，形如&lt;code>__xxx__&lt;/code>的变量表示特殊成员）&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 无访问控制，但是编译之后的library一般是无法修改的，因此可以通过选择头文件的内容来阻止访问部分代码。&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: &lt;code>public&lt;/code>/&lt;code>private&lt;/code>/&lt;code>protected&lt;/code>关键字可以指定成员，或者继承的基类的可见度。另外还有&lt;code>friend&lt;/code>关键字指定特定的可见关系，C++还可以通过匿名命名空间实现模块的私有化。&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: &lt;code>public&lt;/code>/&lt;code>private&lt;/code>/&lt;code>protected&lt;/code>关键字类似于C++，但只能修饰类成员。另外还有&lt;code>internal&lt;/code>关键字可以实现仅对同一个二进制内的代码公开的能力。&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 默认模块、类型、成员均为private，有&lt;code>pub&lt;/code>关键字使得祖先可以访问。与其他语言不同的是&lt;code>pub&lt;/code>可以修饰模块，并且其公开性是仅对祖先模块的。&lt;/li>
&lt;/ul>
&lt;h3 id="继承多态">继承、多态&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 可以多继承，使用Mixin的写法是个常用的范式。&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong> 可以多继承，也有trait体系，还有&lt;code>virtual&lt;/code>和&lt;code>override&lt;/code>。菱形问题可以通过虚继承解决。&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 只能继承一个基类，可以继承多个接口。引用类型的基类都是object，而值类型是ValueType（虽然ValueType继承了object，但是编译器会有特别处理）。另外C#还有抽象类（&lt;code>abstract&lt;/code>)，&lt;code>virtual&lt;/code>, &lt;code>override&lt;/code>, &lt;code>sealed&lt;/code>。在C# 8之后支持接口的默认实现。&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 没有继承，但是可以定义和实现trait（即接口），并且接口支持默认实现。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Rust 在书17.1中认为，用继承的方式实现多态已经越来越不主流了，实际在使用时我确实也发现自己的代码里需要使用继承的方法不多，有点同意这个观点，但是我也仍能想到使用继承的场景，尤其是在面向现实问题以及GUI相关的代码中。而在数据结构中其实使用trait系统会更方便（尤其是二叉树定义其node类型的时候）。当然我猜测Rust选择不引入继承系统的原因还可能是它可能会带来的overhead（如果要允许子类实现自己的方法被父类调用，那就必然会需要虚函数，而这会引入vtable产生内存开销）。
一个比较奇怪的设计是Rust的trait支持静态函数（associated function），直觉上来说接口不应该限制静态成员的设计，毕竟接口方法都是与类型实例相关的，C#的接口中就不允许添加静态成员&lt;/p>
&lt;/blockquote>
&lt;h3 id="泛型">泛型&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 动态类型不需要泛型&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong> 有泛型，并且通过&lt;strong>where&lt;/strong>支持类型限制，编译时不展开&lt;/li>
&lt;li>&lt;strong>C&lt;/strong> 无泛型，但是可以通过指针强制转换进行类型变换以支持动态类型&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong> 有模板，在编译时会展开，并且模板的功能远超一般的泛型。模板参数支持整数&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong> 有泛型，并且通过&lt;strong>where&lt;/strong>支持类型限制，但是在编译时会展开。Rust 1.47正在测试模板参数支持整数。&lt;/li>
&lt;/ul>
&lt;h2 id="函数式编程">函数式编程&lt;/h2>
&lt;h3 id="函数对象和闭包">函数对象和闭包&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 函数也是对象，想怎么玩都可以。Python的局部函数可以当作闭包使用&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 仅支持函数指针&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 有匿名函数和lambda函数，还有&lt;code>Delegate&lt;/code>/&lt;code>event&lt;/code>，lambda函数是闭包，并且无需指定如何封装环境内变量&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 有lambda函数和std::function，lambda函数是闭包，并且可以细致地指定如何封装环境内的变量&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 有闭包，可以赋值给&lt;code>Fn&lt;/code> trait，支持局部函数但局部函数不是闭包。封装方式可以通过&lt;code>Fn&lt;/code>/&lt;code>FnMut&lt;/code>/&lt;code>FnOnce&lt;/code>或者&lt;code>move&lt;/code>关键字进行指定。普通的函数指针有&lt;code>fn&lt;/code>类型&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>匿名函数仅仅指不需要指定函数名的函数，而closure是能够使用外部scope变量的函数，一般是匿名函数，但也可以不匿名。lambda函数即匿名函数，有可能是一个闭包&lt;/p>
&lt;/blockquote>
&lt;p>{% tabs Function Code Example %}&lt;/p>
&lt;!-- tab Python -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># normal function&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">func&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">add&lt;/span> &lt;span class="c1"># function is also an object&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># closure, usually used in decorators&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">closure&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">some_value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">increase&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">some_value&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">x&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">increase&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">func&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">closure&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># lambda function (which is a closure)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">prefix&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;INFO:&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">log_handler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">lambda&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">prefix&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// normal function
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// function pointers
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">fn_ptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">fn_cptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C++ -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// normal function
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// function pointers are also supported in C++
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// note that the syntax can be much more complex in C++ than in C
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">fn_ptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">fn_cptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// std::function is a safer pointer implementation
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// (since C++11, you can use boost::function before C++11)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">func&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">add&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// lambda function (which is a closure, since C++11)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">prefix&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;INFO:&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">auto&lt;/span> &lt;span class="n">log_handler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">prefix&lt;/span>&lt;span class="p">](&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">prefix&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">func2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">log_handler&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C# -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-csharp" data-lang="csharp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// normal function&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="k">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// delegates are function pointer types in C#&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span> &lt;span class="k">delegate&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">AddFunc&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">AddFunc&lt;/span> &lt;span class="n">func&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">add&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Func&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">func2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">add&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// there are also predefined delegates&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// C# also provides Event to handle a chain of functions&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// (usually used in GUI applications)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span> &lt;span class="k">event&lt;/span> &lt;span class="n">AddFunc&lt;/span> &lt;span class="n">addEvents&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">addEvents&lt;/span> &lt;span class="p">+=&lt;/span> &lt;span class="n">func&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// lambda function in C#, note that the types of parameter and return value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// are decided by the function type signature&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">string&lt;/span> &lt;span class="n">prefix&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;INFO:&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Func&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">void&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">log_handler&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">Console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">WriteLine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">prefix&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab Rust -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// normal function
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>: &lt;span class="kt">i32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>: &lt;span class="kt">i32&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">i32&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// function pointer has type `fn`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">func&lt;/span>: &lt;span class="nc">fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">i32&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// define and return closure
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// You need to wrap closure with Box in order to return it since the size of closure is unknown for compiler
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">closure&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Box&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">dyn&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">i32&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">some_value&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">increase&lt;/span>: &lt;span class="nb">Fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">i32&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">some_value&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Box&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">increase&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">func_boxed&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">closure&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;p>{% endtabs %}&lt;/p>
&lt;h3 id="模式匹配">模式匹配&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 3.10开始引入支持&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 不支持&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 暂无语言内置支持，但是可以通过魔改模板实现，例如&lt;a class="link" href="https://github.com/solodon4/Mach7" target="_blank" rel="noopener"
>Mach7&lt;/a>&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: C# 7引入&lt;code>switch&lt;/code>支持&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 内置&lt;code>match&lt;/code>支持&lt;/li>
&lt;/ul>
&lt;h3 id="遍历器iterator">遍历器（iterator）&lt;/h3>
&lt;p>关于异步遍历参见后文&lt;a class="link" href="#%e5%bc%82%e6%ad%a5%e5%92%8c%e5%8d%8f%e7%a8%8b" >异步&lt;/a>一节&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 内置&lt;code>iter()&lt;/code>, generator类型, &lt;code>yield&lt;/code>，Python 3.6之后支持&lt;code>async&lt;/code>函数中使用&lt;code>yield&lt;/code>&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 没有语言支持，但是在STL里面定义了一套通用接口，有&lt;code>std::foreach&lt;/code>，也有&lt;code>for(type value: collection)&lt;/code>语句&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 不支持&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: &lt;code>IEnumerable&lt;/code>, &lt;code>foreach&lt;/code>, &lt;code>yield return&lt;/code>。C# 8.0之后引入&lt;code>IAsyncEnumerable&amp;lt;T&amp;gt;&lt;/code>，支持异步返回流（即在async函数中使用&lt;code>yield return&lt;/code>)。(这个功能支持的比Python晚好多= =)&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 容器类型的&lt;code>iter()&lt;/code>方法&lt;/li>
&lt;/ul>
&lt;h3 id="元组tuple">元组（tuple）&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>：内置&lt;code>tuple&lt;/code>类型，不限长度，一个重要区别是python的tuple是不可变(immutable)的, Cython的ctuple&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: &lt;code>std::tuple&lt;/code>，也不限长度，C++17支持解构语法？（structure binding）&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 内置&lt;code>tuple&lt;/code>支持，tuple类型的签名例如(u32, u32)，长度虽然不限，但是有些语法只支持最长12个对象hhhh&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 曾经对tuple的支持只有&lt;code>System.Tuple&amp;lt;T1, T2, ...&amp;gt;&lt;/code>，由于C#不支持变长类型参数，因此这个&lt;code>Tuple&lt;/code>类型变得相当冗余，而且也很麻烦。在C# 7之后引入了tuple的语法，之后使用起来就方便多了&lt;/li>
&lt;/ul>
&lt;h2 id="不安全代码c交互">不安全代码、C交互&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 由于Python的最常用解释器CPython就是基于C的，并提供了丰富且完整的C-&lt;strong>API&lt;/strong>，因此Python对与C交互的支持非常好，这也是Python被常用为胶水语言的原因。调用C-ABI可以使用内置的&lt;code>ctypes&lt;/code>库, 而如果想给C/C++代码写Python API，则可以用Cython、pybind11、boost.Python&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: C#是托管语言，可以使用&lt;code>unsafe&lt;/code>编写操作指针的代码, 利用&lt;code>DLLImport&lt;/code>（P/Invoke）可以调用C-ABI&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: C++本身是C的超集，几乎可以完美兼容C，也就是说C/C++的代码混合编译是没有问题的。另外在&lt;code>extern&lt;/code>代码块中的函数和类不会被混淆（mangle），可以生成C-ABI&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 在Rust中使用&lt;code>unsafe&lt;/code>代码块可以不进行引用检查, &lt;code>extern&lt;/code>代码块可以避免函数签名被混淆（mangle）&lt;/li>
&lt;/ul>
&lt;h2 id="并行和异步">并行和异步&lt;/h2>
&lt;p>由于Rust对变量生命周期的严格管理，在Rust中进行并行和异步会变得非常麻烦，Rust官方专门有一本&lt;a class="link" href="https://rust-lang.github.io/async-book" target="_blank" rel="noopener"
>独立的书&lt;/a>介绍相关的异步内容，在这我就不细展开Rust的用例了，仅介绍大致的用法，留个印象。&lt;del>因为我也还没学会&lt;/del>&lt;/p>
&lt;blockquote>
&lt;p>关于协程、线程、进程之间的区别可以参考&lt;a class="link" href="https://zyxin.xyz/blog/2019-11/ParallelismInPythonAndCsharp/" >我之前的这篇博客&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;h3 id="异步和协程">异步和协程&lt;/h3>
&lt;p>我对Python和C#的异步都有一定的使用经验，对C++的也略有了解，不得不说还是C#的异步语法使用起来最舒服。这也是部分得益于托管语言带来的好处，像C/C++/Rust想要实现异步就需要非常麻烦的语法和生命周期管理。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: Python 3.5引入了&lt;code>async&lt;/code>，&lt;code>await&lt;/code>关键字，并且有&lt;code>asyncio&lt;/code>库实现各个层级的异步封装（封装过多反而导致使用起来很摸不着头脑）&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 没有内置支持&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: &lt;code>&amp;lt;future&amp;gt;&lt;/code>库提供了异步的初步支持，C++20引入&lt;code>co_await&lt;/code>，终于在语言层面支持了程序流中插入异步块，不过真是太不elegant了，并且还只主要是给库的开发者用的。另外好像C++的协程默认都是单开线程的，而不像是其他语言可以进行单线程协程。&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 从C# 5.0引入了&lt;code>async&lt;/code>，&lt;code>await&lt;/code>关键字，应该是这些语言中引入最早的，也是支持最简明的，最容易上手的。C# 7.0后await的对象可以自定义类型了。&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 有&lt;code>async&lt;/code>, &lt;code>await&lt;/code>关键字支持&lt;/li>
&lt;/ul>
&lt;p>{% tabs Async Code Example %}&lt;/p>
&lt;!-- tab Python -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">asyncio&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># define and use async function&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">io_task&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;fake io processing...&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">await&lt;/span> &lt;span class="n">asyncio&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># launch the task in the current thread&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">asyncio&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_event_loop&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run_until_complete&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">io_task&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C++ -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// before C++20
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;future&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;thread&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">bool&lt;/span> &lt;span class="nf">io_task&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;fake io processing&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">this_thread&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">sleep_for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">chrono&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">seconds&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">future&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">bool&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">fut&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">async&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">io_task&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// start a thread to run the task
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">bool&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fut&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// wait for the result
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// co_await has been introduced in C++20, but it&amp;#39;s still not ready to use
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C# -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-csharp" data-lang="csharp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">using&lt;/span> &lt;span class="nn">System.Threading.Tasks&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span> &lt;span class="n">Task&lt;/span> &lt;span class="n">io_task&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// the return type for async functions is void / Task / Task&amp;lt;T&amp;gt;. For WinRT, you&amp;#39;ll need IAsyncOperation in place of Task&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">WriteLine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;fake io processing...&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">await&lt;/span> &lt;span class="n">Task&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Delay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">io_task&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">Wait&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// start the coroutine and wait for its completion, very intuitive&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">io_task_detached&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">await&lt;/span> &lt;span class="n">io_task&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">io_task_detached&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// start the coroutine and don&amp;#39;t wait for it.&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab Rust -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">std&lt;/span>::&lt;span class="n">time&lt;/span>::&lt;span class="n">Duration&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">async_std&lt;/span>::&lt;span class="n">task&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// async function has normal return types
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">io_task&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;fake io processing...&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">task&lt;/span>::&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Duration&lt;/span>::&lt;span class="n">from_secs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// async block returns a Future&amp;lt;T&amp;gt; object
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">task&lt;/span>::&lt;span class="n">block_on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">io_task&lt;/span>&lt;span class="p">()})&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;p>{% endtabs %}&lt;/p>
&lt;h3 id="线程">线程&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 虽然Python提供了&lt;code>threading&lt;/code>库，但是由于CPython全局锁的存在，实际上通常情况下同时只能执行一个线程，只有在进行IO操作的时候threading会非常游泳&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 在POSIX系统上通常使用&lt;code>pthread&lt;/code>库，而在MSVC下面则可以使用&lt;code>pthread_win32&lt;/code>或者Windows API&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: &lt;code>&amp;lt;thread&amp;gt;&lt;/code>库提供了线程的相关支持（需要C++11）&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: &lt;code>System.Threading&lt;/code>提供了线程的相关支持&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: &lt;code>std::thread&lt;/code>标准模块中提供了线程的相关支持，不过由于Rust对变量声明周期的管理，写代码时经常需要用到&lt;code>Mutex&lt;/code>和&lt;code>Arc&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="进程">进程&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 在&lt;code>os&lt;/code>和&lt;code>subprocess&lt;/code>库中提供了创建进程的函数。另外Python还在&lt;code>multiprocessing&lt;/code>库中则是提供了非常方便的MPI接口，这是Python比其他语言都好用的地方，可能也算是对全局锁的补偿把。&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 在POSIX系统上通常使用&lt;code>unistd.h&lt;/code>中的&lt;code>fork&lt;/code>，而在MSVC下可以使用Windows API&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 标准库中并没有提供支持，可以用&lt;code>boost.process&lt;/code>库来解决&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: &lt;code>System.Diagnostics&lt;/code>中的&lt;code>Process&lt;/code>类提供了相关支持&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: &lt;code>std::process&lt;/code>标准模块中提供了进程相关支持。&lt;/li>
&lt;/ul>
&lt;h2 id="包管理器">包管理器&lt;/h2>
&lt;p>为什么要专门拎出来这一点，是因为包管理是我放弃julia的最大理由。。。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: &lt;code>pip&lt;/code>挺不错，安装方便使用简单；&lt;code>conda&lt;/code>功能更强大，更方便支持带C扩展的包，但是性能差&lt;/li>
&lt;li>&lt;strong>C/C++&lt;/strong>: 一般都依赖Linux的包管理器。在Mac上有&lt;code>brew&lt;/code>，而在Windows上只到最近&lt;code>vcpkg&lt;/code>的出现才算勉强有了可用的包管理。总体而言还是没有好用的包管理器，甚至编译体系都有好几种（&lt;code>conf&lt;/code>/&lt;code>make&lt;/code>, &lt;code>autoconf&lt;/code>, &lt;code>CMake&lt;/code>, Qt的&lt;code>qmake&lt;/code>, Boost的&lt;code>b2&lt;/code>, Visual Studio的&lt;code>nmake&lt;/code>, &amp;hellip;），这也是C++挺劝退的点。&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: &lt;code>nuget&lt;/code>，算不上好用但好在有宇宙第一IDE——VS的支持。&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: &lt;code>cargo&lt;/code>，目前的体验都挺友好的~设计上比较像&lt;code>npm&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="常用数据结构">常用数据结构&lt;/h2>
&lt;p>下表总结了各个语言中常用数据结构的对应关系（非严格对应，他们的实现上或多或少有点区别）&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Python&lt;/th>
&lt;th>C++&lt;/th>
&lt;th>C#&lt;/th>
&lt;th>Rust&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>list&lt;/code>&lt;/td>
&lt;td>&lt;code>vector&lt;/code>&lt;/td>
&lt;td>&lt;code>List&lt;/code>&lt;/td>
&lt;td>&lt;code>Vec&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SortedDict&lt;/code>&lt;/td>
&lt;td>&lt;code>map&lt;/code>&lt;/td>
&lt;td>&lt;code>SortedDictionary&lt;/code>&lt;/td>
&lt;td>&lt;code>BTreeMap&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>dict&lt;/code>&lt;/td>
&lt;td>&lt;code>unordered_map&lt;/code>&lt;/td>
&lt;td>&lt;code>Dictionary&lt;/code>&lt;/td>
&lt;td>&lt;code>HashMap&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SortedSet &lt;/code>&lt;/td>
&lt;td>&lt;code>set&lt;/code>&lt;/td>
&lt;td>&lt;code>SortedSet&lt;/code>&lt;/td>
&lt;td>&lt;code>BTreeSet&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>set&lt;/code>&lt;/td>
&lt;td>&lt;code>unordered_set&lt;/code>&lt;/td>
&lt;td>&lt;code>Set&lt;/code>&lt;/td>
&lt;td>&lt;code>HashSet&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>&lt;code>function&lt;/code>&lt;/td>
&lt;td>&lt;code>Action&lt;/code>/&lt;code>Func&lt;/code>&lt;/td>
&lt;td>&lt;code>Fn&lt;/code>/&lt;code>FnMut&lt;/code>/&lt;code>FnOnce&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>&lt;code>list&lt;/code>&lt;/td>
&lt;td>&lt;code>LinkedList&lt;/code>&lt;/td>
&lt;td>&lt;code>LinkedList&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>deque&lt;/code>&lt;/td>
&lt;td>&lt;code>deque&lt;/code>&lt;/td>
&lt;td>&lt;code>Queue&lt;/code>&lt;/td>
&lt;td>&lt;code>VecDeque&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>heapify&lt;/code>&lt;/td>
&lt;td>&lt;code>make_heap&lt;/code>&lt;/td>
&lt;td>&lt;code>PriorityQueue&lt;/code>&lt;/td>
&lt;td>&lt;code>BinaryHeap&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>&lt;code>unique_ptr&lt;/code>&lt;/td>
&lt;td>-&lt;/td>
&lt;td>&lt;code>Box&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>&lt;code>smart_ptr&lt;/code>&lt;/td>
&lt;td>-&lt;/td>
&lt;td>&lt;code>Rc&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>另外，C++ &lt;code>std::const_cast&lt;/code> 可以在 Rust 中用&lt;code>Cell&amp;lt;T&amp;gt;&lt;/code>和&lt;code>RefCell&amp;lt;T&amp;gt;&lt;/code>起到类似效果(对应引用类型和指针类型？)&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="rust特有的特性">Rust特有的特性&lt;/h2>
&lt;p>在别的语言里面没有的概念，以及Rust独特的语法特性如下&lt;/p>
&lt;ul>
&lt;li>引用检查（Borrow checker）&lt;/li>
&lt;li>生命周期（Lifetime）声明&lt;/li>
&lt;li>&lt;code>{}&lt;/code>代码块和&lt;code>if&lt;/code>、&lt;code>else&lt;/code>、&lt;code>break&lt;/code>也都是表达式，而非语句&lt;/li>
&lt;li>功能强大的宏系统&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>总而言之，语法设计上最优雅的我觉得还是C#和Python，功能和性能最强大的还是C++，最简单和底层的还是C，但是Rust至少有望替代C，这也是我为什么学习这些语言的原因。Rust有一些语法，虽然套用了同一个格式，但是却有很多是编译器特殊支持的（最常见的就是跟Trait相关的，如&lt;code>Box&lt;/code>），这就使得Rust有时候很不优雅，关于这一点可以看&lt;a class="link" href="https://tuna.moe/event/2021/rust/" target="_blank" rel="noopener"
>TUNA的讲座&lt;/a>。&lt;/p>
&lt;p>本文仅为我读完Rust官方入门教材之后的总结，之后有实战经验了我可能会再写一些心得吧~&lt;/p>
&lt;blockquote>
&lt;p>另外在总结本文的时候还发现了一个&lt;a class="link" href="https://ttu.github.io/kotlin-is-like-csharp/" target="_blank" rel="noopener"
>对比Kotlin和C#的网页&lt;/a>，挺有意思的，贴在这供参考&lt;/p>
&lt;/blockquote></description></item><item><title>进程、线程与协程 (C# vs Python)</title><link>https://zyxin.xyz/blog/2019-11/ParallelismInPythonAndCsharp/</link><pubDate>Thu, 07 Nov 2019 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2019-11/ParallelismInPythonAndCsharp/</guid><description>&lt;p>近来由于项目需要，接触了一下一直没去了解过的Python异步语法，发现和之前我熟悉的C#有很多不同。在深入Python的异步逻辑之后，由于Python在语法上保留了很多语言机制的细节（比如成员函数的&lt;code>self&lt;/code>参数），我反而对C#的异步有了更深的了解。这里就来重新梳理一下各种并行方法的区别，以及他们在C#和Python上实现的区别。（这里只讨论单机的并行机制。）&lt;/p>
&lt;p>总的来说，并行机制主要有进程(Process)、线程(Thread)和协程(Coroutine)，其并行实现的开销依次递减，但是他们对每个任务的鲁棒性也是依次递减的。进程是操作系统资源分配的最小单元，线程则是能够被CPU并行处理的最小单元，而协程则是目前实现“并行”的最简单方法。一个进程中可以有多个线程，而一个线程中可以有多个协程。他们具体在特性上有以下区别&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>进程&lt;/th>
&lt;th>线程&lt;/th>
&lt;th>协程&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>独立内存堆&lt;/td>
&lt;td>√&lt;/td>
&lt;td>×&lt;/td>
&lt;td>×&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>独立处理器（可硬件并行）&lt;/td>
&lt;td>√&lt;/td>
&lt;td>√&lt;/td>
&lt;td>×&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>独立上下文&lt;/td>
&lt;td>√&lt;/td>
&lt;td>√&lt;/td>
&lt;td>×&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>独立栈、寄存器状态&lt;/td>
&lt;td>√&lt;/td>
&lt;td>√&lt;/td>
&lt;td>√&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="进程">进程&lt;/h2>
&lt;p>进程是系统层面实现并行的机制了，进程管理是现代操作系统的一大核心之一。进程之间互不影响，操作系统会保证一个程序崩溃了，其他程序以及系统内核不会崩溃。操作系统还会提供其他的进程管理功能，例如&lt;a class="link" href="https://en.wikipedia.org/wiki/Scheduling_%28computing%29" target="_blank" rel="noopener"
>进程调度&lt;/a>、设置进程优先级等等。不同语言底层对进程接口的实现实际上都是对系统接口的封装。&lt;/p>
&lt;h3 id="一些概念">一些概念&lt;/h3>
&lt;p>与进程相关的概念通常都是操作系统课程的必修知识哈哈：&lt;/p>
&lt;ul>
&lt;li>进程间通信(Inter-process communiation, IPC)：故名思意。常用手段有管道、共享内存、信号量(Semaphore)、消息队列等。&lt;/li>
&lt;li>管道(Pipe)：管道大概是进程间通信的最常用方式？分命名管道和匿名管道, 进程双方均可往其中读写数据。&lt;/li>
&lt;li>远程过程调用(Remote procedure call): 远程过程调用通过特定的消息序列化手段，可以实现进程间通信，其使用形式是把一个“远程”的函数在本地进行执行。&lt;/li>
&lt;li>进程锁：如果为了避免多个进程访问同一个资源的冲突的话，就会用到进程锁，其实现方法有&lt;a class="link" href="https://blog.csdn.net/luansxx/article/details/7736618" target="_blank" rel="noopener"
>管道、信号量&lt;/a>、以及文件锁等。&lt;/li>
&lt;li>文件锁：文件锁是实现进程互斥的一种常用手段，只需要建立空文件句柄并锁上就可了~并且文件锁还能做到权限控制，非常方便~&lt;/li>
&lt;/ul>
&lt;h3 id="c35">C#&lt;/h3>
&lt;p>C#中对进程控制的模块主要通过&lt;a class="link" href="https://docs.microsoft.com/dotnet/api/system.diagnostics.process" target="_blank" rel="noopener"
>&lt;code>System.Diagnostics.Process&lt;/code>&lt;/a>实现，可以实现建立进程、管理进程等，还可以指定具体的内存映射参数，如虚拟内存的页大小。而对管道的支持则是在&lt;code>Process&lt;/code>类中有一部分，以及在&lt;a class="link" href="https://docs.microsoft.com/en-us/dotnet/api/system.io.pipes" target="_blank" rel="noopener"
>&lt;code>System.IO.Pipe&lt;/code>&lt;/a>里面有更全面的接口。我觉得这样的命名空间分类是挺合理的，&lt;code>Process&lt;/code>类的API其实只能用来进行程序调用和系统诊断，而&lt;code>Pipe&lt;/code>则由于它和&lt;code>Stream&lt;/code>的概念比较符合，因此归在IO空间下是合适的。&lt;/p>
&lt;h3 id="python">Python&lt;/h3>
&lt;p>Python中对进程的控制以及通信方法的实现都在&lt;code>multiprocess&lt;/code>包里，它的一些具体使用方法可以参考&lt;a class="link" href="https://zyxin.xyz/blog/2017-12/PythonCall/" >另一篇之前的博文&lt;/a>。值得一提的是，Python中还针对Unix系统提供了&lt;code>fcntl&lt;/code>, &lt;code>posix&lt;/code>等库专门用来调用系统底层API，这些API有部分是和进程有关的。相关内容还是查阅对应的资料会比较清楚~&lt;/p>
&lt;h2 id="线程">线程&lt;/h2>
&lt;p>线程是进程中细化的并行机制，线程的实现也需要用到操作系统的接口，不过线程的创建的管理基本都是在进程内部完成的。由于线程之间不独立内存空间，因此在C++这种能够随意操作内存的语言中，一个线程崩了，这个进程也大概率就崩了。但是在C#和Python中，由于有比较完善的Exception机制，并且没有什么机会直接操作内存，一般线程崩了主进程还是能接着跑的。多线程想必应该是大家用的最多的并行方法了~&lt;/p>
&lt;h3 id="一些概念-1">一些概念&lt;/h3>
&lt;p>在线程里面又有一些新的概念&lt;/p>
&lt;ul>
&lt;li>线程池(Thread pool)：线程池与内存池相似，都是为了避免频繁新建和销毁线程(or 内存)而造成额外的开销&lt;/li>
&lt;li>线程锁：线程锁与进程锁相似，是为了避免线程间访问同样的资源而产生冲突（例如&lt;a class="link" href="https://stackoverflow.com/questions/34510/what-is-a-race-condition" target="_blank" rel="noopener"
>race condition&lt;/a>）。线程间产生访问冲突非常常见，因此程序员掌握线程锁的使用是非常必要的。线程锁在C++中的&lt;code>&amp;lt;mutex&amp;gt;&lt;/code>有非常全面的实现。这里面锁的类型具有代表性，分为条件锁、自旋锁等等，具体区别可以参考&lt;a class="link" href="https://blog.csdn.net/bian_qing_quan11/article/details/73734157" target="_blank" rel="noopener"
>这篇博客&lt;/a>。C++的多线程非常令人头大&amp;hellip;这里就不展开了。&lt;/li>
&lt;li>事件(Event)：在多线程体系中，事件是一种常用于线程同步的机制，如果线程需要在运行过程中等待其他线程的运行，就可以使用事件机制。&lt;/li>
&lt;/ul>
&lt;h3 id="c35-1">C#&lt;/h3>
&lt;p>C#中与线程相关的模块在&lt;a class="link" href="https://docs.microsoft.com/dotnet/api/system.threading" target="_blank" rel="noopener"
>&lt;code>System.Threading&lt;/code>&lt;/a>空间下。&lt;code>System.Threading.Thread&lt;/code>提供了线程实现的类，使用delegate即可创建线程对象。这个空间底下也提供了&lt;code>SpinLock&lt;/code>、&lt;code>Semaphore&lt;/code>、&lt;code>Mutex&lt;/code>等线程锁，以及&lt;code>AutoResetEvent&lt;/code>实现了事件机制。&lt;code>System.Threading.ThreadPool&lt;/code>则提供了线程池的实现。另外需要指出的是C#提供了&lt;code>lock&lt;/code>关键字，只需对冲突的对象使用&lt;code>lock&lt;/code>锁上，那么在其对应的上下文中就能够避免冲突。&lt;/p>
&lt;h3 id="python-1">Python&lt;/h3>
&lt;p>Python中与线程相关的对象在&lt;a class="link" href="https://docs.python.org/library/threading.html" target="_blank" rel="noopener"
>&lt;code>threading&lt;/code>&lt;/a>模块中，其中&lt;code>Thread&lt;/code>类提供了线程实现，&lt;code>Lock&lt;/code>, &lt;code>Semaphore&lt;/code>提供了线程锁，&lt;code>Event&lt;/code>实现了事件机制。Python中可以使用&lt;code>with lock:&lt;/code>这样的块实现与C#&lt;code>lock&lt;/code>相似的语法，但是这个地方的lock仍然需要自己声明，不如C#和Java中的&lt;code>lock&lt;/code>用着方便。&lt;/p>
&lt;p>总体而言C#和Python对多线程机制的支持都比较全面，然而CPython有一个臭名昭著的&lt;a class="link" href="http://cenalulu.github.io/python/gil-in-python/" target="_blank" rel="noopener"
>全局锁GIL&lt;/a>，使得其多线程效率大幅下降。因此在很多Python库中，大家宁愿使用&lt;code>multiprocess&lt;/code>多进程来进行并行（即便需要处理进程间通信的问题），也不愿使用&lt;code>threading&lt;/code>来完成并行任务。这一点上不得不说Python辣鸡！&lt;/p>
&lt;h2 id="协程">协程&lt;/h2>
&lt;p>协程应该是21世纪才用的比较多的技术了，并且这个概念应该是在Go里面提的最多。在前文我提到协程是并行时打了引号，这是因为协程本质上还是同一个时刻只能干一件事，没法利用硬件并行，因此我们形容协程都是用“异步”(Asychronized)而不是“并行”(Parallel)。异步是与同步相对的，只要程序能一会干点这个，一会干点那个，不按顺序来，那就可以称作异步了。协程的广泛应用是由于近些年大型服务器的负载越来越大，并发需求越来越高（&lt;del>同时剁手的人越来越多&lt;/del>），多任务切换的开销越来越不可忽视，因此协程这个开销最小的方法就被广泛应用了。协程实际上不是一个比线程更小的概念，而是另一类概念（并行/串行 vs 异步/同步)。协程的特点是一个任务能够跑到一半就暂停，然后把状态存起来，等到需要的东西备齐了以后再把状态复原接着跑；至于暂停之前和之后是不是在同一个线程上跑、有没有跟别的任务一块跑并不重要。因此实际上协程是回调(Callback)机制的一个封装升级。&lt;/p>
&lt;p>实际上不依赖于系统线程的并行技术不止协程一种：
&lt;blockquote>
&lt;p>&lt;p>A &lt;a class="link" href="http://en.wikipedia.org/wiki/Fiber_%28computer_science%29" target="_blank" rel="noopener"
>Fiber&lt;/a> is a lightweight thread that uses cooperative multitasking instead of preemptive multitasking. A running fiber must explicitly &amp;ldquo;yield&amp;rdquo; to allow another fiber to run, which makes their implementation much easier than kernel or user threads.&lt;/p>
&lt;p>A &lt;a class="link" href="http://en.wikipedia.org/wiki/Coroutine" target="_blank" rel="noopener"
>Coroutine&lt;/a> is a component that generalizes a subroutine to allow multiple entry points for suspending and resuming execution at certain locations. Unlike subroutines, coroutines can exit by calling other coroutines, which may later return to the point where they were invoked in the original coroutine.&lt;/p>
&lt;p>A &lt;a class="link" href="http://en.wikipedia.org/wiki/Green_threads" target="_blank" rel="noopener"
>Green Thread&lt;/a> is a thread that is scheduled by a virtual machine (VM) instead of natively by the underlying operating system. Green threads emulate multithreaded environments without relying on any native OS capabilities, and they are managed in user space instead of kernel space, enabling them to work in environments that do not have native thread support.&lt;/p>
&lt;/p>&lt;span class="cite">&lt;span>― &lt;/span>&lt;span>Robert Harvey, &lt;/span>&lt;a href="https://softwareengineering.stackexchange.com/a/254141">&lt;cite>@StackExchange&lt;/cite>&lt;/a>&lt;/span>&lt;/blockquote>&lt;/p>
&lt;h3 id="一些概念-2">一些概念&lt;/h3>
&lt;ul>
&lt;li>事件循环(Event loop)：事件循环是一种非常简单的实现异步的机制，简而言之就是维护一个队列，然后把队列里的任务挨个执行，而任务随时随地可以被添加进队列。&lt;/li>
&lt;li>异步执行/等待(async/await)：这两个关键词在多个语言中都有出现。async用来修饰函数，说明这个函数可以异步执行；await用来等待异步函数的结束，如果没有结束就把当前任务搁着。&lt;/li>
&lt;/ul>
&lt;h3 id="c35-2">C#&lt;/h3>
&lt;p>C#中没有协程的概念，C#在5.0版本中引入的&lt;code>async&lt;/code>/&lt;code>await&lt;/code>关键字提供了异步执行的接口。据我所知C#应该是最早一批引入这个概念的语言了，并且C#里面async和await的使用非常顺滑~。C#的async/await调度与Go一样，都是通过线程池实现，因此性能也非常不错。C#中与async/await有关的接口在&lt;a class="link" href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks%60" target="_blank" rel="noopener"
>&lt;code>System.Threading.Tasks&lt;/code>&lt;/a>下，里面的&lt;code>Task&lt;/code>类型是对能够await的对象的封装。&lt;/p>
&lt;p>C#中也有用到Event loop来实现异步的地方，一般是在UI相关的函数中，例如整个C#里面的&lt;code>event&lt;/code>机制都是通过事件循环来实现的。使用事件循环来完成与UI相关的异步应该是非常标准的做法了，例如Qt里面也有&lt;code>QEventLoop&lt;/code>来实现UI的异步回调。与Event loop相关的是Dispatcher机制，Dispatcher可以将指定任务加进事件循环中执行，例如在WPF中可以用Window的Dispatcher在其他线程中将任务加进UI主线程。&lt;/p>
&lt;p>另外需要指出的是C#还可以通过&lt;code>yield&lt;/code>关键词实现异步，&lt;code>yield return&lt;/code>可能是C#最早的异步机制了，不过功能有限，只能与&lt;code>IEnumerable&lt;/code>合作使用。C#中有一些协程的库（如Unity里的）就是使用&lt;code>yield&lt;/code>机制来实现的。具体怎么使用&lt;code>yield&lt;/code>还请去学习C#的语法~&lt;/p>
&lt;h3 id="python-2">Python&lt;/h3>
&lt;p>Python对异步的支持就来的比较晚了，直到&lt;a class="link" href="https://www.python.org/dev/peps/pep-0492/" target="_blank" rel="noopener"
>PEP 492&lt;/a>才正式加入了对&lt;code>async&lt;/code>关键字的支持，放在了&lt;code>asyncio&lt;/code>模块中。Python对这对关键词的实现又很辣鸡了，&lt;a class="link" href="https://robertoprevato.github.io/Comparisons-of-async-await/" target="_blank" rel="noopener"
>采用的是Event loop机制来实现&lt;/a>（可能是因为多线程性能太差了吧= =）。最让人蛋疼是为了执行异步函数你还需要自己开event loop，如果你之前开过一个了，那你还需要把之前那个loop找回来，然后dispatch进去，这是何其难受！。。&lt;/p>
&lt;p>Python中只要对象有&lt;code>__await__&lt;/code>、&lt;code>__aiter__&lt;/code>或者&lt;code>__aenter__&lt;/code>就可以分别支持&lt;code>await&lt;/code>、&lt;code>async for&lt;/code>和&lt;code>async with&lt;/code>的代码块。Python还设计了三个相关概念：Coroutine代表异步对象、Task代表异步执行计划、Future代表异步执行结果。。何必呢？？？像C#用一个Task代表全部不行吗？再配合event loop的接口，就产生了&lt;code>create_task&lt;/code>、&lt;code>run_coroutine_threadsafe&lt;/code>、&lt;code>run_until_complete&lt;/code>、&lt;code>run_in_executor&lt;/code>等我总是搞不清区别的函数。。。我爱C#！&lt;/p>
&lt;hr>
&lt;p>以上是我对C#和Python中异步机制的总结，我对各语言底层的了解并不深，如有错漏还请指点~&lt;/p></description></item><item><title>PowerShell快速上手（针对有C#经验者）</title><link>https://zyxin.xyz/blog/2018-11/PowerShellForCSharpProgrammer/</link><pubDate>Fri, 02 Nov 2018 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2018-11/PowerShellForCSharpProgrammer/</guid><description>&lt;p>PowerShell是微软一个非常棒的产品，终于改变了人们对Windows下命令行的一片鄙视。一直以来都很想学学PowerShell，这样我就不用使用Python作为手边的脚本语言了，对进行一些文件操作、系统操作而言PowerShell还是要比Python来的方便。另外由于有不少C#的经验，因此PowerShell能够调用.NET库的特性也能够充分利用起来，并且实际发现C#的经验让我学习PowerShell快了不少（当然使用bash、CMake这些脚本的经验应该也帮上忙了吧）。本文就是一篇针对有C#经验的用户的PowerShell上手教程，当然如果你有F#、IronPython等基于.NET的脚本经验那就更好了。&lt;/p>
&lt;blockquote>
&lt;p>Note: 后文中PowerShell简称PS。&lt;/p>
&lt;/blockquote>
&lt;h2 id="powershell脚本的运行方法">PowerShell脚本的运行方法&lt;/h2>
&lt;p>PowerShell本质是一个脚本环境/脚本语言。在PS中，语句从第一行开始依次执行，而不像普通程序一样会有一个显式的程序入口（Entry），并且PS的每一行命令（语句）都不用使用结尾标志（如C家族的;）。因此PS脚本的编写将会非常直观，想要输出&lt;code>Hello World&lt;/code>只需一行语句即可：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo &lt;/span>&lt;span class="s2">&amp;#34;Hello World&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行一段PS脚本有两种方式，一种是在PS交互命令行中直接将命令输入，例如你可以直接在PS命令行中输入&lt;code>35+2&lt;/code>，或者&lt;code>$env:Path.GetType()&lt;/code>等复杂语句；另一种则是将脚本写在&lt;code>.ps1&lt;/code>文件中，然后运行&lt;code>.ps1&lt;/code>文件即可。这与大部分脚本语言运行的方法是一致的。&lt;/p>
&lt;p>需要指出的是Windows下PS脚本运行是受到系统的限制的，默认系统配置下，如果再PowerShell窗口中直接运行&lt;code>.ps1&lt;/code>脚本，PS会提示&lt;em>File cannot be loaded because running scripts is disabled on this system.&lt;/em>。解决这个问题有两种方式&lt;/p>
&lt;ol>
&lt;li>将系统中Windows PowerShell执行策略改为“Bypass”，这个可以通过在PS中运行以下命令完成
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Set-ExecutionPolicy&lt;/span> &lt;span class="n">Bypass&lt;/span> &lt;span class="n">-Scope&lt;/span> &lt;span class="n">CurrentUser&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Set-ExecutionPolicy&lt;/span> &lt;span class="n">Bypass&lt;/span> &lt;span class="n">-Scope&lt;/span> &lt;span class="k">Process&lt;/span> &lt;span class="c"># 仅在当前PS进程中生效。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>使用&lt;code>powershell -noprofile -executionpolicy bypass -file &amp;lt;文件路径&amp;gt; [参数]&lt;/code>来运行脚本，这是用户友好的方法。由于该命令可以通过cmd或者PS执行，因此可以通过&lt;code>.bat&lt;/code>文件封装这个命令，以达到双击运行的效果。&lt;/li>
&lt;/ol>
&lt;h2 id="命令-or-参数-or-字符串">命令 or 参数 or 字符串？&lt;/h2>
&lt;p>PowerShell中变量名均以&lt;code>$&lt;/code>开头。与bash、CMake风格相似的是，PS中的内容如果不以&lt;code>$&lt;/code>或者&lt;code>-&lt;/code>开头则默认都是命令或者字符串，例如在&lt;code>echo Hello World&lt;/code>这样的语句中，&lt;code>echo&lt;/code>是命令，&lt;code>Hello&lt;/code>和&lt;code>World&lt;/code>都是命令的参数并且都是字符串类型。在PS中，命令/函数的调用有两种形式：&lt;/p>
&lt;ol>
&lt;li>命令形式：&lt;code>&amp;lt;命令&amp;gt; [参数1] .. [-参数名2 &amp;lt;参数2&amp;gt;] ..&lt;/code>，如&lt;code>Get-ChildItem C:\Windows\* -Include *.exe&lt;/code>。在这类形式中，参数默认都是字符串，在不含空格时都可以不打引号。这里的命令主要是PS内置的命令（cmdlet）或者别名（alias），通常是一个首字母大写的单词或者用短横连接的两个首字母大写单词。&lt;/li>
&lt;li>函数形式: &lt;code>[对象.]函数(参数1, 参数2, ..)&lt;/code>，如&lt;code>&amp;quot;abcd&amp;quot;.Endswith(&amp;quot;cd&amp;quot;)&lt;/code>。在这类形式中，参数需要通过引号来明确指定是字符串。通过这样的方法使用的是.NET的函数，写起来就和C#没什么区别。&lt;/li>
&lt;/ol>
&lt;p>另外，PowerShell支持管道，因此对于命令形式来说可以通过&lt;code>&amp;lt;命令1&amp;gt; | &amp;lt;命令2&amp;gt; | ..&lt;/code>的形式来进行链式调用并且传递参数，而函数形式就没法进行链式调用了。&lt;/p>
&lt;h2 id="net交互interop">.NET交互（Interop）&lt;/h2>
&lt;p>PowerShell本身是用C#编写的，并且其内部运行环境也是基于.NET的，因此PS与.NET交互十分简单。&lt;/p>
&lt;h3 id="powershell对象">PowerShell对象&lt;/h3>
&lt;p>PS中的对象均为.NET中的对象，因此PS变量可以直接当作.NET对象进行操作，例如下列语句：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="mf">123&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">ToString&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c"># 报错，因为123既不是变量也不是命令&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="p">([&lt;/span>&lt;span class="no">int&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="mf">123&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="py">ToString&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c"># 这里将字符串123转换成了System.Int32变量&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mf">123&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">Dir &lt;/span>&lt;span class="n">C:&lt;/span>&lt;span class="p">\).&lt;/span>&lt;span class="py">GetType&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="py">Name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Object&lt;/span>&lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">Get-Item&lt;/span> &lt;span class="n">HKCU&lt;/span>&lt;span class="err">:&lt;/span>&lt;span class="p">\&lt;/span>&lt;span class="n">Software&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="py">GetType&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="py">FullName&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Microsoft&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">Win32&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">RegistryKey&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>PS不仅能操作对象，还能够直接创建对象&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># PS中创建.NET对象&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">New-Object&lt;/span> &lt;span class="n">-TypeName&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">Version&lt;/span> &lt;span class="n">-ArgumentList&lt;/span> &lt;span class="s2">&amp;#34;1.2.3.4&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Major&lt;/span> &lt;span class="n">Minor&lt;/span> &lt;span class="n">Build&lt;/span> &lt;span class="n">Revision&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">-----&lt;/span> &lt;span class="p">-----&lt;/span> &lt;span class="p">-----&lt;/span> &lt;span class="p">--------&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mf">1&lt;/span> &lt;span class="mf">2&lt;/span> &lt;span class="mf">3&lt;/span> &lt;span class="mf">4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c"># PowerShell中的Object对象操作&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="nv">$var&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">New-Object&lt;/span> &lt;span class="n">object&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="nv">$var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">GetType&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="py">Name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">Object&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">Add-Member&lt;/span> &lt;span class="n">-InputObject&lt;/span> &lt;span class="nv">$var&lt;/span> &lt;span class="n">-Name&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="n">-Value&lt;/span> &lt;span class="mf">123&lt;/span> &lt;span class="n">-MemberType&lt;/span> &lt;span class="n">NoteProperty&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="nv">$var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">Value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mf">123&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过&lt;code>Add-Member&lt;/code>和&lt;code>Get-Member&lt;/code>命令，PS不仅能够完成.NET中的反射（Reflection），还能够完成类似匿名对象（Anonymous Object）的创建，这个十分有用！&lt;/p>
&lt;h3 id="powershell中操作net类">PowerShell中操作.NET类&lt;/h3>
&lt;p>在PS中可以直接调用.NET库中的类进行操作&lt;/p>
&lt;ol>
&lt;li>新建对象：&lt;code>New-Object -TypeName System.Version -ArgumentList &amp;quot;1.2.3.4&amp;quot;&lt;/code>&lt;/li>
&lt;li>强制转换：&lt;code>[int]&amp;quot;1234&amp;quot;&lt;/code>（等同于&lt;code>[System.Int32]&amp;quot;1234&amp;quot;&lt;/code>）&lt;/li>
&lt;li>调用静态函数： &lt;code>[System.DateTime]::Parse(&amp;quot;2012-10-13 23:42:55&amp;quot;)&lt;/code>
有了这些操作，PowerShell已经完全可以当一个C#脚本引擎了~&lt;/li>
&lt;/ol>
&lt;h2 id="操作符httpsdocsmicrosoftcompowershellmodulemicrosoftpowershellcoreaboutabout_operators">&lt;a class="link" href="https://docs.microsoft.com/powershell/module/microsoft.powershell.core/about/about_operators" target="_blank" rel="noopener"
>操作符&lt;/a>&lt;/h2>
&lt;p>在利用PS写逻辑流程时就会发现，除了加减乘除外，C#的很多关键字和操作符都不能直接使用。在PS中，这些操作符都变成了命令或者以&lt;code>-&lt;/code>开头的命令符了。下表列出了常用的操作符：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>PS操作符&lt;/th>
&lt;th>C#操作符&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="https://docs.microsoft.com/powershell/module/microsoft.powershell.core/about/about_comparison_operators" target="_blank" rel="noopener"
>&lt;strong>比较&lt;/strong>&lt;/a>&lt;/td>
&lt;td>&lt;code>-eq&lt;/code>&lt;/td>
&lt;td>&lt;code>==&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>比较&lt;/td>
&lt;td>&lt;code>-ne&lt;/code>&lt;/td>
&lt;td>&lt;code>!=&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>比较&lt;/td>
&lt;td>&lt;code>-gt&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>比较&lt;/td>
&lt;td>&lt;code>-ge&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;gt;=&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>比较&lt;/td>
&lt;td>&lt;code>-lt&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;lt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>比较&lt;/td>
&lt;td>&lt;code>-le&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;lt;=&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://docs.microsoft.com/powershell/module/microsoft.powershell.core/about/about_type_operators" target="_blank" rel="noopener"
>&lt;strong>类型&lt;/strong>&lt;/a>&lt;/td>
&lt;td>&lt;code>-is&lt;/code>&lt;/td>
&lt;td>&lt;code>is&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>类型&lt;/td>
&lt;td>&lt;code>-as&lt;/code>&lt;/td>
&lt;td>&lt;code>as&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://docs.microsoft.com/powershell/module/microsoft.powershell.core/about/about_logical_operators" target="_blank" rel="noopener"
>&lt;strong>逻辑&lt;/strong>&lt;/a>&lt;/td>
&lt;td>&lt;code>-and&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;amp;&amp;amp;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>逻辑&lt;/td>
&lt;td>&lt;code>-or&lt;/code>&lt;/td>
&lt;td>&lt;code>||&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>逻辑&lt;/td>
&lt;td>&lt;code>-xor&lt;/code>&lt;/td>
&lt;td>&lt;code>^&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>逻辑&lt;/td>
&lt;td>&lt;code>-not&lt;/code>&lt;/td>
&lt;td>&lt;code>!&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://docs.microsoft.com/powershell/module/microsoft.powershell.core/about/about_arithmetic_operators" target="_blank" rel="noopener"
>&lt;strong>运算&lt;/strong>&lt;/a>&lt;/td>
&lt;td>&lt;code>-band&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;amp;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>运算&lt;/td>
&lt;td>&lt;code>-bnot&lt;/code>&lt;/td>
&lt;td>&lt;code>~&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>运算&lt;/td>
&lt;td>&lt;code>-bor&lt;/code>&lt;/td>
&lt;td>&lt;code>|&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>运算&lt;/td>
&lt;td>&lt;code>-bxor&lt;/code>&lt;/td>
&lt;td>&lt;code>^&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>运算&lt;/td>
&lt;td>&lt;code>-shl&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;lt;&amp;lt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>运算&lt;/td>
&lt;td>&lt;code>-shr&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;gt;&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>运算&lt;/td>
&lt;td>&lt;code>-bxor&lt;/code>&lt;/td>
&lt;td>&lt;code>^&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>另外需要注意的是&lt;code>&amp;gt;&lt;/code>、&lt;code>&amp;gt;&amp;gt;&lt;/code>等等运算符在PS中是重定向运算符。&lt;/p>
&lt;/blockquote>
&lt;p>尽管名字不一样，但是这些操作符的用法还是一样的。另外PS中还定义了一些.NET中没有的操作符，这些操作符通常很实用，如：&lt;/p>
&lt;ul>
&lt;li>&lt;code>-contains&lt;/code>：返回集合包含元素&lt;/li>
&lt;li>&lt;code>-in&lt;/code>：返回元素是否被集合包含&lt;/li>
&lt;li>&lt;code>-like&lt;/code>: 返回字符串是否与通配式匹配（&lt;a class="link" href="https://en.wikipedia.org/wiki/Wildcard_character" target="_blank" rel="noopener"
>Wildcard Pattern&lt;/a>）&lt;/li>
&lt;li>&lt;code>-match&lt;/code>: 返回字符串是否与正则表达式匹配（&lt;a class="link" href="https://en.wikipedia.org/wiki/Regular_expression" target="_blank" rel="noopener"
>Regex&lt;/a>）&lt;/li>
&lt;li>&lt;code>-f&lt;/code>: 等价于&lt;code>String.Format()&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="powershell驱动httpsdocsmicrosoftcompowershellscriptinggetting-startedcookbooksmanaging-windows-powershell-drives">&lt;a class="link" href="https://docs.microsoft.com/powershell/scripting/getting-started/cookbooks/managing-windows-powershell-drives" target="_blank" rel="noopener"
>PowerShell“驱动”&lt;/a>&lt;/h2>
&lt;p>“驱动”（Drive）是PowerShell中很有意思的一个概念，PowerShell提供了一种统一的接口来管理层次信息系统，包括文件系统（FileSystem）、注册表（Registry）、证书（Certificate）、环境变量（Environment），甚至包括当前会话的变量（Variable）和函数（Function）。这些“Drive”支持统一的一套接口，这就非常的有趣了233。&lt;/p>
&lt;p>通过&lt;code>Get-PSDrive&lt;/code>命令我们可以获得当前PowerShell会话支持的驱动，在我的电脑上该命令的运行结果如下（省去部分内容）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Name Provider Root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">---- -------- ----
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Alias Alias
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">C FileSystem C:\
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Cert Certificate \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">D FileSystem D:\
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">E FileSystem E:\
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Env Environment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Function Function
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">G FileSystem G:\
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">HKCU Registry HKEY_CURRENT_USER
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">HKLM Registry HKEY_LOCAL_MACHINE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Variable Variable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">WSMan WSMan
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过这些驱动，&lt;code>ls env:\Path&lt;/code>就能够获取系统环境变量，&lt;code>HKCU:\SOFTWARE&lt;/code>就可以获取注册表键，十分方便。但是需要注意的是这些驱动获得的对象的类型是不同的，如文件对象会是&lt;code>System.IO.FileInfo&lt;/code>，而注册表键则是&lt;code>Microsoft.Win32.RegistryKey&lt;/code>。&lt;/p>
&lt;h3 id="驱动统一支持的命令接口">驱动统一支持的命令接口&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Cmdlet&lt;/th>
&lt;th>Alias&lt;/th>
&lt;th>用途&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Get-ChildItem&lt;/td>
&lt;td>dir, ls&lt;/td>
&lt;td>获取当前位置的所有子项&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Set-Location&lt;/td>
&lt;td>cd&lt;/td>
&lt;td>更改当前位置&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>New-Item&lt;/td>
&lt;td>md, mkdir&lt;/td>
&lt;td>在指定位置新建对象&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Get-Item&lt;/td>
&lt;td>&lt;/td>
&lt;td>获取该位置对应的对象&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Remove-Item&lt;/td>
&lt;td>del, rm&lt;/td>
&lt;td>删除指定位置的对象&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>New-ItemProperty&lt;/td>
&lt;td>&lt;/td>
&lt;td>新建对象的属性&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Get-ItemProperty&lt;/td>
&lt;td>&lt;/td>
&lt;td>获取对象的属性（如文件属性，注册表键）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Set-ItemProperty&lt;/td>
&lt;td>&lt;/td>
&lt;td>设置对象的属性&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Clear-ItemProperty&lt;/td>
&lt;td>&lt;/td>
&lt;td>删除对象的属性&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Test-Path&lt;/td>
&lt;td>&lt;/td>
&lt;td>判断指定位置是否存在对象&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;p>看完这些内容以后你就可以像写C#一样开始写PowerShell啦。更加详细的教程可以参见下方的参考资料~&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>参考资料&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://docs.microsoft.com/powershell/" target="_blank" rel="noopener"
>微软官方文档&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.pstips.net/powershell-online-tutorials" target="_blank" rel="noopener"
>PowerShell在线教程&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item></channel></rss>