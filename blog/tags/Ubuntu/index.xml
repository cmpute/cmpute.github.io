<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ubuntu on JacobZ</title><link>https://zyxin.xyz/blog/tags/Ubuntu/</link><description>Recent content in Ubuntu on JacobZ</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 02 Aug 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://zyxin.xyz/blog/tags/Ubuntu/index.xml" rel="self" type="application/rss+xml"/><item><title>ROS参数设置方法总结</title><link>https://zyxin.xyz/blog/2019-08/ROSParameter/</link><pubDate>Fri, 02 Aug 2019 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2019-08/ROSParameter/</guid><description>&lt;p>最近在研究ROS节点（ROS Node）的参数设置方式，由于系统比较复杂，并且会变得更加复杂，因此需要一个统一的参数设置方式。这里就比较一下四种参数获取方案的区别～&lt;/p>
&lt;h2 id="命令行文件输入">命令行/文件输入&lt;/h2>
&lt;p>由于ROS节点本身也只是普通的可执行程序，因此它可以正常地从启动参数中读取参数，另外也可以从配置文件中读取参数。这两种方法都是常规程序读取参数的方法。从命令行中读取参数有C++的&lt;code>Boost.Program_options&lt;/code>库和Python的&lt;code>argparse&lt;/code>的库，用来解析命令行参数输入，支持可选参数、重复参数、参数分组等等。而从文件输入的话，常见的设置格式有&lt;code>json&lt;/code>，&lt;code>yaml&lt;/code>，&lt;code>toml&lt;/code>甚至&lt;code>ini&lt;/code>等等。从这些文件中读取比较灵活，但是无法利用ROS框架，并且需要自行统一格式。&lt;/p>
&lt;h2 id="参数服务器">参数服务器&lt;/h2>
&lt;p>ROS中很有名的支持参数设置的结构是参数服务器，参数服务器是一个包含在master结点里的集中式字典结构，在ROS的Wiki上有介绍：&lt;a class="link" href="http://wiki.ros.org/Parameter%20Server/cn" target="_blank" rel="noopener"
>中文&lt;/a>|&lt;a class="link" href="http://wiki.ros.org/Parameter%20Server" target="_blank" rel="noopener"
>英文&lt;/a>。参数服务器也可以从文件中读取参数，文件格式是&lt;code>yaml&lt;/code>，读取的方式是在&lt;code>.launch&lt;/code>文件中添加&lt;code>&amp;lt;rosparam&amp;gt;&lt;/code>标签，并指定键值或者文件路径。&lt;/p>
&lt;h3 id="rosparam">rosparam&lt;/h3>
&lt;p>&lt;code>rosparam&lt;/code>是操作参数服务器的一套工具，你可以从程序中调用&lt;code>rosparam&lt;/code>的API，或者使用命令行工具对指定参数进行动态更改。命令行的用法参见&lt;a class="link" href="http://wiki.ros.org/rosparam#rosparam_command-line_tool" target="_blank" rel="noopener"
>ROS Wiki&lt;/a>&lt;/p>
&lt;h3 id="rosrun">rosrun&lt;/h3>
&lt;p>&lt;code>rosrun&lt;/code>和&lt;code>roslaunch&lt;/code>都是运行ROS模块的工具，其中&lt;code>rosrun&lt;/code>只能运行单个节点，而&lt;code>roslaunch&lt;/code>则支持更加复杂的启动体系。用&lt;code>rosrun&lt;/code>进行参数服务器的设置的方式是在启动参数中添加&lt;code>key:=value&lt;/code>。&lt;/p>
&lt;h3 id="roslaunch">roslaunch&lt;/h3>
&lt;p>用&lt;code>roslaunch&lt;/code>进行参数服务器的设置的方式是在文件中添加&lt;code>&amp;lt;param&amp;gt;&lt;/code>标签。&lt;param>&lt;code>和&lt;/code>&lt;rosparam>&lt;code>实质上功能相似，前者设置的是单个参数，而后者针对的是一套参数。另外&lt;/code>roslaunch&lt;code>还支持从命令行读取参数，格式也是&lt;/code>key:=value&lt;code>，读取进来后存入的是&lt;/code>&lt;arg>&lt;code>标签，而如果要使用这类参数的话需要使用&lt;/code>roslaunch&lt;code>的&lt;/code>$(arg key)&lt;code>语法。具体的&lt;/code>roslaunch`语法&lt;a class="link" href="http://wiki.ros.org/roslaunch/XML" target="_blank" rel="noopener"
>参见ROS Wiki&lt;/a>。&lt;/p>
&lt;h3 id="dynamic_reconfigure">dynamic_reconfigure&lt;/h3>
&lt;p>ROS中还提供了另一种机制叫&lt;a class="link" href="http://wiki.ros.org/dynamic_reconfigure" target="_blank" rel="noopener"
>&lt;code>dynamic_reconfigure&lt;/code>&lt;/a>也可以用来动态设置参数。它与参数服务器的区别在于它的参数更新是基于回调机制，而参数服务器实际上是轮询机制。ROS程序会主动询问参数服务器以获取参数，而&lt;code>dynamic_reconfigure&lt;/code>则是动态地告知ROS程序参数更新事件。&lt;code>dynamic_reconfigure&lt;/code>的使用方法是定义&lt;code>.cfg&lt;/code>文件，并在其中通过Python程序定义可动态设置的参数。&lt;code>cfg&lt;/code>文件在CMakeLists.txt中需要注册，注册语法及顺序参见&lt;a class="link" href="http://wiki.ros.org/catkin/CMakeLists.txt#Example" target="_blank" rel="noopener"
>CMakeLists.txt的Wiki&lt;/a>和&lt;a class="link" href="http://wiki.ros.org/dynamic_reconfigure/Tutorials/HowToWriteYourFirstCfgFile" target="_blank" rel="noopener"
>&lt;code>.cfg&lt;/code>文件的Wiki&lt;/a>。个人感觉实际上&lt;code>dynamic_reconfigure&lt;/code>实现的效果和自己定义ROS服务来更新参数是相似的。&lt;/p>
&lt;blockquote>
&lt;p>最后总结下来的话ROS参数服务器还是最常用的，但是参数服务器的名称同样也有命名空间的限制，也分私有参数和公有参数等等。。这两个的区别我其实现在还没有搞清楚= =&lt;/p>
&lt;/blockquote></description></item><item><title>折腾 KDE Neon 的配置</title><link>https://zyxin.xyz/blog/2019-07/ConfigureKdeNeon/</link><pubDate>Wed, 31 Jul 2019 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2019-07/ConfigureKdeNeon/</guid><description>&lt;img src="https://zyxin.xyz/blog/2019-07/ConfigureKdeNeon/neon.png" alt="Featured image of post 折腾 KDE Neon 的配置" />&lt;p>最近我已经将KDE Neon作为主力系统之一了，Plasma桌面真的是太好用了！于是给家里的主机也装上了Neon，这篇文章就记录一下安装配置和美化的过程啦～&lt;/p>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2019-07/ConfigureKdeNeon/neon.png"
width="2560"
height="1080"
loading="lazy"
alt="Plasma桌面折腾结果～"
class="gallery-image"
data-flex-grow="237"
data-flex-basis="568px"
>&lt;/p>
&lt;h2 id="系统安装及boot设置">系统安装及Boot设置&lt;/h2>
&lt;h3 id="双系统安装">双系统安装&lt;/h3>
&lt;p>安装Neon还是非常简单的，直接从官网下载系统镜像，烧进U盘正常安装即可。不过由于我选择的是与Windows双系统安装，因此需要手动分区。这里要纠正一下之前[安装双系统博文中的分区方式](https://zyxin.xyz/blog/2018-09/LinuxDualSystem/。现在的Linux系统实际上只需要给根目录&lt;code>/&lt;/code>分区就可以了，&lt;code>/home&lt;/code>分区以前建议单独分区的原因是为了便于系统的更改，这样在修改系统分区之后（如重装系统）还能保留&lt;code>/home&lt;/code>底下的文件，但其实现在很多系统已经能做到重装并保留&lt;code>/home&lt;/code>分区了，这时对于我这小硬盘的笔记本来说反而导致空间利用不灵活。而交换分区&lt;code>/swap&lt;/code>也是没有必要的，交换分区的存在类似于Windows下的虚拟内存，用硬盘的一部分来虚拟内存，避免内存不足的情况。新Linux可以利用交换文件完成类似功能，因此不必专门给&lt;code>/swap&lt;/code>分区。（不过我猜专门给它分个区可能能提高性能？）。最后最关键的是不要给&lt;code>/boot&lt;/code>分区了,&lt;code>/boot&lt;/code>分区是为了保证boot文件区不被占满，以致无法正常启动。利用EFI方式启动的系统只需要有&lt;code>efi&lt;/code>分区即可，而且多个系统可以利用同一个EFI分区。因此只需告诉安装器使用EFI分区作为启动分区，关于EFI的详细信息请看后文~&lt;/p>
&lt;blockquote>
&lt;p>分区的时候还看到了之前的系统里有标记为&lt;code>msr&lt;/code>的分区，是Windows的预留分区，好像具体没啥用。这里贴&lt;a class="link" href="http://bbs.wuyou.net/forum.php?mod=viewthread&amp;amp;tid=374959" target="_blank" rel="noopener"
>一篇考据文章&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;h3 id="refind设置">rEFind设置&lt;/h3>
&lt;p>安装完系统后我还准备安装rEFind来替代默认的bootloader——GRUB(GRUB实在是太丑了&amp;hellip;)。由于Windows10禁掉了启动其他系统的入口，因此之前只能用GRUB。rEFind是一个更加强大的启动器，并且可自定义的部分也多～rEFind是基于UEFI的启动器，相比GRUB能支持更多的功能，甚至可以在启动阶段就加载一些驱动，这就使得rEFind可以有高清的界面哈哈哈～关于UEFI与传统BIOS的区别可以参考&lt;a class="link" href="https://wiki.manjaro.org/index.php?title=Some_basics_of_MBR_v/s_GPT_and_BIOS_v/s_UEFI" target="_blank" rel="noopener"
>Manjaro论坛的这篇帖子&lt;/a>和&lt;a class="link" href="https://www.zhihu.com/question/36313402/answer/66947818" target="_blank" rel="noopener"
>知乎的这篇帖子&lt;/a>。UEFI和BIOS都是主板ROM程序启动后调用的bootloader类型，当bootloader通过UEFI或者BIOS过程加载之后就会启动系统内核。而UEFI相比BIOS可以支持更大的bootloader和并行启动，是现在大部分系统采用的启动方式～&lt;/p>
&lt;p>rEFind在Ubuntu下安装非常方便～直接用&lt;code>apt&lt;/code>安装即可。安装完重启就会发现默认进入的已经是rEFind界面了～不过默认的界面主题非常丑，也有很多多余的启动项，因此还需要稍微设置一下～设置教程网上有很多了，主题在官网和搜索引擎也都可以搜到，这里就不赘述。我的设置文件&lt;a class="link" href="https://github.com/cmpute/dotfiles/blob/master/refind/user.conf" target="_blank" rel="noopener"
>可以在Github找到&lt;/a>～我保留了GRUB的chainload入口，避免rEFind崩了进不去系统，然后另外添加了一个直接启动Linux内核的入口。最后界面效果如下，还是很赏心悦目的～&lt;/p>
&lt;p>{% asset_img refind.jpg rEFInd界面照片 %}&lt;/p>
&lt;p>安装完成以后就接着&lt;a class="link" href="https://zyxin.xyz/blog/2018-09/LinuxDualSystem/" >参考之前的文章&lt;/a>继续设置就可以了。其中最必要的两个操作是把系统时间调成&lt;code>local-rtc&lt;/code>避免与Windows冲突，以及把Plasma环境中鼠标单击的行为从打开改为选择。。。&lt;/p>
&lt;h3 id="输入法安装">输入法安装&lt;/h3>
&lt;p>Neon安装完后默认是没有输入法的，不过反正中文输入法都是要安装&lt;a class="link" href="https://wiki.archlinux.org/index.php/fcitx" target="_blank" rel="noopener"
>fcitx&lt;/a>的，还避免了使用ibus的冲突～fcitx的安装&lt;a class="link" href="https://blog.ctang.me/the-first-story-on-medium-8a132a1b62fe" target="_blank" rel="noopener"
>参考这篇文章&lt;/a>即可，其中&lt;code>fcitx-qt-impanel&lt;/code>这个包可以让fcitx的状态显示在任务栏里～最近好像fcitx在开发新版本(&lt;a class="link" href="https://a-wing.top/linux/2018/08/14/fcitx5.html" target="_blank" rel="noopener"
>fcitx5&lt;/a>)，不过目前还只有Arch linux有包可以直接用，因此也就没折腾了。&lt;/p>
&lt;p>安装完成之后还需要让fcitx框架跟随系统在后台启动，在Ubuntu底下修改的文件是&lt;code>.xprofile&lt;/code>，而KDE桌面环境不会加载&lt;code>.xprofile&lt;/code>，而是加载&lt;code>.xsessionrc&lt;/code>，修改方式参见&lt;a class="link" href="https://wiki.archlinux.org/index.php/fcitx#Set_environment_variables_for_IM_modules" target="_blank" rel="noopener"
>Arch Wiki&lt;/a>，最后好像还需要加&lt;code>fcitx &amp;amp;&lt;/code>来确保启动= =&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>折腾这些玩意的过程中发现&lt;a class="link" href="https://wiki.archlinux.org/index.php" target="_blank" rel="noopener"
>Arch Wiki&lt;/a>真是个好东西啊～KDE桌面的大部分问题都可以搜到解答～&lt;/li>
&lt;li>&lt;code>.xinitrc&lt;/code>, &lt;code>.xprofile&lt;/code>，&lt;code>.xsession&lt;/code>这些设置文件我真的是被搞蒙了。。&lt;a class="link" href="https://www.reddit.com/r/linux/comments/1p6orz/bashrc_bash_profile_inputrc_profile_xprofile/" target="_blank" rel="noopener"
>这里有一篇帖子&lt;/a>和&lt;a class="link" href="https://unix.stackexchange.com/questions/281858/difference-between-xinitrc-xsession-and-xsessionrc/281923#281923" target="_blank" rel="noopener"
>一篇回答&lt;/a>梳理了他们的关系，可供参考～&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="rclone配置">rclone配置&lt;/h3>
&lt;p>另一个必装的好东西是rclone，之前在&lt;a class="link" href="https://zyxin.xyz/blog/2019-04/LinuxRemoteSetup/" >远程桌面设置的文章&lt;/a>中有提到。由于KDE内置的GoogleDrive和OneDrive连接不太好使，还是用rclone来访问网盘吧= =。在设置好rclone之后可以通过自定义服务的方式让rclone在系统启动时自动挂载网盘到指定路径，然后在Dolphin（KDE的文件管理器）里面将这两个位置添加到左侧目录就可以啦～这样就可以直接从文件管理器访问了～具体的配置文件可以参考我的Github。&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>如果自定义服务添加到的位置是系统服务位置，那么可能会碰到权限问题，&lt;a class="link" href="https://forum.rclone.org/t/rclone-gdrive-not-mounting-permissions-or-fuse-issue/8067/2" target="_blank" rel="noopener"
>这里有解决方法&lt;/a>&lt;/li>
&lt;li>关于systemd的服务设置可以&lt;a class="link" href="https://wiki.archlinux.org/index.php/Systemd/User" target="_blank" rel="noopener"
>参考Arch Wiki&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="主题设置美化">主题设置美化&lt;/h2>
&lt;h3 id="plasma主题设置">Plasma主题设置&lt;/h3>
&lt;p>KDE Plasma最大的优点就是流畅以及好看！不折腾一下主题真的是对不起这么好的环境了～我大概主要进行了以下修改&lt;/p>
&lt;ul>
&lt;li>风格选择&lt;code>Breeze Dark&lt;/code>， 透明度设置为70%左右&lt;/li>
&lt;li>图标使用&lt;code>Papirus Dark&lt;/code>&lt;/li>
&lt;li>使用透明桌面主题&lt;a class="link" href="https://store.kde.org/p/1170816/" target="_blank" rel="noopener"
>&lt;code>Breeze Transparent Dark&lt;/code>&lt;/a>&lt;/li>
&lt;li>Firefox浏览器去掉titlebar，主题设为Dark&lt;/li>
&lt;li>添加全局菜单添加到底部
&lt;blockquote>
&lt;p>注意默认的Firefox去掉titlebar的话&lt;a class="link" href="https://www.reddit.com/r/kde/comments/bn2klu/firefox_csd_bug_with_kde_global_menu_plasmoid/" target="_blank" rel="noopener"
>对全局菜单的Plasmoid支持有问题&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>fcitx主题选择Dark&lt;/li>
&lt;li>在桌面特效中选择喜欢的窗口动画，调节窗口透明度～&lt;/li>
&lt;/ul>
&lt;p>剩下的换壁纸、配色主题什么的都来一遍就可以了～最后的桌面效果见标题图，还是很顺眼的～&lt;/p>
&lt;h3 id="其他小工具">其他小工具&lt;/h3>
&lt;h4 id="窗口附着缩放">窗口附着缩放&lt;/h4>
&lt;p>这个KWin脚本名叫Sticky Window Snapping，真的是神器！可以让附着在一块的窗口同时进行尺寸调整！这个功能相当于Windows分屏功能的升级版，这酸爽谁用谁知道啊！～下载地址&lt;a class="link" href="https://store.kde.org/p/1112552" target="_blank" rel="noopener"
>见KDE商城&lt;/a>，使用效果在官网有动图可以参考～还&lt;a class="link" href="https://store.kde.org/p/1112554/" target="_blank" rel="noopener"
>有个类似的脚本&lt;/a>可以做到让窗口严格按照网格排列，不过相比之下就显然鸡肋很多了。&lt;/p>
&lt;blockquote>
&lt;p>这些功能的Windows替代品可以&lt;a class="link" href="https://zhuanlan.zhihu.com/p/33722847" target="_blank" rel="noopener"
>参见少数派的文章&lt;/a>，不过貌似没有免费的软件可以做到Tilting&lt;/p>
&lt;/blockquote>
&lt;h4 id="redshift红移">Redshift（红移）&lt;/h4>
&lt;p>红移是Linux底下提供“护眼模式”的软件，有点类似f.lux，这个对我们这个天天盯电脑的还是很有用啦～安装直接&lt;code>apt install redshift plasma-applet-redshift-control&lt;/code>即可，第二个软件是Redshift的Plasma插件，可以在任务栏通过它来调节红移，非常方便～安装完后应该就可以通过Plasma挂件来设置红移了，如果不能自动识别地理位置的话&lt;a class="link" href="https://wiki.archlinux.org/index.php/Redshift#Automatic_location_based_on_GPS" target="_blank" rel="noopener"
>参考Arch Wiki中描述的geoclue工具&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>其他还有一些KDE下非常好用的软件，也一并列在这里了～以后用多了再专门开个文章～&lt;/p>
&lt;ul>
&lt;li>Kdenlive / Audacity：免费的视频/音频剪辑软件，基本够用了～&lt;/li>
&lt;li>Meld：文件比较器&lt;/li>
&lt;li>Remmina / KRDC：远程桌面的客户端，后者是KDE自家的，感觉比Remmina还是差点&lt;/li>
&lt;li>VLC：视频播放器，可以部分替代PotPlayer&lt;/li>
&lt;li>Peek / Kazam：录屏软件&lt;/li>
&lt;li>Flameshot：截屏软件&lt;/li>
&lt;li>Gimp：图片编辑软件，堪比Photoshop&lt;/li>
&lt;li>Krfb / Xrdp：远程桌面的服务器&lt;/li>
&lt;li>DeaDBeeF：音乐播放器，对cue和utf的支持非常好，可以部分替代fb2k&lt;/li>
&lt;li>KDE Partition Manager：KDE版GParted，功能差不多而且界面美观～&lt;/li>
&lt;li>fzf / ripgrep：模糊搜索工具&lt;/li>
&lt;li>Golden Dict：强大的词典框架&lt;/li>
&lt;li>KGet / aria2：下载器&lt;/li>
&lt;li>youtube-dl：视频下载器（Python）&lt;/li>
&lt;li>&lt;a class="link" href="http://wps-community.org/" target="_blank" rel="noopener"
>WPS&lt;/a> / OnlyOffice：办公套装&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;!-- Reference Software List -->
&lt;!-- https://alim0x.gitbooks.io/awesome-linux-software-zh_cn/content -->
&lt;!-- KDE 全家桶 -->
&lt;!-- Deepin 全家桶 -->
&lt;!-- KDE snap全家桶 --></description></item><item><title>转投Linux发行版</title><link>https://zyxin.xyz/blog/2019-04/LinuxDistroSelection/</link><pubDate>Fri, 26 Apr 2019 15:22:02 +0000</pubDate><guid>https://zyxin.xyz/blog/2019-04/LinuxDistroSelection/</guid><description>&lt;p>由于最近工作一直在使用ROS，因此也一直在用Ubuntu。之前为了稳定性使用的是Ubuntu 16.04 LTS，而这个版本默认的桌面环境是Unity，实在是不好使，它也颇为人诟病。后来尝试了Ubuntu 18.04 LTS安装ROS Melodic，发现ROS也挺稳定的，因此18.04也用了一段时间，但是最后还是觉得不太爽，于是最终还是决定好好体验一下各种Linux选一个自己顺手的。&lt;/p>
&lt;blockquote>
&lt;p>这篇博客里不会贴系统的截图，因为这些在网上都可以找到，而且桌面的好看与否很大程度上取决于个人的喜好和配置结果。最好的比较方法还是自己装一个系统尝试一下&lt;/p>
&lt;/blockquote>
&lt;p>至于如何尝试linux，我在Windows中使用的是Hyper-V。可以非常方便地安装各种镜像，动态分配资源，最方便的是vhdx硬盘格式可以直接mount到宿主机里。Hyper-V使用一些性能较差的Linux桌面环境时会比较卡，这个时候可以&lt;a class="link" href="https://docs.microsoft.com/en-us/windows-server/remote/remote-desktop-services/rds-remotefx-vgpu" target="_blank" rel="noopener"
>开启RemoteFX GPU（参考官方说明）&lt;/a>。注意在Win10 1809之后，Hyper-V管理器界面不提供RemoteFX的开关了，需要用Powershell命令手动开启。&lt;/p>
&lt;h2 id="linux-distro">Linux Distro&lt;/h2>
&lt;p>所谓的Linux发行版，对应的是一个专有的英文单词distro。个人理解，Linux Distro就是一套Linux Kernel加上外围一些必要的软件包。之前我一直不理解发行版的意思，直到学会了Python使用上Anaconda之后，才知道发行版指的就是核心程序+预装的全家桶，这个全家桶通常包含包管理器（Package manager，简称PM。如Ubuntu的apt、Anaconda的conda）、内置软件（如Linux桌面环境、Anaconda预装的Scipy）以及一套系统逻辑。&lt;/p>
&lt;p>Linux发行版中很重要的一点便是系统的PM，这个管理器还决定了系统的更新逻辑。而不同发行版之间最大的区别，在我看来就是PM（以及软件仓库repository），因此PM的特性与相性最终会决定我是否选择这套发行版。&lt;/p>
&lt;p>常见的桌面Linux发行版有如下这些，我可以大概描述一下他们的特点（以PM为线索）：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>apt&lt;/strong>: Debian、Ubuntu系
&lt;ul>
&lt;li>依赖树严格，能保证软件之间正确的依赖关系&lt;/li>
&lt;li>Debian和Ubuntu的软件库数量庞大，但是确实由于保守的包更新政策，它们的包比较老&lt;/li>
&lt;li>apt的命令行使用非常直观&lt;/li>
&lt;li>在国内，默认的仓库源下载很慢，但是国内有很多开源镜像可以使用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>pacman&lt;/strong>: Arch
&lt;ul>
&lt;li>滚动更新是Arch最大的特点&lt;/li>
&lt;li>pacman没有严格的依赖树，而是类似于快照的概念，更新软件时整个软件池都会进行变动（个人理解）&lt;/li>
&lt;li>pacman命令行参数是字母表，不便于记忆&lt;/li>
&lt;li>Arch的官方软件仓库中软件较少，但是Arch有庞大的AUR体系，因此能够尝试到很多小软件和新版本，不过也要承担小白鼠的风险&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>yum/dnf&lt;/strong>: Fedora、CentOS、Redhat等
&lt;ul>
&lt;li>使用方法和apt相似&lt;/li>
&lt;li>软件仓库中的数量没有Debian和Arch多&lt;/li>
&lt;li>包管理方便，中规中据，而且下载速度不慢&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>zypper&lt;/strong>: OpenSUSE
&lt;ul>
&lt;li>由于OpenSUSE是真的比较小众，因此我也没有去尝试，就不妄自评论了&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>emerge&lt;/strong>: Gentoo
&lt;ul>
&lt;li>同上，没尝试过
严格来说，上面的这些都是包分发器，而安装软件的是包安装器（dpkg,rpm等），不过前者才是我们最经常打交道的。关于这些PM以及其软件管理哲学的分析，可以&lt;a class="link" href="https://www.zhihu.com/question/40297380" target="_blank" rel="noopener"
>参见这个知乎问题&lt;/a>。而关于这些包管理器的一篇介绍可以&lt;a class="link" href="https://linux.cn/article-9931-1.html" target="_blank" rel="noopener"
>参见这篇博文&lt;/a>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Arch Linux的wiki上也有一篇&lt;a class="link" href="https://wiki.archlinux.org/index.php/Arch_compared_to_other_distributions" target="_blank" rel="noopener"
>关于发行版之间的对比&lt;/a>，这里我要吹一下Arch的wiki真的良心，还有中文版！
&lt;a class="link" href="https://distrowatch.com/" target="_blank" rel="noopener"
>DistroWatch&lt;/a>是一个收集了大量Linux distro的网站，可以在上面看一下流行度排名和一些评测
Linux各发行版的演化历史可以参见&lt;a class="link" href="https://commons.wikimedia.org/wiki/File:Linux_Distribution_Timeline.svg" target="_blank" rel="noopener"
>Wiki的历史图&lt;/a>或者&lt;a class="link" href="https://distrowatch.com/dwres.php?resource=family-tree" target="_blank" rel="noopener"
>DistroWatch的图表&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="桌面环境">桌面环境&lt;/h2>
&lt;p>桌面环境是最终选择哪一个发行版的决定者。选择Ubuntu、Arch等只能给你决定好大方向，而最后在众多系统中作出选择的标准之一便是桌面环境。常见的桌面环境有Gnome、KDE Plasma、XFCE、LXQt等。现在众多的发行版的主要区别其实也就是PM和桌面环境的区别：&lt;/p>
&lt;ul>
&lt;li>Ubuntu 16.04: Ubuntu + Unity&lt;/li>
&lt;li>Ubuntu 18.04: Ubuntu + Gnome&lt;/li>
&lt;li>KUbuntu: Ubuntu + KDE&lt;/li>
&lt;li>XUbuntu: Ubuntu + XFCE&lt;/li>
&lt;li>MX Linux: Debian + XFCE&lt;/li>
&lt;li>Linux Mint: Ubuntu + Cinammon/Gnome&lt;/li>
&lt;li>Manjaro: Arch + KDE&lt;/li>
&lt;li>Deepin: Debian + Deepin&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>而这些桌面环境的特点，个人感觉如下：&lt;/p>
&lt;ul>
&lt;li>Gnome(w/ gdm): 基于GTK开发，默认界面比较好看，但是灵活程度不够。虽然有Gnome Tweak，但是插件很少&lt;/li>
&lt;li>KDE Plasma(w/ sddm): 基于QT开发，非常灵活，而且Plasma5默认就非常好看！占用资源也比Gnome小。&lt;/li>
&lt;li>Unity(w/ lightdm): 别说了，换吧&lt;/li>
&lt;li>Xfce: 听人说很不错，但是我认为比较丑&lt;/li>
&lt;li>LXQt(w/ sddm): 适合低配环境，也不太好看&lt;/li>
&lt;/ul>
&lt;h2 id="个人选择">个人选择&lt;/h2>
&lt;p>&lt;strong>Arch&lt;/strong>?: 在我了解Linux distro的过程中，在各种论坛、知乎问题上都有人安利Arch linux。Arch虽好，而且可以体验更新的快感，但是我本身没有太多的时间去折腾系统，或者追寻潮流，因此还是更倾向于Debian体系。同时由于我有使用ROS的需求，因此Ubuntu还是我的第一选择。&lt;/p>
&lt;p>&lt;strong>商业主导 or 社区主导&lt;/strong>: 有人说Ubuntu由于是Canonical家的产品，会有商业倾向，服从公司利益。这个情况确实存在，但是就体验上来说和Arch、Fedora等等社区主导的系统并没有太多区别，因此这个并不会是决定我选择的因素。&lt;/p>
&lt;p>&lt;strong>Gnome or KDE&lt;/strong>: 相比于GTK，我更喜欢Qt这套框架。另外KDE也有别人上传的很多插件和桌面（在KDE store上)，非常棒，因此我最后选择的是KDE～&lt;/p>
&lt;p>综上所述，我最后决定使用KDE Neon作为平常使用的发行版，双系统安装Ubuntu 18.04作为开发系统。之后会写一篇博客来介绍KDE的折腾记录～&lt;/p></description></item><item><title>安装Windows与Linux（Ubuntu 16.04）双系统并搭建工作环境</title><link>https://zyxin.xyz/blog/2018-09/LinuxDualSystem/</link><pubDate>Sun, 16 Sep 2018 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2018-09/LinuxDualSystem/</guid><description>&lt;img src="https://zyxin.xyz/blog/2018-09/LinuxDualSystem/drive_manage.png" alt="Featured image of post 安装Windows与Linux（Ubuntu 16.04）双系统并搭建工作环境" />&lt;p>自己的笔记本已经用了快4年了，硬盘除了不小的问题，存资料不放心、玩游戏不给力，因此准备把这台机子变成一个工作专用的机器。另外由于刚来美帝，实验室没有配电脑，我需要一个Linux系统来干活，因此就琢磨着给自己电脑装个Ubuntu双系统。&lt;/p>
&lt;h2 id="ubuntu双系统的安装">Ubuntu双系统的安装&lt;/h2>
&lt;p>先说一下自己电脑的情况。联想Y430P，系统是从OEM版Win8一路升上来的，去年为了Hyper-V重装了Window 10教育版。也就是说这台电脑从到我手上以来未装过Windows以外的系统，因此装双系统需要有一定的调整。Ubuntu双系统的安装主要参照了&lt;a class="link" href="https://www.libinx.com/2017/five-steps-win10-ubuntu-dual-boot/" target="_blank" rel="noopener"
>另一篇博客&lt;/a>。&lt;/p>
&lt;h3 id="给ubuntu系统腾空间">给Ubuntu系统腾空间&lt;/h3>
&lt;p>由于之前系统所有硬盘位置都被分配好了，因此需要先给另一个系统足够的安装空间。重新分配空间在Windows下能够非常方便地通过磁盘管理进行解决。磁盘管理可在任务栏Windows图标右键菜单中打开。腾空间有几种方式：&lt;/p>
&lt;ol>
&lt;li>插入新的硬盘：如果你舍得花钱或者有闲置盘的话&lt;/li>
&lt;li>删除某一磁盘分区：删除分区不代表数据丢失，只是将磁盘一块区域变成未使用的状态&lt;/li>
&lt;li>压缩已有磁盘分区：在不想移动数据的情况下的选择&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2018-09/LinuxDualSystem/drive_manage.png"
width="760"
height="245"
loading="lazy"
alt="压缩分区和删除分区"
class="gallery-image"
data-flex-grow="310"
data-flex-basis="744px"
>&lt;/p>
&lt;p>由于我想让Ubuntu和Windows共用之前Windows独占的固态硬盘空间，因此我只能选择压缩分区（Windows装在C盘），并且由于这是Windows系统所在分区，因此还会降低压缩能力。为了最大化压缩出来的空间，首先将系统重启并且关掉所有能关掉的系统进程与服务，其次是关闭掉C盘的硬盘保护。实验证明，关闭掉硬盘保护后能够压缩的空间比关之前多了两倍！硬盘保护的开关在&lt;strong>系统面板-&amp;gt;更改设置-&amp;gt;系统保护&lt;/strong>选项卡中，在压缩完毕分区后可以再把硬盘保护打开。压缩完毕后磁盘中会多出一个“未分配”的区域，这便是之后Ubuntu安装的位置。&lt;/p>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2018-09/LinuxDualSystem/close_drive_protection.png"
width="1224"
height="679"
loading="lazy"
alt="磁盘保护的开关位置"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="432px"
>&lt;/p>
&lt;h3 id="制作启动盘">制作启动盘&lt;/h3>
&lt;p>如果你有现成的启动盘当然就可以跳过这一步了~这个步骤对于经常装机的同学来说肯定是so easy，过程说到底也就是从官网下一个ISO镜像然后刻录进光盘或者U盘。不过这里我倒是想推荐一个制作启动盘的软件——&lt;a class="link" href="https://rufus.akeo.ie/" target="_blank" rel="noopener"
>&lt;strong>Rufus&lt;/strong>&lt;/a>，制作流程十分直接，选择ISO后直接按照默认设置就能烧好一个启动盘~之前一直用的是UltraISO，但是完全就是大材小用，而且还收费，只能使用试用版，令强迫症相当不爽。&lt;/p>
&lt;h3 id="运行安装程序">运行安装程序&lt;/h3>
&lt;p>插入启动盘后重启进Boot Menu，选择从启动盘启动，然后就按照Linux的安装流程走了~需要解释的是在选择分区的那一步，如果没有什么特殊需要的话其实直接选择&amp;quot;Install Ubuntu alongside with Windows Boot Manage&amp;quot;（默认的第一个选项）就可以了，但如果想自己定义分区大小、挂载点和boot设置的话就选最后一条&amp;quot;Something else&amp;quot;，然后分区的设置可以参考&lt;a class="link" href="https://www.libinx.com/2017/five-steps-win10-ubuntu-dual-boot/" target="_blank" rel="noopener"
>之前提到的博文&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>需要指出的是，我参考这篇文章最后没有能用Windows Boot Manager来启动Ubuntu，还是只能使用Ubuntu附带的丑陋的GRUB，原因是我的Windows是UEFI安装，这个模式下Windows Boot Manager只能启动Windows系统（可以启动不同版本的）而不能启动Linux。具体解释可以参考&lt;a class="link" href="https://neosmart.net/wiki/easybcd/uefi/" target="_blank" rel="noopener"
>EasyBCD的官网说明&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>安装完毕以后可以将系统的更新源设置在国内的镜像库（如清华）上，可以使更新快一点。具体方法是进入&lt;code>系统设置-&amp;gt;软件和更新-&amp;gt;下载至&lt;/code>之中选择&lt;code>http://mirrors.tuna.tsinghua.edu.cn/ubuntu&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;h3 id="解决一些系统冲突">解决一些系统冲突&lt;/h3>
&lt;p>在安装完双系统后，如果没有什么意外的话就可以进入Ubuntu啦~但是我在进入后发现有两个问题，一个是时间错位，另一个是另外的系统分区（NTFS格式下的）无法打开。&lt;/p>
&lt;p>时间错位的现象是你在进入Ubuntu后再登录Windows，会发现Windows的时间被更改了，与实际时间错位了几个小时。这是由于Ubuntu与Windows的默认时区表示方式不同，导致Ubuntu会修改主板时间。解决方案可以参考&lt;a class="link" href="https://askubuntu.com/questions/169376/clock-time-is-off-on-dual-boot" target="_blank" rel="noopener"
>AskUbuntu上的问题&lt;/a>，我选择的方法是运行&lt;code>timedatectl set-local-rtc 1&lt;/code>。&lt;/p>
&lt;p>装系统之前的NTFS分区无法打开，并且会提示“Windows is hibernated, refused to mount”。其原因是Windows的快速启动阻止Ubuntu的访问，将Windows的快速启动功能关掉即可。&lt;a class="link" href="https://blog.csdn.net/ysy950803/article/details/52780863" target="_blank" rel="noopener"
>详情可参见CSDN贴&lt;/a>。&lt;/p>
&lt;h3 id="调整grub的设置">调整GRUB的设置&lt;/h3>
&lt;p>我这安装完双系统之后，默认启动的顺序是linux在前，而我想把Windows设为默认启动系统。这里就需要更改GRUB的配置文件，用sudo加vim或者gedit打开&lt;code>/etc/default/grub&lt;/code>, 更改里面的&lt;code>GRUB_DEFAULT&lt;/code>值为Windows在GRUB界面的顺序即可，保存后用&lt;code>sudo update-grub&lt;/code>覆盖已有配置即可完成更改。此外在GRUB设置中还有个&lt;code>GRUB_GFXMODE&lt;/code>选项，如果想更改GRUB界面的分辨率的话可以将其更改为需要的分辨率。GRUB支持的分辨率可以在GRUB界面按&lt;code>c&lt;/code>进入命令行，输入videoinfo命令查看。&lt;/p>
&lt;h2 id="ubuntu工作环境的配置">Ubuntu工作环境的配置&lt;/h2>
&lt;p>安装完系统之后就是一些软件以及环境的配置啦~&lt;/p>
&lt;h3 id="常用程序安装">常用程序安装&lt;/h3>
&lt;p>由于我很少使用Linux，因此在Ubuntu下常用的程序也很少，大概有这些:&lt;/p>
&lt;ul>
&lt;li>Firefox: 虽然Ubuntu自带，但是还是更新一下版本比较好&lt;/li>
&lt;li>Visual Studio Code: 没有Visual Studio，写代码只能用它了&lt;/li>
&lt;li>Anaconda: Python环境，系统自带的Python经常会被各种软件弄乱（如ROS），因此还是装个Anaconda。最好不用sudo安装，放在&lt;code>/home&lt;/code>底下就可以了。
&lt;blockquote>
&lt;p>如果今后在编译Python扩展相关的代码时要用Anaconda的python（如使用Anaconda编译pycaffe），那么在&lt;code>~/.bashrc&lt;/code>末尾加一行&lt;code>export LD_LIBRARY_PATH=$&amp;lt;Anaconda根目录&amp;gt;/lib:${LD_LIBRARY_PATH}&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>git: 这就不解释了&lt;/li>
&lt;li>GitKraken：一个非常好使的Git GUI&lt;/li>
&lt;li>CMake: 写跨平台代码时会用到&lt;/li>
&lt;li>aria2c: 快一点的下载器&lt;/li>
&lt;li>synaptic: 图形化deb包管理&lt;/li>
&lt;/ul>
&lt;p>这些程序的安装要么用&lt;code>sudo apt install&lt;/code>，要么从官网下载&lt;code>.deb&lt;/code>文件双击安装，非常简单~&lt;/p>
&lt;blockquote>
&lt;p>此外，还可以安装一个&lt;strong>中文输入法&lt;/strong>，&lt;a class="link" href="https://blog.csdn.net/ljheee/article/details/52966048" target="_blank" rel="noopener"
>使用ibus的话&lt;/a>会比较好看（&lt;a class="link" href="https://askubuntu.com/questions/1030418/how-to-change-text-entry-in-ubuntu-18-04" target="_blank" rel="noopener"
>Gnome中设置输入法参见这里&lt;/a>）。如果想安装GooglePinyin或者搜狗拼音的安装包，也可以在系统设置中添加中文语言支持，然后将输入法换成fcitx即可。&lt;/p>
&lt;/blockquote>
&lt;h3 id="ubuntu美化">Ubuntu美化&lt;/h3>
&lt;p>如果你忍受不了ubuntu默认的界面风格的话可以对Ubuntu进行美化。具体而言，效果明显的改进就是换主题和图标啦~&lt;/p>
&lt;ol>
&lt;li>安装Gnome桌面，具体命令代码如下：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo add-apt-repository ppa:gnome3-team/gnome3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt update &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> sudo apt install gnome-shell ubuntu-gnome-desktop
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>安装时如果提醒选择X Server的话选择&lt;code>gdm3&lt;/code>。安装完毕后在用户登陆界面中，用户名的右边按钮选择Gnome桌面登陆。另外，如果是安装的18.04应该是自带Gnome桌面了，安装就会简单不少。&lt;/p>
&lt;/blockquote>
&lt;ol start="2">
&lt;li>安装Tweak工具，这个在应用商店中可以找到。安装完毕后在Extension中打开User themes开关。&lt;/li>
&lt;li>安装主题和图标，我选择的是Arc-Darker主题和Papirus图标包。前者的安装方式是在&lt;a class="link" href="https://software.opensuse.org/download.html?project=home%3AHorst3180&amp;amp;package=arc-theme" target="_blank" rel="noopener"
>作者的OBS Repo&lt;/a>中下载&lt;code>.deb&lt;/code>文件直接安装，后者则是使用如下代码&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo add-apt-repository ppa:papirus/papirus
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get install papirus-icon-theme
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>安装完毕后在Tweak中选择主题和图标包即可&lt;/p>
&lt;blockquote>
&lt;p>其他美化方法可以参照知乎中的&lt;a class="link" href="https://www.zhihu.com/question/20509148/answer/44518012" target="_blank" rel="noopener"
>该回答&lt;/a>和&lt;a class="link" href="https://zhuanlan.zhihu.com/p/36200924" target="_blank" rel="noopener"
>该文章&lt;/a>。另外如果最开始就打算安装Gnome3的话可以考虑安装Gnome Ubuntu（最高版本是16.04.5）或者更新的Ubuntu（默认就是Gnome）。&lt;/p>
&lt;/blockquote>
&lt;h3 id="nvidia显卡驱动安装">NVIDIA显卡驱动安装&lt;/h3>
&lt;p>由于后面还是打算拿这个系统跑深度学习的，因此显卡还是要装的~首先是驱动安装。安装驱动有两种方式，一个是使用&lt;code>.run&lt;/code>文件，另一种则是使用apt install，后一种比较简单，在安装全新的系统时推荐使用后面一种。&lt;/p>
&lt;ol>
&lt;li>使用&lt;code>.run&lt;/code>文件安装&lt;/li>
&lt;/ol>
&lt;p>从官网下载&lt;code>.run&lt;/code>驱动，下载以后放到一个好找的目录下。之后打开终端，输入&lt;code>sudo service lightdm stop&lt;/code>关闭X Server的显示，然后按&lt;kbd>Ctrl&lt;/kbd>+&lt;kbd>Alt&lt;/kbd>+&lt;kbd>F1&lt;/kbd>进入tty模式。找到驱动文件对应的目录，输入如下命令开始安装驱动&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo chmod +x NVIDIA-Linux-x86_64-XXX.YY.run
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo ./NVIDIA-Linux-x86_64-XXX.YY.run
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>安装过程中的各种选项按需选择即可。安装完毕后再输入&lt;code>sudo service lightdm start&lt;/code>即可重新打开图形界面。&lt;/p>
&lt;ol start="2">
&lt;li>使用apt进行安装&lt;/li>
&lt;/ol>
&lt;p>打开命令行输入下列命令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo add-apt-repository ppa:graphics-drivers
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get install nvidia-XXX
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>安装完重启即可。安装结束时可能会提醒你关掉主板的Secure Boot，按照提示完成即可。&lt;/p>
&lt;h3 id="安装cuda">安装CUDA&lt;/h3>
&lt;blockquote>
&lt;p>CUDA的安装同样有两种方式，一种是使用.run，一种是使用.deb。后者是官方推荐的，而且相比之下deb文件不含驱动，很少有冲突，并且这样对CUDA的卸载和升级更加方便。如果网速比较好的话可以选择Online形式的deb包，这样使用起来就和一般repository差不多了，能自动升级，但是如果连接NVidia的网速不太行的话还是用Offline的deb包更方便。&lt;/p>
&lt;/blockquote>
&lt;p>用N卡做计算加速的话CUDA是必需的。从&lt;a class="link" href="https://developer.nvidia.com/cuda-downloads" target="_blank" rel="noopener"
>官网下载&lt;code>.deb&lt;/code>文件&lt;/a>，然后在终端运行如下命令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo dpkg -i &amp;lt;CUDA的.deb文件路径&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get install cuda
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>安装完成后修改环境变量。在终端输入&lt;code>sudo gedit ~/.bashrc&lt;/code>，然后在文件末尾添加如下几行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># CUDA environment&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">CUDA_HOME&lt;/span>&lt;span class="o">=&lt;/span>/usr/local/cuda
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">LD_LIBRARY_PATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">CUDA_HOME&lt;/span>&lt;span class="si">}&lt;/span>/lib64:&lt;span class="si">${&lt;/span>&lt;span class="nv">LD_LIBRARY_PATH&lt;/span>&lt;span class="si">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">PATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">CUDA_HOME&lt;/span>&lt;span class="si">}&lt;/span>/bin:&lt;span class="si">${&lt;/span>&lt;span class="nv">PATH&lt;/span>&lt;span class="si">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>注意Linux下PATH的分隔符是冒号&lt;code>:&lt;/code>而不是分号&lt;code>;&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>然后重启终端或者使用&lt;code>sudo ldconfig&lt;/code>命令使环境变量生效。验证是否安装成功可以通过编译官方的CUDA Samples完成&lt;/p>
&lt;h3 id="安装cudnn">安装CuDNN&lt;/h3>
&lt;blockquote>
&lt;p>这里采用的是&lt;code>.tar&lt;/code>压缩包安装方法，官网还提供&lt;code>.deb&lt;/code>安装文件，貌似可以CUDA+CuDNN一起安装&lt;/p>
&lt;/blockquote>
&lt;p>CuDNN是利用N卡给神经网络计算做加速的库，也是必需的。CuDNN的安装仅仅是把几个库文件拷到CUDA目录下就可以了。从&lt;a class="link" href="http://developer.nvidia.com/rdp/cudnn-download" target="_blank" rel="noopener"
>官网下载CuDNN库的&lt;code>.tgz&lt;/code>文件&lt;/a>，解压后打开终端进入到解压后的目录，然后运行如下命令即可&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo cp -P cuda/include/cudnn.h /usr/local/cuda/include
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo cp -P cuda/lib64/libcudnn* /usr/local/cuda/lib64
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo chmod a+r /usr/local/cuda/include/cudnn.h
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>题一下我这里遇到的问题。我在之后安装完tensorflow后发现Tensorflow仍然找不到CuDNN，排除了目录不正确的可能之后发现是libcudnn.so.6.0.20文件的权限设置不正确。不知道为什么压缩包里解压出来的这个文件的权限是&lt;code>-rwxr-xr-x&lt;/code>，与其他的.so文件不同。之后我用&lt;code>chmod&lt;/code>命令将权限改成正常的&lt;code>-rw-r--r--&lt;/code>后即可正常使用Tensorflow了。&lt;/p>
&lt;/blockquote>
&lt;h3 id="安装ros">安装ROS&lt;/h3>
&lt;p>ROS也是我今后工作中会常用到的框架。目前ROS进行LTS支持的版本是Kinetic，并且刚好Kinetic也是支持Ubuntu 16.04的版本，因此我们就安装Kinetic版本的ROS框架。依次执行如下命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo sh -c &lt;span class="s1">&amp;#39;echo &amp;#34;deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main&amp;#34; &amp;gt; /etc/apt/sources.list.d/ros-latest.list&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get install ros-kinetic-desktop-full
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo rosdep init
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rosdep update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get install python-rosinstall
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pip install trollius catkin-tools rospkg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后一行是为ros的Python开发提供支持，其中trollius是catkin-tools的依赖项。安装完之后可以在&lt;code>.bashrc&lt;/code>文件里添加环境设置，使得ros的命令能默认在终端里执行。在终端输入&lt;code>sudo gedit ~/.bashrc&lt;/code>，然后在文件末尾添加如下几行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># add ROS environment&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> /opt/ros/kinetic/setup.bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>ROS是否安装成功可以通过运行ROS示例来测试。&lt;/p>
&lt;blockquote>
&lt;p>若要使用TUNA镜像，可以将第一行命令中的&lt;code>http://packages.ros.org/ros/ubuntu&lt;/code>换成&lt;code>https://mirrors.tuna.tsinghua.edu.cn/ros/ubuntu/&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;p>整个安装到这就差不多结束了~Ubuntu的使用还是没有Windows那么友好的，不过在编程环境的配置方面还是能省不少事。以后买新电脑后甚至会考虑让这台机子常开Ubuntu当个服务器使了。&lt;/p></description></item></channel></rss>