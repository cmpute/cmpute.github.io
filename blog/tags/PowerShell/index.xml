<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PowerShell on JacobZ</title><link>https://zyxin.xyz/blog/tags/PowerShell/</link><description>Recent content in PowerShell on JacobZ</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 02 Nov 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://zyxin.xyz/blog/tags/PowerShell/index.xml" rel="self" type="application/rss+xml"/><item><title>PowerShell快速上手（针对有C#经验者）</title><link>https://zyxin.xyz/blog/2018-11/PowerShellForCSharpProgrammer/</link><pubDate>Fri, 02 Nov 2018 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2018-11/PowerShellForCSharpProgrammer/</guid><description>&lt;p>PowerShell是微软一个非常棒的产品，终于改变了人们对Windows下命令行的一片鄙视。一直以来都很想学学PowerShell，这样我就不用使用Python作为手边的脚本语言了，对进行一些文件操作、系统操作而言PowerShell还是要比Python来的方便。另外由于有不少C#的经验，因此PowerShell能够调用.NET库的特性也能够充分利用起来，并且实际发现C#的经验让我学习PowerShell快了不少（当然使用bash、CMake这些脚本的经验应该也帮上忙了吧）。本文就是一篇针对有C#经验的用户的PowerShell上手教程，当然如果你有F#、IronPython等基于.NET的脚本经验那就更好了。&lt;/p>
&lt;blockquote>
&lt;p>Note: 后文中PowerShell简称PS。&lt;/p>
&lt;/blockquote>
&lt;h2 id="powershell脚本的运行方法">PowerShell脚本的运行方法&lt;/h2>
&lt;p>PowerShell本质是一个脚本环境/脚本语言。在PS中，语句从第一行开始依次执行，而不像普通程序一样会有一个显式的程序入口（Entry），并且PS的每一行命令（语句）都不用使用结尾标志（如C家族的;）。因此PS脚本的编写将会非常直观，想要输出&lt;code>Hello World&lt;/code>只需一行语句即可：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo &lt;/span>&lt;span class="s2">&amp;#34;Hello World&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行一段PS脚本有两种方式，一种是在PS交互命令行中直接将命令输入，例如你可以直接在PS命令行中输入&lt;code>35+2&lt;/code>，或者&lt;code>$env:Path.GetType()&lt;/code>等复杂语句；另一种则是将脚本写在&lt;code>.ps1&lt;/code>文件中，然后运行&lt;code>.ps1&lt;/code>文件即可。这与大部分脚本语言运行的方法是一致的。&lt;/p>
&lt;p>需要指出的是Windows下PS脚本运行是受到系统的限制的，默认系统配置下，如果再PowerShell窗口中直接运行&lt;code>.ps1&lt;/code>脚本，PS会提示&lt;em>File cannot be loaded because running scripts is disabled on this system.&lt;/em>。解决这个问题有两种方式&lt;/p>
&lt;ol>
&lt;li>将系统中Windows PowerShell执行策略改为“Bypass”，这个可以通过在PS中运行以下命令完成
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Set-ExecutionPolicy&lt;/span> &lt;span class="n">Bypass&lt;/span> &lt;span class="n">-Scope&lt;/span> &lt;span class="n">CurrentUser&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Set-ExecutionPolicy&lt;/span> &lt;span class="n">Bypass&lt;/span> &lt;span class="n">-Scope&lt;/span> &lt;span class="k">Process&lt;/span> &lt;span class="c"># 仅在当前PS进程中生效。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>使用&lt;code>powershell -noprofile -executionpolicy bypass -file &amp;lt;文件路径&amp;gt; [参数]&lt;/code>来运行脚本，这是用户友好的方法。由于该命令可以通过cmd或者PS执行，因此可以通过&lt;code>.bat&lt;/code>文件封装这个命令，以达到双击运行的效果。&lt;/li>
&lt;/ol>
&lt;h2 id="命令-or-参数-or-字符串">命令 or 参数 or 字符串？&lt;/h2>
&lt;p>PowerShell中变量名均以&lt;code>$&lt;/code>开头。与bash、CMake风格相似的是，PS中的内容如果不以&lt;code>$&lt;/code>或者&lt;code>-&lt;/code>开头则默认都是命令或者字符串，例如在&lt;code>echo Hello World&lt;/code>这样的语句中，&lt;code>echo&lt;/code>是命令，&lt;code>Hello&lt;/code>和&lt;code>World&lt;/code>都是命令的参数并且都是字符串类型。在PS中，命令/函数的调用有两种形式：&lt;/p>
&lt;ol>
&lt;li>命令形式：&lt;code>&amp;lt;命令&amp;gt; [参数1] .. [-参数名2 &amp;lt;参数2&amp;gt;] ..&lt;/code>，如&lt;code>Get-ChildItem C:\Windows\* -Include *.exe&lt;/code>。在这类形式中，参数默认都是字符串，在不含空格时都可以不打引号。这里的命令主要是PS内置的命令（cmdlet）或者别名（alias），通常是一个首字母大写的单词或者用短横连接的两个首字母大写单词。&lt;/li>
&lt;li>函数形式: &lt;code>[对象.]函数(参数1, 参数2, ..)&lt;/code>，如&lt;code>&amp;quot;abcd&amp;quot;.Endswith(&amp;quot;cd&amp;quot;)&lt;/code>。在这类形式中，参数需要通过引号来明确指定是字符串。通过这样的方法使用的是.NET的函数，写起来就和C#没什么区别。&lt;/li>
&lt;/ol>
&lt;p>另外，PowerShell支持管道，因此对于命令形式来说可以通过&lt;code>&amp;lt;命令1&amp;gt; | &amp;lt;命令2&amp;gt; | ..&lt;/code>的形式来进行链式调用并且传递参数，而函数形式就没法进行链式调用了。&lt;/p>
&lt;h2 id="net交互interop">.NET交互（Interop）&lt;/h2>
&lt;p>PowerShell本身是用C#编写的，并且其内部运行环境也是基于.NET的，因此PS与.NET交互十分简单。&lt;/p>
&lt;h3 id="powershell对象">PowerShell对象&lt;/h3>
&lt;p>PS中的对象均为.NET中的对象，因此PS变量可以直接当作.NET对象进行操作，例如下列语句：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="mf">123&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">ToString&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c"># 报错，因为123既不是变量也不是命令&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="p">([&lt;/span>&lt;span class="no">int&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="mf">123&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="py">ToString&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c"># 这里将字符串123转换成了System.Int32变量&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mf">123&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">Dir &lt;/span>&lt;span class="n">C:&lt;/span>&lt;span class="p">\).&lt;/span>&lt;span class="py">GetType&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="py">Name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Object&lt;/span>&lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">Get-Item&lt;/span> &lt;span class="n">HKCU&lt;/span>&lt;span class="err">:&lt;/span>&lt;span class="p">\&lt;/span>&lt;span class="n">Software&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="py">GetType&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="py">FullName&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Microsoft&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">Win32&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">RegistryKey&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>PS不仅能操作对象，还能够直接创建对象&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># PS中创建.NET对象&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">New-Object&lt;/span> &lt;span class="n">-TypeName&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">Version&lt;/span> &lt;span class="n">-ArgumentList&lt;/span> &lt;span class="s2">&amp;#34;1.2.3.4&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Major&lt;/span> &lt;span class="n">Minor&lt;/span> &lt;span class="n">Build&lt;/span> &lt;span class="n">Revision&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">-----&lt;/span> &lt;span class="p">-----&lt;/span> &lt;span class="p">-----&lt;/span> &lt;span class="p">--------&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mf">1&lt;/span> &lt;span class="mf">2&lt;/span> &lt;span class="mf">3&lt;/span> &lt;span class="mf">4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c"># PowerShell中的Object对象操作&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="nv">$var&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">New-Object&lt;/span> &lt;span class="n">object&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="nv">$var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">GetType&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="py">Name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">Object&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">Add-Member&lt;/span> &lt;span class="n">-InputObject&lt;/span> &lt;span class="nv">$var&lt;/span> &lt;span class="n">-Name&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="n">-Value&lt;/span> &lt;span class="mf">123&lt;/span> &lt;span class="n">-MemberType&lt;/span> &lt;span class="n">NoteProperty&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="nv">$var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">Value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mf">123&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过&lt;code>Add-Member&lt;/code>和&lt;code>Get-Member&lt;/code>命令，PS不仅能够完成.NET中的反射（Reflection），还能够完成类似匿名对象（Anonymous Object）的创建，这个十分有用！&lt;/p>
&lt;h3 id="powershell中操作net类">PowerShell中操作.NET类&lt;/h3>
&lt;p>在PS中可以直接调用.NET库中的类进行操作&lt;/p>
&lt;ol>
&lt;li>新建对象：&lt;code>New-Object -TypeName System.Version -ArgumentList &amp;quot;1.2.3.4&amp;quot;&lt;/code>&lt;/li>
&lt;li>强制转换：&lt;code>[int]&amp;quot;1234&amp;quot;&lt;/code>（等同于&lt;code>[System.Int32]&amp;quot;1234&amp;quot;&lt;/code>）&lt;/li>
&lt;li>调用静态函数： &lt;code>[System.DateTime]::Parse(&amp;quot;2012-10-13 23:42:55&amp;quot;)&lt;/code>
有了这些操作，PowerShell已经完全可以当一个C#脚本引擎了~&lt;/li>
&lt;/ol>
&lt;h2 id="操作符httpsdocsmicrosoftcompowershellmodulemicrosoftpowershellcoreaboutabout_operators">&lt;a class="link" href="https://docs.microsoft.com/powershell/module/microsoft.powershell.core/about/about_operators" target="_blank" rel="noopener"
>操作符&lt;/a>&lt;/h2>
&lt;p>在利用PS写逻辑流程时就会发现，除了加减乘除外，C#的很多关键字和操作符都不能直接使用。在PS中，这些操作符都变成了命令或者以&lt;code>-&lt;/code>开头的命令符了。下表列出了常用的操作符：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>PS操作符&lt;/th>
&lt;th>C#操作符&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="https://docs.microsoft.com/powershell/module/microsoft.powershell.core/about/about_comparison_operators" target="_blank" rel="noopener"
>&lt;strong>比较&lt;/strong>&lt;/a>&lt;/td>
&lt;td>&lt;code>-eq&lt;/code>&lt;/td>
&lt;td>&lt;code>==&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>比较&lt;/td>
&lt;td>&lt;code>-ne&lt;/code>&lt;/td>
&lt;td>&lt;code>!=&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>比较&lt;/td>
&lt;td>&lt;code>-gt&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>比较&lt;/td>
&lt;td>&lt;code>-ge&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;gt;=&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>比较&lt;/td>
&lt;td>&lt;code>-lt&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;lt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>比较&lt;/td>
&lt;td>&lt;code>-le&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;lt;=&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://docs.microsoft.com/powershell/module/microsoft.powershell.core/about/about_type_operators" target="_blank" rel="noopener"
>&lt;strong>类型&lt;/strong>&lt;/a>&lt;/td>
&lt;td>&lt;code>-is&lt;/code>&lt;/td>
&lt;td>&lt;code>is&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>类型&lt;/td>
&lt;td>&lt;code>-as&lt;/code>&lt;/td>
&lt;td>&lt;code>as&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://docs.microsoft.com/powershell/module/microsoft.powershell.core/about/about_logical_operators" target="_blank" rel="noopener"
>&lt;strong>逻辑&lt;/strong>&lt;/a>&lt;/td>
&lt;td>&lt;code>-and&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;amp;&amp;amp;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>逻辑&lt;/td>
&lt;td>&lt;code>-or&lt;/code>&lt;/td>
&lt;td>&lt;code>||&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>逻辑&lt;/td>
&lt;td>&lt;code>-xor&lt;/code>&lt;/td>
&lt;td>&lt;code>^&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>逻辑&lt;/td>
&lt;td>&lt;code>-not&lt;/code>&lt;/td>
&lt;td>&lt;code>!&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://docs.microsoft.com/powershell/module/microsoft.powershell.core/about/about_arithmetic_operators" target="_blank" rel="noopener"
>&lt;strong>运算&lt;/strong>&lt;/a>&lt;/td>
&lt;td>&lt;code>-band&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;amp;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>运算&lt;/td>
&lt;td>&lt;code>-bnot&lt;/code>&lt;/td>
&lt;td>&lt;code>~&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>运算&lt;/td>
&lt;td>&lt;code>-bor&lt;/code>&lt;/td>
&lt;td>&lt;code>|&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>运算&lt;/td>
&lt;td>&lt;code>-bxor&lt;/code>&lt;/td>
&lt;td>&lt;code>^&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>运算&lt;/td>
&lt;td>&lt;code>-shl&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;lt;&amp;lt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>运算&lt;/td>
&lt;td>&lt;code>-shr&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;gt;&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>运算&lt;/td>
&lt;td>&lt;code>-bxor&lt;/code>&lt;/td>
&lt;td>&lt;code>^&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>另外需要注意的是&lt;code>&amp;gt;&lt;/code>、&lt;code>&amp;gt;&amp;gt;&lt;/code>等等运算符在PS中是重定向运算符。&lt;/p>
&lt;/blockquote>
&lt;p>尽管名字不一样，但是这些操作符的用法还是一样的。另外PS中还定义了一些.NET中没有的操作符，这些操作符通常很实用，如：&lt;/p>
&lt;ul>
&lt;li>&lt;code>-contains&lt;/code>：返回集合包含元素&lt;/li>
&lt;li>&lt;code>-in&lt;/code>：返回元素是否被集合包含&lt;/li>
&lt;li>&lt;code>-like&lt;/code>: 返回字符串是否与通配式匹配（&lt;a class="link" href="https://en.wikipedia.org/wiki/Wildcard_character" target="_blank" rel="noopener"
>Wildcard Pattern&lt;/a>）&lt;/li>
&lt;li>&lt;code>-match&lt;/code>: 返回字符串是否与正则表达式匹配（&lt;a class="link" href="https://en.wikipedia.org/wiki/Regular_expression" target="_blank" rel="noopener"
>Regex&lt;/a>）&lt;/li>
&lt;li>&lt;code>-f&lt;/code>: 等价于&lt;code>String.Format()&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="powershell驱动httpsdocsmicrosoftcompowershellscriptinggetting-startedcookbooksmanaging-windows-powershell-drives">&lt;a class="link" href="https://docs.microsoft.com/powershell/scripting/getting-started/cookbooks/managing-windows-powershell-drives" target="_blank" rel="noopener"
>PowerShell“驱动”&lt;/a>&lt;/h2>
&lt;p>“驱动”（Drive）是PowerShell中很有意思的一个概念，PowerShell提供了一种统一的接口来管理层次信息系统，包括文件系统（FileSystem）、注册表（Registry）、证书（Certificate）、环境变量（Environment），甚至包括当前会话的变量（Variable）和函数（Function）。这些“Drive”支持统一的一套接口，这就非常的有趣了233。&lt;/p>
&lt;p>通过&lt;code>Get-PSDrive&lt;/code>命令我们可以获得当前PowerShell会话支持的驱动，在我的电脑上该命令的运行结果如下（省去部分内容）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Name Provider Root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">---- -------- ----
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Alias Alias
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">C FileSystem C:\
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Cert Certificate \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">D FileSystem D:\
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">E FileSystem E:\
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Env Environment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Function Function
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">G FileSystem G:\
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">HKCU Registry HKEY_CURRENT_USER
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">HKLM Registry HKEY_LOCAL_MACHINE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Variable Variable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">WSMan WSMan
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过这些驱动，&lt;code>ls env:\Path&lt;/code>就能够获取系统环境变量，&lt;code>HKCU:\SOFTWARE&lt;/code>就可以获取注册表键，十分方便。但是需要注意的是这些驱动获得的对象的类型是不同的，如文件对象会是&lt;code>System.IO.FileInfo&lt;/code>，而注册表键则是&lt;code>Microsoft.Win32.RegistryKey&lt;/code>。&lt;/p>
&lt;h3 id="驱动统一支持的命令接口">驱动统一支持的命令接口&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Cmdlet&lt;/th>
&lt;th>Alias&lt;/th>
&lt;th>用途&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Get-ChildItem&lt;/td>
&lt;td>dir, ls&lt;/td>
&lt;td>获取当前位置的所有子项&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Set-Location&lt;/td>
&lt;td>cd&lt;/td>
&lt;td>更改当前位置&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>New-Item&lt;/td>
&lt;td>md, mkdir&lt;/td>
&lt;td>在指定位置新建对象&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Get-Item&lt;/td>
&lt;td>&lt;/td>
&lt;td>获取该位置对应的对象&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Remove-Item&lt;/td>
&lt;td>del, rm&lt;/td>
&lt;td>删除指定位置的对象&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>New-ItemProperty&lt;/td>
&lt;td>&lt;/td>
&lt;td>新建对象的属性&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Get-ItemProperty&lt;/td>
&lt;td>&lt;/td>
&lt;td>获取对象的属性（如文件属性，注册表键）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Set-ItemProperty&lt;/td>
&lt;td>&lt;/td>
&lt;td>设置对象的属性&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Clear-ItemProperty&lt;/td>
&lt;td>&lt;/td>
&lt;td>删除对象的属性&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Test-Path&lt;/td>
&lt;td>&lt;/td>
&lt;td>判断指定位置是否存在对象&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;p>看完这些内容以后你就可以像写C#一样开始写PowerShell啦。更加详细的教程可以参见下方的参考资料~&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>参考资料&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://docs.microsoft.com/powershell/" target="_blank" rel="noopener"
>微软官方文档&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.pstips.net/powershell-online-tutorials" target="_blank" rel="noopener"
>PowerShell在线教程&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item></channel></rss>