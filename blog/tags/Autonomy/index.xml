<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Autonomy on JacobZ</title><link>https://zyxin.xyz/blog/tags/Autonomy/</link><description>Recent content in Autonomy on JacobZ</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 02 Aug 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://zyxin.xyz/blog/tags/Autonomy/index.xml" rel="self" type="application/rss+xml"/><item><title>ROS参数设置方法总结</title><link>https://zyxin.xyz/blog/2019-08/ROSParameter/</link><pubDate>Fri, 02 Aug 2019 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2019-08/ROSParameter/</guid><description>&lt;p>最近在研究ROS节点（ROS Node）的参数设置方式，由于系统比较复杂，并且会变得更加复杂，因此需要一个统一的参数设置方式。这里就比较一下四种参数获取方案的区别～&lt;/p>
&lt;h2 id="命令行文件输入">命令行/文件输入&lt;/h2>
&lt;p>由于ROS节点本身也只是普通的可执行程序，因此它可以正常地从启动参数中读取参数，另外也可以从配置文件中读取参数。这两种方法都是常规程序读取参数的方法。从命令行中读取参数有C++的&lt;code>Boost.Program_options&lt;/code>库和Python的&lt;code>argparse&lt;/code>的库，用来解析命令行参数输入，支持可选参数、重复参数、参数分组等等。而从文件输入的话，常见的设置格式有&lt;code>json&lt;/code>，&lt;code>yaml&lt;/code>，&lt;code>toml&lt;/code>甚至&lt;code>ini&lt;/code>等等。从这些文件中读取比较灵活，但是无法利用ROS框架，并且需要自行统一格式。&lt;/p>
&lt;h2 id="参数服务器">参数服务器&lt;/h2>
&lt;p>ROS中很有名的支持参数设置的结构是参数服务器，参数服务器是一个包含在master结点里的集中式字典结构，在ROS的Wiki上有介绍：&lt;a class="link" href="http://wiki.ros.org/Parameter%20Server/cn" target="_blank" rel="noopener"
>中文&lt;/a>|&lt;a class="link" href="http://wiki.ros.org/Parameter%20Server" target="_blank" rel="noopener"
>英文&lt;/a>。参数服务器也可以从文件中读取参数，文件格式是&lt;code>yaml&lt;/code>，读取的方式是在&lt;code>.launch&lt;/code>文件中添加&lt;code>&amp;lt;rosparam&amp;gt;&lt;/code>标签，并指定键值或者文件路径。&lt;/p>
&lt;h3 id="rosparam">rosparam&lt;/h3>
&lt;p>&lt;code>rosparam&lt;/code>是操作参数服务器的一套工具，你可以从程序中调用&lt;code>rosparam&lt;/code>的API，或者使用命令行工具对指定参数进行动态更改。命令行的用法参见&lt;a class="link" href="http://wiki.ros.org/rosparam#rosparam_command-line_tool" target="_blank" rel="noopener"
>ROS Wiki&lt;/a>&lt;/p>
&lt;h3 id="rosrun">rosrun&lt;/h3>
&lt;p>&lt;code>rosrun&lt;/code>和&lt;code>roslaunch&lt;/code>都是运行ROS模块的工具，其中&lt;code>rosrun&lt;/code>只能运行单个节点，而&lt;code>roslaunch&lt;/code>则支持更加复杂的启动体系。用&lt;code>rosrun&lt;/code>进行参数服务器的设置的方式是在启动参数中添加&lt;code>key:=value&lt;/code>。&lt;/p>
&lt;h3 id="roslaunch">roslaunch&lt;/h3>
&lt;p>用&lt;code>roslaunch&lt;/code>进行参数服务器的设置的方式是在文件中添加&lt;code>&amp;lt;param&amp;gt;&lt;/code>标签。&lt;param>&lt;code>和&lt;/code>&lt;rosparam>&lt;code>实质上功能相似，前者设置的是单个参数，而后者针对的是一套参数。另外&lt;/code>roslaunch&lt;code>还支持从命令行读取参数，格式也是&lt;/code>key:=value&lt;code>，读取进来后存入的是&lt;/code>&lt;arg>&lt;code>标签，而如果要使用这类参数的话需要使用&lt;/code>roslaunch&lt;code>的&lt;/code>$(arg key)&lt;code>语法。具体的&lt;/code>roslaunch`语法&lt;a class="link" href="http://wiki.ros.org/roslaunch/XML" target="_blank" rel="noopener"
>参见ROS Wiki&lt;/a>。&lt;/p>
&lt;h3 id="dynamic_reconfigure">dynamic_reconfigure&lt;/h3>
&lt;p>ROS中还提供了另一种机制叫&lt;a class="link" href="http://wiki.ros.org/dynamic_reconfigure" target="_blank" rel="noopener"
>&lt;code>dynamic_reconfigure&lt;/code>&lt;/a>也可以用来动态设置参数。它与参数服务器的区别在于它的参数更新是基于回调机制，而参数服务器实际上是轮询机制。ROS程序会主动询问参数服务器以获取参数，而&lt;code>dynamic_reconfigure&lt;/code>则是动态地告知ROS程序参数更新事件。&lt;code>dynamic_reconfigure&lt;/code>的使用方法是定义&lt;code>.cfg&lt;/code>文件，并在其中通过Python程序定义可动态设置的参数。&lt;code>cfg&lt;/code>文件在CMakeLists.txt中需要注册，注册语法及顺序参见&lt;a class="link" href="http://wiki.ros.org/catkin/CMakeLists.txt#Example" target="_blank" rel="noopener"
>CMakeLists.txt的Wiki&lt;/a>和&lt;a class="link" href="http://wiki.ros.org/dynamic_reconfigure/Tutorials/HowToWriteYourFirstCfgFile" target="_blank" rel="noopener"
>&lt;code>.cfg&lt;/code>文件的Wiki&lt;/a>。个人感觉实际上&lt;code>dynamic_reconfigure&lt;/code>实现的效果和自己定义ROS服务来更新参数是相似的。&lt;/p>
&lt;blockquote>
&lt;p>最后总结下来的话ROS参数服务器还是最常用的，但是参数服务器的名称同样也有命名空间的限制，也分私有参数和公有参数等等。。这两个的区别我其实现在还没有搞清楚= =&lt;/p>
&lt;/blockquote></description></item></channel></rss>