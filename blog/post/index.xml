<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on JacobZ</title><link>https://zyxin.xyz/blog/post/</link><description>Recent content in Posts on JacobZ</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 24 Jul 2022 14:15:17 +0000</lastBuildDate><atom:link href="https://zyxin.xyz/blog/post/index.xml" rel="self" type="application/rss+xml"/><item><title>（C语言）变长数组的陷阱</title><link>https://zyxin.xyz/blog/2022-07/ThePitfallOfVLA/</link><pubDate>Sun, 24 Jul 2022 14:15:17 +0000</pubDate><guid>https://zyxin.xyz/blog/2022-07/ThePitfallOfVLA/</guid><description>&lt;p>{% note default %}&lt;/p>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>这篇文章转载自&lt;a class="link" href="https://blog.joren.ga/vla-pitfalls" target="_blank" rel="noopener"
>Jorengarenar的博客&lt;/a>。类似于前一篇文章，这一篇博文是我在搜索为什么Rust不支持动态栈分配的时候看到的。有很多人希望Rust支持变长数组，并且有一个&lt;a class="link" href="https://github.com/rust-lang/rust/issues/48055" target="_blank" rel="noopener"
>相关的RFC&lt;/a>，但是&lt;a class="link" href="https://users.rust-lang.org/t/a-question-about-how-memory-is-stored-and-vlas/33901/16?u=cmpute" target="_blank" rel="noopener"
>也有人提到这很危险&lt;/a>，并且不会带来太大的收益，这篇文章总结了变长数组的问题，可供参考。
{% endnote %}&lt;/p>
&lt;h2 id="正文">正文&lt;/h2>
&lt;blockquote>
&lt;p>相比于固定尺寸，它会生成更多的、并且更慢的代码（而且很脆弱）。—— &lt;a class="link" href="https://lkml.org/lkml/2018/3/7/621" target="_blank" rel="noopener"
>Linus Torvalds&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>VLA 是变长数组（variable-length array）的缩写，它指的是长度在运行时而不是编译时决定的数组（真·数组，而不是接口像数组的一块内存）。VLA在C99标准中被引进，乍看上去它很方便并且高效，但是这只是各幻觉，实际上它只是一些顽固问题的源头。&lt;/p>
&lt;p>这篇文章的批评主要针对自动变长数组（automatic VLA），而不是所有形式的VLA，因此我在后文会用缩写aVLA来进行区分。&lt;/p>
&lt;blockquote>
&lt;p>支持某种形式的VLA的语言有：Ada, Algol 68, C, C#, COBOL, Fortran, J 和 Object Pascal。你可能注意到了，除了C和C#之外，其他的语言都不主流了。&lt;/p>
&lt;p>你从开头的引言中可能也猜到了，一个相当依赖于VLA的项目不是别的，正是Linux内核。维护者们花费了很多精力来移除VLA，并且在内核版本4.20（2018年）后实现了完全无VLA。&lt;/p>
&lt;p>在这篇文章刚开头的时候，我还要指出，在一些情形下，VLA是一个好解决方案。这样的情形不多，但是确实存在。未来我会尽力好好介绍他们并且链接到这篇文章来。&lt;/p>
&lt;/blockquote>
&lt;h2 id="栈分配">栈分配&lt;/h2>
&lt;p>aVLA通常分配在栈上，这就绝大部分问题的根源。我们来看一个非常简单并且看起来很适合aVLA的例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">long&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%Lf&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你可以发现，这段代码从用户的输入读取数组长度。编译并且跑一下试试，看看在堆栈溢出造成区块错误（segfault）前，你可以输入多少值。在我的测试里这个上限是50万。这只是一个基础数据类型！想象以下对于一个结构体这个上限可能是多少！或者如果不仅仅是&lt;code>main()&lt;/code>？考虑下递归函数？这个上限会大幅降低。&lt;/p>
&lt;p>并且，你没有任何（可移植、标准）的方法来处理堆栈溢出——你的程序已经无可救药地崩了。因此你要么需要在声明数组之前进行严格的长度审查，要么指望用户不要输入太大的数据。（这样赌博的后果显而易见）&lt;/p>
&lt;p>因此程序员&lt;strong>必须&lt;/strong>保证aVLA的商都不能超过安全的上限。但是实际情况里，如果你知道这个安全上限，那没道理你不会去确认它。&lt;/p>
&lt;h2 id="最糟糕的是">最糟糕的是&lt;/h2>
&lt;p>最糟糕的是segfault只是不当使用aVLA造成的后果中最好的一个。最坏情况是造成可以被利用的漏洞，攻击者可能会选择一个值，使得这个数组与其他内存分配重叠，从而控制那些值。这是个安全性灾难。&lt;/p>
&lt;blockquote>
&lt;p>如果你接受（进一步）损失程序性能，在GCC中你可以开启&lt;code>-fstack-clash-protection&lt;/code>选项，它会在进行变长栈空间分配时，增加额外的指令来在每个内存页上进行探测。这可以确保所有的栈分配是有效的，或者在无效的时候抛出segfault，来缓解栈冲突（stack-clash）问题，从而将可能的代码执行攻击变成服务拒绝（denial of service）&lt;/p>
&lt;/blockquote>
&lt;h2 id="那如何修改这个例子">那如何修改这个例子？&lt;/h2>
&lt;p>如果我想让用户决定数组大小并且创建大的离谱的定长数组很浪费？很简单，用&lt;code>malloc()&lt;/code>！&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">long&lt;/span> &lt;span class="kt">double&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">sizeof&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%Lf&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子里我可以最大输入13亿而不让我的机子报错。这大概是之前的2500倍！但是我最后仍然会碰到segfault是吧？唔，区别在于我们可以检查&lt;code>malloc()&lt;/code>的返回值，然后比如我们就可以告知用户：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">long&lt;/span> &lt;span class="kt">double&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">sizeof&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">perror&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;malloc()&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// output: &amp;#34;malloc(): Cannot allocate memory&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>我碰到过相左的观点：C经常被用于系统和嵌入式的语言，这些情况下可能都没法使用&lt;code>malloc()&lt;/code>。&lt;/p>
&lt;p>唉。。看来我又要重复一遍了，不过这确实很重要。&lt;/p>
&lt;p>在这种设备上你同样也没有多少栈空间。因此相比于在栈上动态分配空间，你应该确定你到底需要多少内存然后只使用固定尺寸的内存。&lt;/p>
&lt;p>当在栈空间很小的设备上使用aVLA的时候，你很容易弄出一些看起来能用的东西，但是当你的函数在栈已经很深的，有很多数据的时候被调用，你的栈就会炸。&lt;/p>
&lt;p>如果你在每个地方都分配固定尺寸的栈空间，那么你知道这肯定没问题。如果你在栈上动态分配内存，你需要测试你所有的代码路径，并且在所有可能的分配尺寸情况下进行测试，这比前者更难更容易出错。不要在甚至没有好处的情况下让它更容易射到你的脚（一个歇后语：footgun）&lt;/p>
&lt;/blockquote>
&lt;h2 id="意外创建">意外创建&lt;/h2>
&lt;p>不像其他危险的C语言特性，aVLA没有什么门槛。很多新手会在试错之后开始使用这个特性，却根本不了解它的问题。有些时候甚至很有经验的程序员都会大意，在不需要aVLA的时候创建它。以下就是一个完全没必要的静静地创建了一个aVLA的例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>好在只要是个比较现代的编译器都会发现并且把这个aVLA给优化掉，但是。。。万一它没发现呢？或者它处于某种原因（安全？）没有这么做呢？优化没打开呢？但这肯定都问题不大，是吧？呃。。。&lt;/p>
&lt;h2 id="比定长慢">比定长慢&lt;/h2>
&lt;p>在编译器不优化的情况下，之前这个&lt;a class="link" href="https://godbolt.org/z/c7nPvGGcP" target="_blank" rel="noopener"
>aVLA的例子&lt;/a>在数组初始化之前会生成7倍多的汇编指令，相比于它&lt;a class="link" href="https://godbolt.org/z/jx94vx84T" target="_blank" rel="noopener"
>对应的定长情况&lt;/a>（参见&lt;code>jmp .L5&lt;/code>之前的汇编部分）。但这是没有开编译器优化的情况，如果开了生成的汇编是一模一样的。&lt;/p>
&lt;p>这里有一个aVLA不是意外插入的例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">bar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#if 1 &lt;/span>&lt;span class="c1">// 1 for aVLA, 0 for aVLA-free
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">;)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">bar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#else
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">// Let&amp;#39;s make it bigger than 10! (or there won&amp;#39;t be what to examine)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">;)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">bar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">bar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">B&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">;)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d %d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">B&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>处于介绍的目的，在这个例子中&lt;code>-O1&lt;/code>级别的优化是最好的（生成的汇编会更清楚，然后&lt;code>-O2&lt;/code>并不会有太大的用处）。&lt;/p>
&lt;p>当我们编译aVLA的版本，在&lt;code>for&lt;/code>循环之前的指令如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">push rbp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mov rbp, rsp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">push r14
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">push r13
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">push r12
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">push rbx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mov r13d, edi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">movsx r12, edi ; here aVLA &amp;#34;starts&amp;#34;...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sal r12, 2 ;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lea rax, [r12+15] ;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">and rax, -16 ;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sub rsp, rax ;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mov r14, rsp ; ... and there &amp;#34;ends&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>而无aVLA的版本则生成：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">push r12
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">push rbp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">push rbx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sub rsp, 4000 ; this is caused by array definition
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mov r12d, edi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>因此不仅定长数组生成更少的代码，它也简单多了。为什么aVLA在最开始的时候会产生更多的开销？它没有什么特别伟大的任务，但仍然不是简简单单的一个指针移动。&lt;/p>
&lt;p>但是这些区别影响很大吗？&lt;a class="link" href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=02361bc77888" target="_blank" rel="noopener"
>是的，很大&lt;/a>。&lt;/p>
&lt;h2 id="无法初始化">无法初始化&lt;/h2>
&lt;p>在aVLA不经意间造成的问题中还有如下不被允许的例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>即便开了优化，aVLA仍然不支持初始化。因此尽管我们想要的是定长数组并且理论上编译器可以干这件事，但它就是行不通。&lt;/p>
&lt;h2 id="给编译器作者带来麻烦">给编译器作者带来麻烦&lt;/h2>
&lt;p>几个月前我存了Reddit上的一个&lt;a class="link" href="https://www.reddit.com/r/C_Programming/comments/jz2213/are_vlas_bad_even_if_theyre_not_allocated_on_the/gdc3hz6" target="_blank" rel="noopener"
>评论&lt;/a>，它列举了从编译器开发者的角度在VLA上碰到的问题。我把它引在下面：&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>VLA其实适用于一个类型，而不是一个实际数组。因此你可以给VLA类型加一个&lt;code>typedef&lt;/code>，它会冻结用到的表达式，即便这个表达式的一部分在VLA类型被使用的时候已经变了&lt;/li>
&lt;li>VLA可以在代码块和循环中使用，这意味着要在栈上分配和释放动态长度的数据，如果你不想让偏移量（offsets）被乱搞，你就需要用指针来间接地实现它。&lt;/li>
&lt;li>你可以在有VLA被使用的情况下用&lt;code>goto&lt;/code>跳进或者跳出代码块，有些事情会被限制，但是也有不被限制的，而编译器却需要跟踪所有的这些骚操作&lt;/li>
&lt;li>VLA可以被用在多维数组上&lt;/li>
&lt;li>VLA可以被指针指向（因此你不需要分配空间，但是仍然需要跟踪所有变量的大小）&lt;/li>
&lt;li>有些编译器允许在结构体定义里面使用VLA（我真的不知道这是怎么弄的，或者在什么地方VLA的尺寸被定下来了，然后所有的结构体会拥有同样的VLA尺寸）&lt;/li>
&lt;li>一个函数可以同时有多个VLA被使用，并且它们可以在不同的地方，或者有条件地，或者在循环里被创建或者销毁。&lt;/li>
&lt;li>&lt;code>sizeof&lt;/code>需要被专门针对VLA实现（针对一个VLA实体，VLA类型，混合VLA和定长尺寸的类型，VLA数组，VLA指针）&lt;/li>
&lt;li>VLA这个词还被用于描述（当维数由传入参数确定时）多维数组的参数&lt;/li>
&lt;li>在Windows上用有些编译器的时候（至少GCC是这样），声明过大的局部数组（使得栈尺寸超过4KB）意味着要调用一个特殊的分配器（&lt;code>__chkstk()&lt;/code>），因为栈空间一次只能增长一个内存页）。当声明一个VLA的时候，编译器不知道它的长度，因此它需要在每个涉及的函数里都调用（&lt;code>__chkstk()&lt;/code>），即便VLA的尺寸实际上很小。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>并且相信我，如果你在C语言的一些论坛里溜一圈，你会发现更多不同的抱怨。&lt;/p>
&lt;h2 id="降低可移植性">降低可移植性&lt;/h2>
&lt;p>由于前面提到的这所有问题，有些编译器决定不完全支持C99。最主要的例子是微软的MSVC。C语言标准委员会页注意到了这个问题，并且在C11修订版中将VLA的支持标为可选的。&lt;/p>
&lt;blockquote>
&lt;p>C2x计划将推翻这个决定，但是aVLA仍然不是强制的&lt;/p>
&lt;/blockquote>
&lt;p>这意味着使用VLA的代码有可能没法被一个C11编译器编译。因此你需要检查&lt;code>__STDC_NO_VLA__&lt;/code>宏，并且在不支持的时候增加备用选项。&lt;/p>
&lt;blockquote>
&lt;p>另外，C++没有VLA并且没有证据表明它有将来会支持。这不是什么大事，但是仍然给C的VLA提供了一个反例&lt;/p>
&lt;/blockquote>
&lt;h2 id="挑骨头打破调用习惯">（挑骨头）打破调用习惯&lt;/h2>
&lt;p>这是鸡蛋里挑骨头了，但是它确实是另一个让人不喜欢VLA的原因。一个常用的函数调用习惯是先传指针，再传参数，对于数组它的意思是：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">**&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="cm">/* arr[i][j] = ... */&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>C99标准中，提到数组的长度必须在参数列表里遇到的时候立马被分析确定，这意味着在用VLA的时候你没法用跟上面一样的语法&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="cm">/* arr[i][j] = ... */&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="c1">// 非法！
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你需要&lt;/p>
&lt;ul>
&lt;li>打破这个习惯
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="cm">/* arr[i][j] = ... */&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>或者使用过时的语法（即将被标准删除）
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// arr[i][j] = ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="结论">结论&lt;/h2>
&lt;p>简而言之，别用VLA，编译你代码的时候开启&lt;code>-Wvla&lt;/code>开关。VLA特性带来了很多危险却经常没有与之匹配的有用的回报。如果你发现在你的使用场景里里VLA是一个有效的解决方法，那就用它，但是记住我上面所提到的这些局限。&lt;/p>
&lt;blockquote>
&lt;p>可能还值得一提的是，VLA还被认为是解决问题同样很多的，不标准的&lt;code>alloca()&lt;/code>的一个途径。&lt;/p>
&lt;/blockquote></description></item><item><title>长浮点数（long double）的陷阱</title><link>https://zyxin.xyz/blog/2022-07/ThePitfallOfLongDouble/</link><pubDate>Sun, 24 Jul 2022 01:19:33 +0000</pubDate><guid>https://zyxin.xyz/blog/2022-07/ThePitfallOfLongDouble/</guid><description>&lt;p>{% note default %}&lt;/p>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>此文转载自Prelert的博客，作者为David。这篇文章目前只能&lt;a class="link" href="https://web.archive.org/web/20170422155137/http://info.prelert.com/blog/author/david" target="_blank" rel="noopener"
>在WebArchive找到&lt;/a>了，因此我把此文转载并翻译到我的博客上。&lt;/p>
&lt;p>我是在搜索为什么Rust没有对应C/C++中&lt;code>long double&lt;/code>的数据类型的时候看到了这篇博文，Rust不提供对应的数据类型造成了一些互操作性的问题（参见&lt;a class="link" href="https://immunant.com/blog/2019/11/rust2020/#:~:text=long%20doubletypes%20in%20C%20are%20specified%20as%20being,with%20C%20code%2C%20Rust%20needs%20to%20support%20long" target="_blank" rel="noopener"
>这里&lt;/a>和&lt;a class="link" href="https://github.com/rust-lang/rust-bindgen/issues/1549" target="_blank" rel="noopener"
>这里&lt;/a>）。与此相对的是，Zig和新发布的Carbon语言都支持&lt;code>f16&lt;/code>和&lt;code>f128&lt;/code>数据类型（其中Zig还支持&lt;code>f80&lt;/code>，Carbon还支持&lt;code>bfloat16&lt;/code>）。不过这倒是不令人意外，因为Zig和Carbon都以与C/C++的极致兼容性为卖点。这篇博客也许能解释一部分Rust不支持更高精度浮点数的原因。
{% endnote %}&lt;/p>
&lt;h2 id="正文">正文&lt;/h2>
&lt;p>C++ 提供三种浮点数据类型：&lt;code>float&lt;/code>, &lt;code>double&lt;/code> 和 &lt;code>long double&lt;/code>。关于这些类型，&lt;a class="link" href="http://webstore.ansi.org/RecordDetail.aspx?sku=INCITS%2FISO%2FIEC&amp;#43;14882-2012" target="_blank" rel="noopener"
>C++11标准&lt;/a>只提到了：&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>double&lt;/code>类型需要提供至少与&lt;code>float&lt;/code>同等的精度，而&lt;code>long double&lt;/code>需要提供至少与&lt;code>double&lt;/code>同等的精度。&lt;/p>
&lt;p>&lt;code>float&lt;/code>类型所有支持的数值是&lt;code>duoble&lt;/code>的子集；&lt;code>double&lt;/code>类型所有支持的数值是&lt;code>long duoble&lt;/code>的子集。各浮点类型的数据表示方法取决于具体的实现。&lt;/p>
&lt;/blockquote>
&lt;p>但是，几乎所有C++编译器都带一个C编译器，而&lt;a class="link" href="http://webstore.ansi.org/RecordDetail.aspx?sku=INCITS/ISO/IEC%209899-1999%20%28R2005%29" target="_blank" rel="noopener"
>C99标准&lt;/a>的F附件则有更详细的规定：&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;code>float&lt;/code> 类型对应IEC 60559标准的单精度浮点数&lt;/li>
&lt;li>&lt;code>double&lt;/code> 类型对应IEC 60559标准的双精度浮点数&lt;/li>
&lt;li>&lt;code>long double&lt;/code>类型对应IEC 60559标准的扩展精度浮点数，或者非IEC 60559的扩展精度浮点数，或者IEC 60559的双精度浮点数。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>只有一个彻头彻尾的M才会编写一个在C++和C部分使用不同浮点类型的C++编译器，因此实际上C++也要服从同样的规定。我所使用果的所有近20年内的C++编译器都使用&lt;a class="link" href="http://en.wikipedia.org/wiki/IEEE_floating_point" target="_blank" rel="noopener"
>IEC 60559&lt;/a>（也就是&lt;a class="link" href="http://en.wikipedia.org/wiki/IEEE_754-1985" target="_blank" rel="noopener"
>IEEE 754&lt;/a>）所规定的单精度和双精度浮点数，但是在实现最后一个类型——&lt;code>long double&lt;/code>——上这些编译器会有不一致，这也导致了一些问题。&lt;/p>
&lt;p>在我的整个软件开发生涯中，我遇到过的几次与&lt;code>long double&lt;/code>类型相关的问题，可以被归为两类：&lt;/p>
&lt;ol>
&lt;li>缺乏测试&lt;/li>
&lt;li>可移植性&lt;/li>
&lt;/ol>
&lt;h3 id="缺乏测试">缺乏测试&lt;/h3>
&lt;p>在去年底我记录了一个&lt;a class="link" href="https://web.archive.org/web/20170305103541/http://www.prelert.com/blog/linux-speeds-ahead/" target="_blank" rel="noopener"
>可以归为第一类的问题&lt;/a>。一个glibc在x86_64平台上的&lt;code>powl()&lt;/code>函数实现中的&lt;a class="link" href="http://sourceware.org/bugzilla/show_bug.cgi?id=2445" target="_blank" rel="noopener"
>bug&lt;/a>有五年多未得到修复。我感觉如果这个bug是在用的更广泛的&lt;a class="link" href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/pow.html" target="_blank" rel="noopener"
>&lt;code>pow()&lt;/code>&lt;/a>函数中，那么会有更多人感到惊奇然后有人会更快修复它。因为这个函数的&lt;code>long double&lt;/code>版本用的人较少，因此这个bug就烂在那了。&lt;/p>
&lt;p>另一个&lt;code>long double&lt;/code>缺乏测试的例子是我在加入Prelert之前碰到的，与IBM的xlC/C++编译器相关在&lt;a class="link" href="http://www-03.ibm.com/systems/power/software/aix/" target="_blank" rel="noopener"
>AIX&lt;/a>系统上的问题。调用这个编译器的时候使用的名字（硬链接）决定了它的行为方式，当使用名称 xlC128_r 调用编译器时，它使用128位的 long double 表示。然后有一段时间，即使是最简单的程序编译都会崩（core dump）。尽管&lt;a class="link" href="http://www-01.ibm.com/support/docview.wss?uid=swg1IY96361" target="_blank" rel="noopener"
>bug报告&lt;/a>里面提到了一个调用&lt;a class="link" href="http://pubs.opengroup.org/onlinepubs/007908775/xsh/fork.html" target="_blank" rel="noopener"
>fork()&lt;/a>的例子，但其实如果打开了&lt;a class="link" href="http://publib.boulder.ibm.com/infocenter/comphelp/v8v101/index.jsp?topic=%2Fcom.ibm.xlcpp8a.doc%2Fcompiler%2Fref%2Fruoptbrt.htm" target="_blank" rel="noopener"
>-brtl&lt;/a>开关，最简单的&amp;quot;hello world&amp;quot;程序也能崩！显然所有的测试都是在使用其他更常用的名字调用编译器时完成的（这些情况下&lt;code>long double&lt;/code>不是128位）。&lt;/p>
&lt;h3 id="可移植性">可移植性&lt;/h3>
&lt;p>而关于可移植性，一些需要注意的坑有：&lt;/p>
&lt;ol>
&lt;li>微软的&lt;a class="link" href="http://en.wikipedia.org/wiki/Visual_C%2B%2B" target="_blank" rel="noopener"
>Visual C++&lt;/a>使用IEEE 754双精度浮点数表示&lt;code>long double&lt;/code>——跟&lt;code>double&lt;/code>一样（&lt;code>C99&lt;/code>标准所允许的第三种情况）。因此在你的代码中区分&lt;code>long double&lt;/code>和&lt;code>double&lt;/code>毫无意义如果你只用微软的VC++进行编译。但如果你的代码需要支持别的平台并且你仍然使用&lt;code>long double&lt;/code>，那么你就给你的代码里面掺入了一个很关键的，与平台相关的行为区别，它会让你吃亏的。大部分其他x86编译器都把&lt;code>long double&lt;/code>看作&lt;a class="link" href="http://en.wikipedia.org/wiki/X87" target="_blank" rel="noopener"
>x87&lt;/a>所使用的80位扩展精度浮点数。&lt;/li>
&lt;li>在&lt;a class="link" href="http://en.wikipedia.org/wiki/SPARC" target="_blank" rel="noopener"
>SPARC芯片&lt;/a>上（我知道它已经快挂了），&lt;code>long double&lt;/code>类型使用128位的表示，但是默认情况下，编译器会生成软件实现，而非硬件实现的（浮点数）操作。这个情况可以回溯到大部分SPARC芯片都不支持这样的操作，然后使用中断来实现的时候。在软件层面实现浮点操作比去响应这些中断要快。但是软实现的浮点操作比硬件加速的浮点操作慢好几个数量级——我们发现一些单元测试会慢20倍，而且这些并不是单纯的做&lt;code>long double&lt;/code>运算的测试。这是一个牺牲性能来换取代码（在编译和正确性方面）可移植的例子。&lt;/li>
&lt;/ol>
&lt;p>参考其他可移植的语言很有指导意义。Java有与IEEE754的单/双精度浮点数对应的&lt;a class="link" href="http://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html" target="_blank" rel="noopener"
>&lt;code>float&lt;/code>和&lt;code>double&lt;/code>类型&lt;/a>（并且不像C++，Java标准&lt;a class="link" href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.2.3" target="_blank" rel="noopener"
>对如何实现浮点数运算非常明确&lt;/a>）。Java没有给程序员提供&lt;code>long double&lt;/code>类型，大概是因为我上面提到的可移植性问题（尽管这个标准允许在中间计算过程中使用x87扩展精度的格式）。&lt;a class="link" href="http://docs.python.org/2/library/stdtypes.html#typesnumeric" target="_blank" rel="noopener"
>Python&lt;/a>只有一个&lt;code>float&lt;/code>类型，并且“通常用C语言的&lt;code>double&lt;/code>实现”。因此，如果你的整体系统包含使用其他语言编写的组件，那你弃用&lt;code>long double&lt;/code>可以避免数据交换中的问题。同样的道理也适用于在数据库中存储浮点数——例如&lt;a class="link" href="http://www.postgresql.org/" target="_blank" rel="noopener"
>PostgreSQL&lt;/a>提供&lt;a class="link" href="http://www.postgresql.org/docs/9.2/static/datatype-numeric.html#DATATYPE-FLOAT" target="_blank" rel="noopener"
>&lt;code>real&lt;/code>和&lt;code>double&lt;/code>&lt;/a>，对应IEEE 754的单/双精度浮点数。&lt;/p>
&lt;p>最后，一个在x86 CPU上只用&lt;code>float&lt;/code>和&lt;code>double&lt;/code>的好处是，编译器可以利用上CPU的&lt;a class="link" href="http://en.wikipedia.org/wiki/Streaming_SIMD_Extensions" target="_blank" rel="noopener"
>SSE&lt;/a>单元，然后两次或四次（浮点）运算有机会并行完成。这时使用64位调用约定的把函数参数传到寄存器中，那之后就可以直接使用SSE寄存器了。反之，&lt;code>long double&lt;/code>变量只能在&lt;code>x87&lt;/code>浮点运算单元中使用，并且不会使用寄存器传参，从而让程序变慢了。&lt;/p>
&lt;h3 id="结论">结论&lt;/h3>
&lt;p>有些人可能会说，使用&lt;code>long double&lt;/code>可以提高结果的精度。这可能是对的，但是无论一个固定精度的浮点数有多少有效位数，它都会有有效位数损失的情况（如果使用的算法不好的话）。使用扩展精度而不是双精度可能会在某些情况下避免这些问题，但是长期来看唯一的解决方法是使用更适合计算机的算法，或者设法检测有效位数损失，并且把结果替换成合适的值。&lt;/p>
&lt;p>在我看来，如果你想编写可移植的C++代码，使得它不仅可以在多个平台运行，并且在某些平台上没有很夸张的性能问题，你最好避开&lt;code>long duoble&lt;/code>。这也是我们在Prelert做法——我们的C++代码不使用&lt;code>long duoble&lt;/code>，并且在使用Boost的时候我们定义&lt;a class="link" href="http://www.boost.org/doc/libs/1_54_0/libs/math/doc/html/math_toolkit/config_macros.html#math_toolkit.config_macros.boost_math_macros" target="_blank" rel="noopener"
>BOOST_MATH_NO_LONG_DOUBLE_MATH_FUNCTIONS&lt;/a>这个宏，让&lt;a class="link" href="http://www.boost.org/doc/libs/1_54_0/libs/math/doc/html/index.html" target="_blank" rel="noopener"
>Boost.Math&lt;/a>也不使用。&lt;/p></description></item><item><title>冬日取暖最佳方式 — 利用闲置的计算资源</title><link>https://zyxin.xyz/blog/2021-11/UtilizeYourComputationPower/</link><pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2021-11/UtilizeYourComputationPower/</guid><description>&lt;img src="https://zyxin.xyz/blog/2021-11/UtilizeYourComputationPower/primenet-ranking.png" alt="Featured image of post 冬日取暖最佳方式 — 利用闲置的计算资源" />&lt;p>最近突发奇想，想到自己有几台电脑，性能都不错但是经常闲置，包括实验室的服务器也不是每时每刻都在充分利用资源，因此完全可以跑一些别的程序来利用。我最先想到的就是以前做电脑压力测试的Prime95程序，然后一搜发现这里面还是有不少门道的。本文介绍一下如何利用你家电脑闲置的性能,将其贡献给科学事业，并且在冬天的夜晚让它的散热成为一大取暖来源~哈哈哈哈&lt;/p>
&lt;h2 id="gimps">GIMPS&lt;/h2>
&lt;p>我最先测试的程序是Prime95，Prime95是梅森素数搜索计划（Great Internet Mersenne Prime Search, GIMPS）的Windows客户端。这个计划旨在利用互联网的计算资源来寻找梅森素数。形如$2^p-1$（$p$为素数）的数被称为梅森数，如果这个梅森数也是素数那么就被称为梅森素数。梅森素数是目前寻找大素数最高效的目标，人类发现最大的质数前几名都来自于GIMPS发现的梅森素数。&lt;/p>
&lt;p>如果你不想知道很多信息，只想直接开冲，那么你只需要从&lt;a class="link" href="https://www.mersenne.org/download/" target="_blank" rel="noopener"
>GIMPS官网&lt;/a>下载Prime95（Windows）/ mprime（Linux），解压后双击直接开跑就可以了。如果你希望了解这个程序具体在干什么，或者想青史留名找到新的梅森素数，那么请接着往下读这一节~&lt;/p>
&lt;h3 id="primenet">PrimeNet&lt;/h3>
&lt;p>首先需要介绍一下GIMPS的分布式计算网络，名字叫PrimeNet。PrimeNet负责分发计算任务和收集计算结果。由于梅森素数的形式是$2^p-1$，因此PrimeNet中把$p$称为Exponent（指数），验证每个指数对应的梅森数是否为素数是独立的。目前PrimeNet中对于每个指数有如下几种计算任务，括号内为PrimeNet中的缩写：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Trial Factor&lt;/strong> (TF): 暴力遍历素数，测试每个素数是否是当前梅森数的因数。&lt;/li>
&lt;li>&lt;strong>P-1 Test&lt;/strong> (PM1): &lt;a class="link" href="https://en.wikipedia.org/wiki/Pollard%27s_p_%E2%88%92_1_algorithm" target="_blank" rel="noopener"
>Pollard $p-1$&lt;/a>测试法，可以在一定范围内寻找到一个因数$q$，前提是$q-1$是&lt;em>高度复合的&lt;/em>（也被称为&lt;em>smooth&lt;/em>，意思是由很多很多小的质因数合成的合数）&lt;/li>
&lt;li>&lt;strong>P+1 Test&lt;/strong> (PP1): &lt;a class="link" href="https://en.wikipedia.org/wiki/Williams%27s_p_%2B_1_algorithm" target="_blank" rel="noopener"
>Williams $p+1$&lt;/a>测试法，跟P-1测试类似，但是寻找的因数$q$需满足$q+1$高度复合。&lt;/li>
&lt;li>&lt;strong>Lucas-Lehmer Test&lt;/strong> (LL): 一种验证梅森数是否为质数的算法，该算法虽然很简单，但是非常耗时。&lt;/li>
&lt;li>&lt;strong>Double Check&lt;/strong> (D): 由于计算机在运算过程中可能会非常罕见地产生差错（这也是为什么人们需要ECC内存），因此为了确保素性判断正确，PrimeNet会让另外一台计算机重新计算Lucas-Lehmer，但是使用不同的初始参数，以验证计算的正确性。&lt;/li>
&lt;li>&lt;strong>Probable Prime Test&lt;/strong> (PRP): 这个测试是一种Fermat测试，但是使用了一种改进的验证方法。该算法会在测试过程中生成一个无法仿造的&lt;em>证明文件&lt;/em>，这个证明文件可以由另一台计算机很快验证，大大减少了运算量。（但是好像这个算法只能得到Probable Prime，最后的验证应该还是需要使用Lucas-Lehmer）&lt;/li>
&lt;li>&lt;strong>Proof Verification&lt;/strong> (CERT): 即验证PRP生成的证明的任务&lt;/li>
&lt;/ul>
&lt;p>除了这些任务之外，PrimeNet还衍生出了因数分解的任务，即尝试对质数验证失败的梅森数进行完整因数分解，在这个过程中也有可能发现非常大的质数，被称为co-factor。因数分解任务有如下两种：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Elliptic Curve Factorization&lt;/strong> (ECM): 利用椭圆曲线分解法进行因数分解，可以寻找一定范围以内的因数&lt;/li>
&lt;li>&lt;strong>Probable Prime Cofactor Test&lt;/strong> (PRP-CF): 对于梅森数除去找到的因数还剩下的因数进行素性测试，这个剩下的数通常仍然非常大，因为因数分解的方法通常只能找到几十位的因数，再大的因数实在太难计算了。
目前PrimeNet中因数分解的任务只分配给指数为四千万以下的梅森数。另外，以上这些任务只是大类，实际上PrimeNet中的任务划分更细一点，比如TF会分为普通TF和TF-LMH，后者优先选择TF进展比较小的指数进行分解。&lt;/li>
&lt;/ul>
&lt;p>PrimeNet中目前验证一个梅森数的完整流程大概如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">TF 2~2^63 -&amp;gt; TF 2^63 ~ 2^64 -&amp;gt; ... -&amp;gt; TF到2^78左右 -&amp;gt; PM1 -&amp;gt; PRP
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>将验证分为这么多步的原因主要还是为了减少计算量，TF和PM1在测试小因数的时候比较快，而Lucas-Lehmer虽然可以直接测试梅森数的素性，但是用TF和PM1粗筛可以大大减少计算量。这里TF计算的上限和PM1测试的范围都是PrimeNet根据找到因数的概率和计算耗时之间权衡之后算出来的。&lt;/p>
&lt;p>在早期PRP证明的算法还没有出现的时候（2020年以前），完整流程实际上是&lt;code>TF -&amp;gt; PM1 -&amp;gt; LL -&amp;gt; DC&lt;/code>，因此目前PrimeNet还有大量积攒的LL测试没有被双重验证果，因此目前发现的梅森素数M74207281、M77232917、M82589933的顺位还没有被确定。&lt;/p>
&lt;p>PrimeNet的整体进展可以在&lt;a class="link" href="https://www.mersenne.org/primenet/" target="_blank" rel="noopener"
>GIMPS官网的任务分配表中&lt;/a>中查看，这个表中展示了每一个范围中指数的状态。&lt;/p>
&lt;blockquote>
&lt;p>最右边的一大列&lt;code>Available&lt;/code>指的是还没有被认领的任务，右边第二列&lt;code>Assigned&lt;/code>指的是已被认领的任务，左边&lt;code>Composite&lt;/code>里面F指的是找到因数的梅森数、DC指的是验证过的LL/PRP测试为合数的梅森数，右边&lt;code>Status Unproven&lt;/code>中LL/PRP这一列指的是LL测试还没有被验证的指数，ERR指的是LL计算中出现错误的，而NO-LL则是完成了P-1测试后还没有经过LL/PRP测试的指数。&lt;/p>
&lt;/blockquote>
&lt;h3 id="客户端">客户端&lt;/h3>
&lt;p>在了解了计算任务的种类之后，接下来就是选择下载合适的客户端了。GIMPS除了官方的Prime95之外还有不少第三方实现的客户端。如果你想用CPU跑的话，直接使用官方的Prime95/mprime客户端即可；如果你的电脑有GPU，那么你可以选择GPU客户端，比较常用的有mfaktc (NVIDIA) / mfakto (AMD) / gpuowl (通用)。我主要使用的是gpuowl，因为它的代码最近仍然有更新，编译方便，并且支持P-1和PRP测试，而mfaktc和mfakto只能进行TF。不过gpuowl在windows上不太好编译。还有一些其他的GPU客户端，具体可以参考&lt;a class="link" href="https://www.mersenneforum.org/showpost.php?p=488289&amp;amp;postcount=1" target="_blank" rel="noopener"
>GIMPS论坛的这个介绍贴&lt;/a>。&lt;/p>
&lt;p>在使用客户端之前，首先可以在GIMPS官网上注册一个账户，这个账户即你在PrimeNet中的账户，在使用客户端的时候把用户名提供给客户端，这样可以让PrimeNet统计你的贡献。PrimeNet的贡献统计以GHz-days（GHD）为单位，每个任务的GHD数值通过一定的公式进行估算的，并不是直接统计你的CPU频率乘上你所花费的时间。据我的经验，如果你想拥有最高的GHD/day，使用CPU和GPU比较划算的都是TF任务。&lt;/p>
&lt;p>另外注册账户之后，你还可以选择一个Team加入，这样你的贡献值同样会被计算到Team中。目前我加入的GIMPSChina团队近年的贡献量排名第三，可喜可贺！&lt;/p>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2021-11/UtilizeYourComputationPower/primenet-ranking.png"
width="1212"
height="191"
loading="lazy"
alt="GIMPSChina排名"
class="gallery-image"
data-flex-grow="634"
data-flex-basis="1522px"
>&lt;/p>
&lt;p>关于客户端的使用上，各个客户端基本都是解压之后即可使用，或者编译后使用。使用Prime95客户端的话程序会自动下载新的计算任务，你只需要设置CPU和内存的占用情况即可。如果你要跑TF/DC/PRP任务，那么只需要设置线程数即可，如果要跑PM1，那么需要设置内存上限至少为1G，并且越高越好。内存的设置在菜单里Resource Limit一栏的Advanced项目里面。而用gpuowl的话需要手动申请任务，在&lt;a class="link" href="https://github.com/preda/gpuowl#usage" target="_blank" rel="noopener"
>Github主页上有说明具体的使用方法&lt;/a>。注意新的PrimeNet账户在一段时间（两三天）内是没法提交手动申请任务的结果的，需要管理员审核后才能提交，原因是之前有人恶意提交错误结果，具体情况参见&lt;a class="link" href="https://www.mersenneforum.org/showthread.php?t=24103&amp;amp;page=14" target="_blank" rel="noopener"
>这个GIMPS论坛的帖子&lt;/a>。&lt;/p>
&lt;h3 id="其他素数寻找项目">其他素数寻找项目&lt;/h3>
&lt;p>GIMPS是最早的互联网寻找素数的项目，后来受GIMPS的影响产生了很多新的项目，例如&lt;a class="link" href="https://srbase.my-firewall.org/sr5/" target="_blank" rel="noopener"
>SRBase&lt;/a>，&lt;a class="link" href="https://www.gpu72.com/" target="_blank" rel="noopener"
>GPU72&lt;/a>以及PrimeGrid。SRBase旨在寻找形如$k*b^n\pm 1$的素数，其中$k$为偶数，$b$为基；GPU72旨在利用GPU扩大梅森数的分解范围（提高到10亿，PrimeNet目前只搜索到1亿）；PrimeGrid则是一系列质数寻找项目的集合。这些项目之间通常会相互分享因数分解的结果。另外，在&lt;a class="link" href="https://primes.utm.edu/" target="_blank" rel="noopener"
>PrimePages&lt;/a>网站上有统计目前已知的各个形式的最大质数，在&lt;a class="link" href="https://www.mersenne.ca/" target="_blank" rel="noopener"
>Mersenne.ca&lt;/a>网站上有更详细的梅森数计算结果统计。&lt;/p>
&lt;h2 id="boinc">BOINC&lt;/h2>
&lt;p>除了GIMPS之外另一个更广为人知的志愿科学计算项目则是伯克利的Berkeley Open Infrastructure for Network Computing (BOINC)。这一项目给科学计算提供了统一的计算分发框架，里面有不少大型合作项目，涵盖数学、物理、天文、生物等多方面。&lt;/p>
&lt;h3 id="使用教程">使用教程&lt;/h3>
&lt;p>参与BOINC的计算就更加简单了，首先你需要安装一个BOINC客户端，在&lt;a class="link" href="https://boinc.berkeley.edu/download.php" target="_blank" rel="noopener"
>官网上可以下载到&lt;/a>。在安装完成之后，只需要在项目列表里面选择自己喜欢的项目即可参加。通常每个项目都有自己的网站，并且你需要在网站上注册账号，以便于该项目追踪你的贡献，这个步骤在你选择想参加的项目之后会提示你进行操作。参加项目之后，BOINC便会开始自动分配你可以参加的项目。&lt;/p>
&lt;p>BOINC客户端同样支持资源占用的限制，并且支持在电脑有操作的时候暂停计算任务，更加便于你利用电脑的空闲时间进行计算了。BOINC相关项目的贡献，除了每个网站自己的统计外，还可以在第三方网站（如&lt;a class="link" href="https://stats.free-dc.org/" target="_blank" rel="noopener"
>Free-DC&lt;/a>和&lt;a class="link" href="https://www.boincstats.com/stats/" target="_blank" rel="noopener"
>BOINCStats&lt;/a>）上查到。&lt;/p>
&lt;h3 id="gridcoin">GridCoin&lt;/h3>
&lt;p>另外BOINC还有一个很吸引人的地方是，有一款加密货币叫&lt;a class="link" href="https://gridcoin.us/" target="_blank" rel="noopener"
>GridCoin&lt;/a>是专门设计用来回报BOINC参与者的。因此如果你参加了GridCoin的计算池，那么你为科学事业贡献的算力实际上也是在挖矿！算力和电力的无用消耗是我不喜欢加密货币，尤其是比特币的最大原因，而设计在BOINC之上的GridCoin则完美解决了这个问题，并且GridCoin基于Proof of Stake，而不是现在比特币和以太坊使用的Proof of Work，更加降低了额外的计算资源消耗。因此如果你愿意参与BOINC的话，可以考虑同时利用GridCoin来回馈自己。&lt;/p>
&lt;p>在使用方法上，如果你是首次参加GridCoin，那么你需要利用GridCoin的计算池来进行挖矿，这个模式被称为Pool Crunching，除了安装BOINC之外你还需要在BOINC客户端中选择GridCoin支持的项目管理器（我选择的是grcpool），这样你的计算贡献会被归到GridCoin计算池的名下，而这个计算池会根据你的贡献分配GridCoin。当你有了GridCoin之后你也可以选择独立进行计算而不依赖于计算池，这个被称为Solo Crunching，这个情况下你的计算贡献也会直接被各个项目统计到。具体的使用方法还请参考&lt;a class="link" href="https://gridcoin.us/" target="_blank" rel="noopener"
>GridCoin官网&lt;/a>&lt;/p>
&lt;hr>
&lt;p>在了解这些的过程中，我还发现了一个聚集了国内志愿计算爱好者的论坛——&lt;a class="link" href="https://equn.com/forum/" target="_blank" rel="noopener"
>中国分布式计算论坛&lt;/a>，这里面有很多BOINC和GIMPS的贡献者，他们会交流项目参与方法、项目更新等。看到有这么多人愿意给科学事业贡献自己的算力我还是感到很开心的，如果感兴趣的话欢迎加入这些科学计算项目~&lt;/p></description></item><item><title>让你的手机变身Linux — Termux设置</title><link>https://zyxin.xyz/blog/2021-11/TermuxSetup/</link><pubDate>Fri, 19 Nov 2021 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2021-11/TermuxSetup/</guid><description>&lt;p>Termux是一款在Android上运行的终端模拟器，其中内含了一个非常轻量的Linux环境，并且使用apt做包管理器。最新的Termux已经不在Play Store上更新了，安装需要去&lt;a class="link" href="https://github.com/termux/termux-app" target="_blank" rel="noopener"
>Github&lt;/a>或者&lt;a class="link" href="https://termux.com/" target="_blank" rel="noopener"
>官网&lt;/a>。旧版本的Termux在使用apt的时候可能会碰到问题。&lt;/p>
&lt;p>近来因为买了Surface Duo，在手机上稍微折腾了一下Termux，尝试是否能把手机变成Linux级别的生产力工具。结论当然是不可以，一方面性能不够，另一方面Termux上的包还是太少了，不过还是记录一下一些环境设置方法，供之后查阅。&lt;/p>
&lt;p>另外，Termux支持通过&lt;code>proot&lt;/code>包来安装完整的Linux系统，最有名的是&lt;a class="link" href="https://termuxarch.github.io/TermuxArch/" target="_blank" rel="noopener"
>TermuxArch&lt;/a>。在安装完完整系统之后，理论上你的手机就已经变成完整的Linux电脑了！不过由于我并不需要那么多功能，我没有走这一条路线。&lt;/p>
&lt;h2 id="ssh客户端">ssh客户端&lt;/h2>
&lt;p>在手机上使用ssh客户端还是非常实用的，这样可以随时随地监控各个电脑的情况，并且不怎么耗流量。在Termux里面安装ssh非常简单，直接&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">pkg install openssh &lt;span class="c1"># or apt install openssh, pkg=apt in Termux&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果你像我一样主要通过SSH Key连接各主机，那么你可能需要安装&lt;a class="link" href="https://github.com/termux/termux-api" target="_blank" rel="noopener"
>Termux:API&lt;/a>以便于从手机中拷入密钥到Termux中，还需要手动开一下ssh-agent服务。建议直接在&lt;code>.bashrc&lt;/code>（可能需要新建）中加入以下内容&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">eval&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>ssh-agent -s&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ssh-add your_key&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后如果你在服务器上有像我一样配置Powerline的话（可参考&lt;a class="link" href="https://zyxin.xyz/blog/2019-07/BeautifyTerminal/" >我之前的美化terminal的博客&lt;/a>），你可以安装&lt;a class="link" href="https://github.com/termux/termux-styling" target="_blank" rel="noopener"
>Termux:Styling&lt;/a>这个app，然后在Termux中就可以选择Nerd Font了，非常不错！&lt;/p>
&lt;h2 id="rust环境配置">Rust环境配置&lt;/h2>
&lt;p>Termux的仓库中直接有提供rust，因此可以直接&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">pkg install rustc-dev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个命令会顺带装上Clang编译器。&lt;/p>
&lt;h2 id="python环境配置">Python环境配置&lt;/h2>
&lt;p>我尝试的另一大内容就是在Termux里面搭建基本的Python环境。Termux只提供了Python的包，几乎没有提供其他任何包，因此需要手动安装。你可以直接选择安装&lt;a class="link" href="https://www.anaconda.com/products/individual#linux" target="_blank" rel="noopener"
>Anaconda&lt;/a>，但是目前由于兼容性的问题，Termux中无法运行很多给&lt;code>aarch64&lt;/code>架构编译的文件，这个问题在之后也许会被Termux解决。&lt;/p>
&lt;p>首先是安装python，直接&lt;code>pkg install python&lt;/code>即可。在我这次安装的时候，Python已经直接是3.10的版本了，很不错。然后用&lt;code>get-pip.py&lt;/code>脚本可以安装上&lt;code>pip&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">pkg install wget
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">wget bootstrap.pypa.io/get-pip.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">python get-pip.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>有了pip之后纯Python的包就可以直接装了，而用到Python扩展的包（如numpy）则需要编译器和对应的依赖项。编译器我在之前装Rust的时候顺便装上了，也可以直接通过&lt;code>pkg&lt;/code>安装Clang（Termux仓库里只有Clang没有GCC）。&lt;/p>
&lt;p>安装Numpy时如果系统里没有BLAS包，安装可以成功完成，但是会有警告，并且性能欠佳。这次我尝试给安装了一下OpenBLAS，过程还挺顺利的，命令如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">wget https://github.com/xianyi/OpenBLAS/releases/download/v0.3.18/OpenBLAS-0.3.18.tar.gz &lt;span class="c1"># choose your version&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tar -xzf OpenBLAS-0.3.18.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> OpenBLAS-0.3.18
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pkg install perl binutils &lt;span class="c1"># install dependencies&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">make -j4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">make &lt;span class="nv">PREFIX&lt;/span>&lt;span class="o">=&lt;/span>/data/data/com.termux/files/usr install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>安装好OpenBLAS之后再&lt;code>pip install numpy&lt;/code>，这时Numpy会自动找到OpenBLAS。在有了Numpy之后，许多依赖于Numpy的包也很容易能装上了（如Cython、Pandas，但是Scipy装不了，因为Scipy需要Lapack和gfortran，这意味着需要把GCC的工具链导进来，这里我就懒得弄了。如果有需要的话一位Github老哥自己搭建了一个&lt;a class="link" href="https://github.com/its-pointless/gcc_termux" target="_blank" rel="noopener"
>apt仓库&lt;/a>，可以从那里安装）&lt;/p>
&lt;p>之后我还尝试了安装Jupyter Notebook和matploblib / plotly&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># install jupyter notebook&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pkg install libzmq &lt;span class="c1"># dependency for jupyter notebook kernel&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pip install notebook
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># install pillow, and then matploblib / plotly&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pkg install libjpeg-turbo libtiff freetype libwebp tcl tk libraqm littlecms zstd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">LDFLAGS&lt;/span>&lt;span class="o">=&lt;/span>-L/system/lib64 pip install pillow
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pip install matplotlib plotly
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;p>值得一提的是就如前文所说，Termux好像无法正常运行通常给aarch64编译的包，有可能是因为没有glibc，或者其他依赖项。因此在Termux中尽量使用官方仓库提供的包，保证没有问题，如果要用其他未提供的包则很有可能需要重新用Clang编译。这也是我尝试安装Anaconda和.Net Core但是都失败了的原因。&lt;/p>
&lt;p>Termux好像还支持X11，因此你可以在手机上运行GUI程序！简直牛逼！不过我也没有需求，所以没有试。要实现这个功能需要安装X11服务器，可选的有XServer XSDL和Termux团队正在开发的&lt;a class="link" href="https://github.com/termux/termux-x11" target="_blank" rel="noopener"
>Termux:X11&lt;/a>。用XServer XSDL运行TermuxArch可以参考&lt;a class="link" href="https://medium.com/codex/how-to-turnyour-android-device-to-a-full-fledged-notebook-39561e115160" target="_blank" rel="noopener"
>这个教程&lt;/a>。&lt;/p>
&lt;p>最后虽然我把需要环境弄得差不多了，甚至成功在手机上运行了Jupyter Notebook并且试着画了几张图，但是最后我其实还是发现，Termux最好的归宿还是SSH客户端，毕竟手机的性能限制摆在那里。不过这些工具（尤其是Python）在有时候想随手做点或者算点什么东西的时候还是非常有用的。仅供参考~&lt;/p></description></item><item><title>初识Rust - 从一个Python/C++/C#程序员的角度对比Rust</title><link>https://zyxin.xyz/blog/2021-10/FirstGlanceOnRust/</link><pubDate>Fri, 29 Oct 2021 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2021-10/FirstGlanceOnRust/</guid><description>&lt;p>近些年一直有听闻Rust的发展，相比其他新语言（如julia），我觉得Rust是切实解决了一些程序开发的痛点的，并且Rust比较适合作为底层软件开发的语言，我很感兴趣。Rust官方有一本&lt;a class="link" href="https://doc.rust-lang.org/stable/book/" target="_blank" rel="noopener"
>Gitbook教程&lt;/a>，因此我就直接通过阅读它来上手Rust了。&lt;/p>
&lt;p>本文记录一些我在看完这本书之后初步总结的一些Rust与我熟悉的Python/C++/C#之间的各方面的异同。如果你也有Python/C++/C#的编程经验，并且想上手Rust，那么这篇文章应该能帮助你概括性地了解Rust的特性。本文也是我对Python/C++/C#之间特性的一个对比总结，但是我对这些语言的了解也没有那么深，因此如有谬误还请指教。&lt;/p>
&lt;blockquote>
&lt;p>备注：&lt;/p>
&lt;ul>
&lt;li>本文中的代码仅为代码片段，对于Python之外的代码你可能需要将部分代码放在主函数中才能正确运行。&lt;/li>
&lt;li>本文的代码格式以精简为主，没有按照语言的标准格式编写。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="语法">语法&lt;/h2>
&lt;h3 id="赋值">赋值&lt;/h3>
&lt;p>在变量进行赋值的时候，内容的传递有三种模式：传引用、复制、移动。其中最后一种指的是旧内容被复制到新对象中，然后旧对象中的内容变为不可用。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 是传引用&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 引用类型是传引用、值类型是复制&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 都是复制，但是是浅复制&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 默认是复制，但是可以通过&lt;code>std::move&lt;/code>实现移动（需要C++11)&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 默认是移动。复制需要使用&lt;code>.clone()&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="初始化">初始化&lt;/h3>
&lt;p>这几种语言初始化一个对象的语法有不少相似之处，因此列举在这里供比较。
{% tabs Function Code Example %}&lt;/p>
&lt;!-- tab Python -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">##### initialize class instance #####&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Point&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">y&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">##### intialize array #####&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)]&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="c1"># use list algorithmic operator&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)]&lt;/span> &lt;span class="c1"># use list comprehension&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">///// initialize struct instance /////
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">Point&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="n">Point_t&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// declare and initialize
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point_t&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// bracket initialization
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point_t&lt;/span> &lt;span class="n">q&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Point_t&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// initialize on heap
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Point_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Point_t&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">s&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">///// initialize array /////
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point_t&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">// declare without initialization
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point_t&lt;/span> &lt;span class="n">arr2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">{.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// initializer, here the third value is uninitialized
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point_t&lt;/span> &lt;span class="n">arr3&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">{.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// the size of array is inferred to be 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point_t&lt;/span> &lt;span class="n">arr4&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">{.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="p">...&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// range initialize 2nd ~ 5th item
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">arr_2d&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">};&lt;/span> &lt;span class="c1">// you can even initialize 2D array with bracket initialization
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">arr2_2d&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">},{&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">},{&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">}};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// declare the array on heap with 5 items
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">arr5&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Point_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Point_t&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C++ -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">///// initialize class instance /////
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Point&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// C++ will create default constructors with no args, field args and initializer list
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// declare and initialize
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// direct initialize
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point&lt;/span> &lt;span class="nf">q&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// initializer
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// list initializer (C++11)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// aggregate initializer (C++20)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// initialize on heap
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Point&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">u&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">///// initialize array /////
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// C++ supports all initialization method from C, but you might need C++11/20
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// declare the array on heap with 5 items
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]{&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// all initializer syntax can be used here
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">delele&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C# -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-csharp" data-lang="csharp">&lt;span class="line">&lt;span class="cl">&lt;span class="cs">///// initialize class instance /////&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Point&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">X&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">get&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">set&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">Y&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">get&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">set&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Point&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">X&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">Y&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// declare and initialize&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Point&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// constructor&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Point&lt;/span> &lt;span class="n">q&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Point&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Point&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">X&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Y&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// anonymous type&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">var&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">X&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Y&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cs">///// initialize array /////&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Point&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="n">arr&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">// new array with null values (or default value for struct type)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Point&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="n">arr2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Point&lt;/span>&lt;span class="p">[,]&lt;/span> &lt;span class="n">arr2d&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// initialize 2d array&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">var&lt;/span> &lt;span class="n">numbers&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Dictionary&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="c1">// initialize object with indexers&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na"> [7]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;seven&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na"> [9]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;nine&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na"> [13]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;thirteen&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab Rust -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">///// initialize struct instance /////
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Point&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>: &lt;span class="kt">f64&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>: &lt;span class="kt">f64&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>: &lt;span class="mf">1.&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>: &lt;span class="mf">2.&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// rust don&amp;#39;t automatically cast the type
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">q&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>: &lt;span class="mf">2.&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// partial copy from another instance
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mf">2.&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>: &lt;span class="mf">2.&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// using the variable with the same name in scope
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">///// initialize array /////
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">_&lt;/span>: &lt;span class="p">[&lt;/span>&lt;span class="kt">u8&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">arr&lt;/span>: &lt;span class="p">[&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">q&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;p>{% endtabs %}&lt;/p>
&lt;h3 id="只读">只读&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>： 没有什么东西是只读的，你唯一能做的就是hack一些函数，让别人在修改的时候报错&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 有&lt;code>const&lt;/code>关键字，可以定义全局常量或者函数内常量&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 有&lt;code>const&lt;/code>，&lt;code>constexpr&lt;/code>（后者更接近C的&lt;code>const&lt;/code>，需要C++11），成员函数可以单独控制只读性，相当于可以对成员函数的&lt;code>this&lt;/code>参数加上&lt;code>const&lt;/code>&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 有&lt;code>readonly&lt;/code>, &lt;code>const&lt;/code>，前者修饰不变量而后者是编译器常量。C# 9引入了record，可以实现immutable。&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 变量默认都是不可变的，可变需要添加关键字&lt;code>mut&lt;/code>（这个名字可太迷惑了，默认不可变的东西是不是不应该叫变量），成员函数可以通过外置定义的第一个参数单独控制只读性(&lt;code>self&amp;amp;&lt;/code> / &lt;code>mut self&amp;amp;&lt;/code>)，这个逻辑类似C++&lt;/li>
&lt;/ul>
&lt;p>{% tabs Const Code Example %}&lt;/p>
&lt;!-- tab Python -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># usually people follow certain style (like all uppercase) to name the constant variable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">SOME_CONSTANT&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">SOME_CONSTANT&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C++ -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// constexpr is used for compile time constant
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">constexpr&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">SOME_CONSTANT&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">constexpr&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">constexpr_func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// const can be used to describe class members
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Coords&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">shift&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Coords&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">offset&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="nf">sum&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">_x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">_y&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">_x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Coords&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">_x&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">_y&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">// const field must be initialized using initializer list
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// const variables are only able to call const member function
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Coords&lt;/span> &lt;span class="n">coord&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">coord&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// coord.shift() is illegal here
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C# -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-csharp" data-lang="csharp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// `const` is used for compile time constant&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">SOME_CONSTANT&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">SomeType&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">const_field&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// the value still need to be defined in compile time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">const_field2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SomeType&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">string&lt;/span> &lt;span class="n">str_in&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">const_field2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">str_in&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="c1">// readonly field must be initialized in declaration or constructor&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// since C# 7.2, readonly can be used to declare immutable type&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">Coords&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="n">Coords&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">X&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">Y&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">X&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">get&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">init&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">Y&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">get&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">init&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">Sum&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">X&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="n">Y&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="c1">// C# 8.0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// alternatively readonly can be applied to properties individually&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">Coords&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="n">Coords&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">_x&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">Y&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">_x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">X&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="k">get&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">_x&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">Y&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">get&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">init&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="c1">// C# 9.0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab Rust -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// use `const` for compile time constant
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">const&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">SOME_CONSTANT&lt;/span>: &lt;span class="kt">u32&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">some_constant&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// immutable by default
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">some_constant&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// this will shadow the previous definition
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Coords&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>: &lt;span class="kt">f64&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>: &lt;span class="kt">f64&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Coords&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">f64&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// the instance is also immutable in methods
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">offset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Coords&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">offset&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">offset&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">offset&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;p>{% endtabs %}&lt;/p>
&lt;h3 id="全局变量静态成员">全局变量、静态成员&lt;/h3>
&lt;blockquote>
&lt;p>静态成员可以看作从属于某个范围的全局变量&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 支持全局变量，但是在全局范围以外默认不可变，可变需要使用global关键字&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 支持全局变量&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 支持全局变量，并且支持&lt;code>namespace&lt;/code>级别的，支持静态变量，并且支持函数内定义静态变量&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 不支持，可以通过类型的静态变量和静态构造函数实现&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 支持，通过&lt;code>const&lt;/code>或者&lt;code>static&lt;/code>关键字。由于rust无法追踪静态变量的引用，因此使用静态变量需要在&lt;code>unsafe&lt;/code>代码块中。&lt;/li>
&lt;/ul>
&lt;p>{% tabs Global Code Example %}&lt;/p>
&lt;!-- tab Python -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># variables defined in global are global variables&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">counter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">some_func&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># global vars are available in the current module&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">some_func_mod&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">global&lt;/span> &lt;span class="n">counter&lt;/span> &lt;span class="c1"># you need `global` keyword to modify&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">counter&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Player&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">id&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">counter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="c1"># member defined in class is actually a static member&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@staticmethod&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">create_player&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">player&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Player&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">counter&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">player&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// variables defined in global are global variables
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">counter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C++ -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">counter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// this is a global variable
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">namespace&lt;/span> &lt;span class="n">sub&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">sub_counter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// this is a global variable, but here &amp;#34;global&amp;#34; is a namespace
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">counter2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// rarely used, static here means the variable is local to this compliation unit (this source file)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Player&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// static members of a class
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">counter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">Player&lt;/span> &lt;span class="nf">create_player&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">Player&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">counter&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// static variable can be inside a function
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="n">Player&lt;/span> &lt;span class="nf">create_player2&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">counter2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">Player&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">counter2&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C# -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-csharp" data-lang="csharp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// there is no global variable, you have to tie the variable to a class.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// But note that const variable can be in global scope, and you don&amp;#39;t need to declare it as static&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Utility&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">counter&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">some_constant&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">Utility&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">some_constant&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// the static constructor can be used to assign value to static readonly object&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Player&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Player&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">counter&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="n">Player&lt;/span> &lt;span class="n">create_player&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Player&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="p">++);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab Rust -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// you need static keyword to declare global/static variables
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">some_constant&lt;/span>: &lt;span class="kt">i32&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">counter&lt;/span>: &lt;span class="kt">i32&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Player&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">create_player&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">Player&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">some_constant&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// read constant static variable is safe
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">unsafe&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// read and write to mutable static variable is unsafe in rust
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Player&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;p>{% endtabs %}&lt;/p>
&lt;h3 id="异常处理">异常处理：&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>：exception, try catch finally, raise&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: assert, static_assert, throw&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: error code, assert&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: exception, try catch finally, throw&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: &lt;code>Result&lt;/code> 枚举和 &lt;code>panic!&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="空变量空类型">空变量，空类型&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: &lt;code>None&lt;/code>，是个对象，类型为&lt;code>NoneType&lt;/code>&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: &lt;code>(void*)NULL&lt;/code> 空指针，空类型&lt;code>void&lt;/code>&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: &lt;code>nullptr&lt;/code> 空指针, &lt;code>std::Optional&amp;lt;T&amp;gt;&lt;/code>，空类型&lt;code>void&lt;/code>&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: &lt;code>null&lt;/code> 本质上是空指针, &lt;code>Nullable&amp;lt;T&amp;gt;&lt;/code>, &lt;code>?&lt;/code>操作符支持，没有空类型&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 不提供空类型，&lt;code>Option&amp;lt;T&amp;gt;&lt;/code>，&lt;code>?&lt;/code>操作符支持，有个单元类型（unit type）&lt;code>()&lt;/code>可以看作空类型，用于填充类型参数，另外还有&lt;code>!&lt;/code>类型（叫“从不”类型）专门指无返回值的函数或者表达式&lt;/li>
&lt;/ul>
&lt;h3 id="别名">别名&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 类本身也是对象，可以赋值给别的变量。而&lt;code>import .. as ..&lt;/code>语法也可以实现别名&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: &lt;code>typedef&lt;/code>, &lt;code>#define&lt;/code>&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: &lt;code>typedef&lt;/code>, &lt;code>using&lt;/code>, &lt;code>#define&lt;/code>&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: &lt;code>using&lt;/code>&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: &lt;code>type .. = ..&lt;/code>, &lt;code>use ... as&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="函数声明">函数声明&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 支持默认参数，以列表、字典两种方式支持可变参数&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 支持变长参数，不支持默认参数&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 支持变长参数、变长模板参数（variadic type param)，支持默认参数&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 支持默认参数、变长参数(&lt;code>params&lt;/code>)，不支持变长形参&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 不支持默认参数和变长参数，前者一般通过&lt;code>Option&amp;lt;T&amp;gt;&lt;/code>实现，后者一般通过宏实现&lt;/li>
&lt;/ul>
&lt;h3 id="语法糖">&lt;code>?&lt;/code>语法糖&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 可以通过&lt;code>or&lt;/code>变相实现&lt;/li>
&lt;li>&lt;strong>C/C++&lt;/strong>: 无&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: &lt;code>?&lt;/code>可以用在引用类型上，或者&lt;code>Nullable&amp;lt;T&amp;gt;&lt;/code>加值类型上，还有&lt;code>??&lt;/code>操作符&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 可以用在&lt;code>Option&amp;lt;T&amp;gt;&lt;/code>和&lt;code>Result&amp;lt;T, E&amp;gt;&lt;/code>上&lt;/li>
&lt;/ul>
&lt;h3 id="unicode-字符串">Unicode 字符串&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 在Python 2里，&lt;code>bytes&lt;/code>=&lt;code>str&lt;/code>，都表示的是ANSI字符串，而Unicode字符串需要用&lt;code>unicode&lt;/code>类型，常量需要用&lt;code>u&amp;quot;文字&amp;quot;&lt;/code>。在Python 3里，&lt;code>bytes&lt;/code>可以表示ASCII字符串，而&lt;code>str&lt;/code>是支持Unicode了，&lt;code>&amp;quot;文字&amp;quot;&lt;/code>直接就是UTF8字符串。&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 甚至没有专门的字符串类型，只有&lt;code>char&lt;/code>数组&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: &lt;code>std::string&lt;/code>并没有专门支持Unicode，它可以用来存储Unicode字符串，但是没有针对性的处理工具。声明UTF8字符串需要用&lt;code>u8&amp;quot;文字&amp;quot;&lt;/code>格式的前缀。处理Unicode字符一般会选择ICU这个C++库。&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>：&lt;code>String&lt;/code>是带有编码信息的，并且&lt;code>System.Encoding&lt;/code>里面有&lt;code>String&lt;/code>和&lt;code>byte[]&lt;/code>相互转换的工具。&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 最常用的&lt;code>String&lt;/code>字符串是UTF8编码的（好像不支持UTF16？），并且支持Unicode字符的操作（如字符边界等），另外还有&lt;code>str&lt;/code>类型是个slice类型。Rust还提供了&lt;code>CString&lt;/code>来表示ANSI字符串。&lt;/li>
&lt;/ul>
&lt;h3 id="宏">宏&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 不支持&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 仅支持&lt;code>#define&lt;/code>系列和&lt;code>#if&lt;/code>系列&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 支持的非常丰富，甚至有专门的库。。。&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 仅支持&lt;code>#if&lt;/code>系列&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 有三种宏，声明宏（Declarative macro），主要是进行匹配和展开，类似于C/C++用宏来枚举类型；过程宏（Procedural macro），可以解析语法树，从struct结构生成代码；类属性宏（Attribute-like macros），可以从任意代码生成任意代码；类函数宏（Function-like macro），通常用于解析一小段token&lt;/li>
&lt;/ul>
&lt;h3 id="修饰器">修饰器&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: decorator&lt;/li>
&lt;li>&lt;strong>C/C++&lt;/strong>: 无，一小部分功能可以通过宏实现&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: Attribute&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 类属性宏&lt;/li>
&lt;/ul>
&lt;h2 id="类型系统">类型系统&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 有&lt;code>class&lt;/code>，不过类也是对象，是一个用来生成其他对象的对象。&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 只有&lt;code>struct&lt;/code>（和&lt;code>union&lt;/code>）&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 有&lt;code>struct&lt;/code>和&lt;code>class&lt;/code>，但是&lt;code>struct&lt;/code>只是一个成员默认为&lt;code>public&lt;/code>的&lt;code>class&lt;/code>，没有本质区别，是为了兼容C而存在的。&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 只有&lt;code>struct&lt;/code>（&lt;code>unsafe&lt;/code>模式下有&lt;code>union&lt;/code>）&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: &lt;code>struct&lt;/code>、&lt;code>class&lt;/code>、&lt;code>interface&lt;/code>、&lt;code>enum&lt;/code>、&lt;code>delegates&lt;/code>。其中&lt;code>struct&lt;/code>/&lt;code>enum&lt;/code>是值类型、&lt;code>class&lt;/code>/&lt;code>interface&lt;/code>/&lt;code>delegates&lt;/code>都是引用类型，在之间转换会有封箱和拆箱操作。&lt;/li>
&lt;/ul>
&lt;h3 id="定义成员函数methodmember-function">定义成员函数（method/member function）&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 在&lt;code>class&lt;/code>代码块里写，也可以动态给Python对象添加函数（过于牛逼，不过定义了&lt;code>__slot__&lt;/code>的对象除外）&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 没有成员函数一说&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 在&lt;code>class&lt;/code>代码内部写或者使用外部声明语法&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 在&lt;code>class&lt;/code>代码块内部写，但是有个&lt;code>partial&lt;/code>关键字非常给力，可以让一个类的代码块分成几个区域&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 有个&lt;code>impl&lt;/code>代码块，只有外部声明语法，并且如果是泛型的话也得标记上类型参数。在逻辑上更像是C的写法&lt;/li>
&lt;/ul>
&lt;h3 id="强弱类型">强/弱类型&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 弱类型，没有类型检查，只有Python 3.5引入的类型标注。你可以使用&lt;code>mypy&lt;/code>来实现类型标注检查，但是错误的类型并不会影响程序运行。&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 强类型，所有变量和参数均需要声明类型&lt;/li>
&lt;li>&lt;strong>C++/Rust/C#&lt;/strong>: 强类型，在这些语言中，绝大部分情况下变量和参数都拥有固定的类型，但是他们也提供不同程度的类型推断。此外他们也支持均动态类型。&lt;/li>
&lt;/ul>
&lt;h3 id="类型推断">类型推断&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 动态类型，无需推断&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: &lt;code>var&lt;/code>关键字&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: &lt;code>auto&lt;/code>关键字 (C++11)&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 无&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 默认推断，并且推荐能不写类型就不写，交给编译器，这无疑使代码更简洁了。&lt;/li>
&lt;/ul>
&lt;h3 id="动态类型">动态类型&lt;/h3>
&lt;p>动态类型一般仅在强类型中被提及，因为弱类型语言一般不进行类型检查，其指的是类型检查推迟到运行时。动态类型通常可以分为两种，一种是变体类型（Variant），指的是变量可以是几个类型中的任意一种；另一种是任意类型（Any Type），更接近动态类型的本身，指的是变量可以取任意类型。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 弱类型语言&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 支持，有&lt;code>dynamic&lt;/code>关键字可以使类型检查在运行时进行（需要C# 4），通过&lt;code>System.Dynamic.ExpandoObject&lt;/code>和&lt;code>System.Dynamic.DynamicObject&lt;/code>类型实现动态成员，并且还支持匿名类型&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 通过&lt;code>void*&lt;/code>指针可以变相实现任意类型。&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 通过&lt;code>std::variant&amp;lt;...&amp;gt;&lt;/code>和&lt;code>std::any&amp;lt;T&amp;gt;&lt;/code>可以分别实现变体类型和任意类型（均需要C++17)，也可以通过&lt;code>reintepret_cast&lt;/code>进行强制转换。&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 通过&lt;code>Enum&lt;/code>可以实现变体类型，通过trait object（&lt;code>dyn&lt;/code>关键字+&lt;code>Box&lt;/code>）可以部分实现任意类型。
&lt;blockquote>
&lt;p>这里的&lt;code>dynamic&lt;/code>其实是指的dynamic dispatch（动态分发），也就是类型参数在运行时展开。静态分发就类似于C++的模板，而动态分发就更接近C#的运行时泛型。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h3 id="反射内省">反射/内省&lt;/h3>
&lt;p>反射和内省的概念可能只有学过C#的人比较熟悉，它指的是在运行时获取类型的信息，例如所有的方法、所有的成员变量等等。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 通过&lt;code>__dict__&lt;/code>接口，以及&lt;code>hasattr&lt;/code>, &lt;code>getattr&lt;/code>, &lt;code>setattr&lt;/code>三剑客可以实现动态获取类成员。&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 不支持，唯一相关的就是&lt;code>sizeof&lt;/code>关键字，只能获取类型对象的大小。&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 除了&lt;code>sizeof&lt;/code>以外还有&lt;code>typeid&lt;/code>关键字，但是获取的&lt;code>type_info&lt;/code>对象只有名字信息，仅用于比较。&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 通过&lt;code>Object&lt;/code>这个基类所支持的&lt;code>GetType()&lt;/code>方法可以获取类型信息，返回一个&lt;code>Type&lt;/code>对象。这个对象包含了非常丰富的内容，可以获取名字、成员列表、嵌套类型信息等等&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: &lt;code>Any&lt;/code> trait有&lt;code>get_type_id&lt;/code>方法，类似于C++的&lt;code>typeid&lt;/code>，仅用于类型比较。&lt;/li>
&lt;/ul>
&lt;h2 id="面向对象">面向对象&lt;/h2>
&lt;h3 id="封装">封装&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 除C扩展之外，几乎所有对象都是公开的，无法限制访问，只有一个约定俗成的&lt;code>_&lt;/code>和&lt;code>__&lt;/code>习惯（&lt;code>_&lt;/code>开头的变量表示私有成员，形如&lt;code>__xxx__&lt;/code>的变量表示特殊成员）&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 无访问控制，但是编译之后的library一般是无法修改的，因此可以通过选择头文件的内容来阻止访问部分代码。&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: &lt;code>public&lt;/code>/&lt;code>private&lt;/code>/&lt;code>protected&lt;/code>关键字可以指定成员，或者继承的基类的可见度。另外还有&lt;code>friend&lt;/code>关键字指定特定的可见关系，C++还可以通过匿名命名空间实现模块的私有化。&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: &lt;code>public&lt;/code>/&lt;code>private&lt;/code>/&lt;code>protected&lt;/code>关键字类似于C++，但只能修饰类成员。另外还有&lt;code>internal&lt;/code>关键字可以实现仅对同一个二进制内的代码公开的能力。&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 默认模块、类型、成员均为private，有&lt;code>pub&lt;/code>关键字使得祖先可以访问。与其他语言不同的是&lt;code>pub&lt;/code>可以修饰模块，并且其公开性是仅对祖先模块的。&lt;/li>
&lt;/ul>
&lt;h3 id="继承多态">继承、多态&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 可以多继承，使用Mixin的写法是个常用的范式。&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong> 可以多继承，也有trait体系，还有&lt;code>virtual&lt;/code>和&lt;code>override&lt;/code>。菱形问题可以通过虚继承解决。&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 只能继承一个基类，可以继承多个接口。引用类型的基类都是object，而值类型是ValueType（虽然ValueType继承了object，但是编译器会有特别处理）。另外C#还有抽象类（&lt;code>abstract&lt;/code>)，&lt;code>virtual&lt;/code>, &lt;code>override&lt;/code>, &lt;code>sealed&lt;/code>。在C# 8之后支持接口的默认实现。&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 没有继承，但是可以定义和实现trait（即接口），并且接口支持默认实现。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Rust 在书17.1中认为，用继承的方式实现多态已经越来越不主流了，实际在使用时我确实也发现自己的代码里需要使用继承的方法不多，有点同意这个观点，但是我也仍能想到使用继承的场景，尤其是在面向现实问题以及GUI相关的代码中。而在数据结构中其实使用trait系统会更方便（尤其是二叉树定义其node类型的时候）。当然我猜测Rust选择不引入继承系统的原因还可能是它可能会带来的overhead（如果要允许子类实现自己的方法被父类调用，那就必然会需要虚函数，而这会引入vtable产生内存开销）。
一个比较奇怪的设计是Rust的trait支持静态函数（associated function），直觉上来说接口不应该限制静态成员的设计，毕竟接口方法都是与类型实例相关的，C#的接口中就不允许添加静态成员&lt;/p>
&lt;/blockquote>
&lt;h3 id="泛型">泛型&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 动态类型不需要泛型&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong> 有泛型，并且通过&lt;strong>where&lt;/strong>支持类型限制，编译时不展开&lt;/li>
&lt;li>&lt;strong>C&lt;/strong> 无泛型，但是可以通过指针强制转换进行类型变换以支持动态类型&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong> 有模板，在编译时会展开，并且模板的功能远超一般的泛型。模板参数支持整数&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong> 有泛型，并且通过&lt;strong>where&lt;/strong>支持类型限制，但是在编译时会展开。Rust 1.47正在测试模板参数支持整数。&lt;/li>
&lt;/ul>
&lt;h2 id="函数式编程">函数式编程&lt;/h2>
&lt;h3 id="函数对象和闭包">函数对象和闭包&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 函数也是对象，想怎么玩都可以。Python的局部函数可以当作闭包使用&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 仅支持函数指针&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 有匿名函数和lambda函数，还有&lt;code>Delegate&lt;/code>/&lt;code>event&lt;/code>，lambda函数是闭包，并且无需指定如何封装环境内变量&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 有lambda函数和std::function，lambda函数是闭包，并且可以细致地指定如何封装环境内的变量&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 有闭包，可以赋值给&lt;code>Fn&lt;/code> trait，支持局部函数但局部函数不是闭包。封装方式可以通过&lt;code>Fn&lt;/code>/&lt;code>FnMut&lt;/code>/&lt;code>FnOnce&lt;/code>或者&lt;code>move&lt;/code>关键字进行指定。普通的函数指针有&lt;code>fn&lt;/code>类型&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>匿名函数仅仅指不需要指定函数名的函数，而closure是能够使用外部scope变量的函数，一般是匿名函数，但也可以不匿名。lambda函数即匿名函数，有可能是一个闭包&lt;/p>
&lt;/blockquote>
&lt;p>{% tabs Function Code Example %}&lt;/p>
&lt;!-- tab Python -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># normal function&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">func&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">add&lt;/span> &lt;span class="c1"># function is also an object&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># closure, usually used in decorators&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">closure&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">some_value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">increase&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">some_value&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">x&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">increase&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">func&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">closure&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># lambda function (which is a closure)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">prefix&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;INFO:&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">log_handler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">lambda&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">prefix&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// normal function
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// function pointers
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">fn_ptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">fn_cptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C++ -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// normal function
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// function pointers are also supported in C++
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// note that the syntax can be much more complex in C++ than in C
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">fn_ptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">fn_cptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// std::function is a safer pointer implementation
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// (since C++11, you can use boost::function before C++11)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">func&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">add&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// lambda function (which is a closure, since C++11)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">prefix&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;INFO:&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">auto&lt;/span> &lt;span class="n">log_handler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">prefix&lt;/span>&lt;span class="p">](&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">prefix&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">func2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">log_handler&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C# -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-csharp" data-lang="csharp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// normal function&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="k">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// delegates are function pointer types in C#&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span> &lt;span class="k">delegate&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">AddFunc&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">AddFunc&lt;/span> &lt;span class="n">func&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">add&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Func&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">func2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">add&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// there are also predefined delegates&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// C# also provides Event to handle a chain of functions&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// (usually used in GUI applications)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span> &lt;span class="k">event&lt;/span> &lt;span class="n">AddFunc&lt;/span> &lt;span class="n">addEvents&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">addEvents&lt;/span> &lt;span class="p">+=&lt;/span> &lt;span class="n">func&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// lambda function in C#, note that the types of parameter and return value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// are decided by the function type signature&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">string&lt;/span> &lt;span class="n">prefix&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;INFO:&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Func&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">void&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">log_handler&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">Console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">WriteLine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">prefix&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab Rust -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// normal function
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>: &lt;span class="kt">i32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>: &lt;span class="kt">i32&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">i32&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// function pointer has type `fn`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">func&lt;/span>: &lt;span class="nc">fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">i32&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// define and return closure
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// You need to wrap closure with Box in order to return it since the size of closure is unknown for compiler
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">closure&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Box&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">dyn&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">i32&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">some_value&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">increase&lt;/span>: &lt;span class="nb">Fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">i32&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">some_value&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Box&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">increase&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">func_boxed&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">closure&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;p>{% endtabs %}&lt;/p>
&lt;h3 id="模式匹配">模式匹配&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 3.10开始引入支持&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 不支持&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 暂无语言内置支持，但是可以通过魔改模板实现，例如&lt;a class="link" href="https://github.com/solodon4/Mach7" target="_blank" rel="noopener"
>Mach7&lt;/a>&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: C# 7引入&lt;code>switch&lt;/code>支持&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 内置&lt;code>match&lt;/code>支持&lt;/li>
&lt;/ul>
&lt;h3 id="遍历器iterator">遍历器（iterator）&lt;/h3>
&lt;p>关于异步遍历参见后文&lt;a class="link" href="#%e5%bc%82%e6%ad%a5%e5%92%8c%e5%8d%8f%e7%a8%8b" >异步&lt;/a>一节&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 内置&lt;code>iter()&lt;/code>, generator类型, &lt;code>yield&lt;/code>，Python 3.6之后支持&lt;code>async&lt;/code>函数中使用&lt;code>yield&lt;/code>&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 没有语言支持，但是在STL里面定义了一套通用接口，有&lt;code>std::foreach&lt;/code>，也有&lt;code>for(type value: collection)&lt;/code>语句&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 不支持&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: &lt;code>IEnumerable&lt;/code>, &lt;code>foreach&lt;/code>, &lt;code>yield return&lt;/code>。C# 8.0之后引入&lt;code>IAsyncEnumerable&amp;lt;T&amp;gt;&lt;/code>，支持异步返回流（即在async函数中使用&lt;code>yield return&lt;/code>)。(这个功能支持的比Python晚好多= =)&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 容器类型的&lt;code>iter()&lt;/code>方法&lt;/li>
&lt;/ul>
&lt;h3 id="元组tuple">元组（tuple）&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>：内置&lt;code>tuple&lt;/code>类型，不限长度，一个重要区别是python的tuple是不可变(immutable)的, Cython的ctuple&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: &lt;code>std::tuple&lt;/code>，也不限长度，C++17支持解构语法？（structure binding）&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 内置&lt;code>tuple&lt;/code>支持，tuple类型的签名例如(u32, u32)，长度虽然不限，但是有些语法只支持最长12个对象hhhh&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 曾经对tuple的支持只有&lt;code>System.Tuple&amp;lt;T1, T2, ...&amp;gt;&lt;/code>，由于C#不支持变长类型参数，因此这个&lt;code>Tuple&lt;/code>类型变得相当冗余，而且也很麻烦。在C# 7之后引入了tuple的语法，之后使用起来就方便多了&lt;/li>
&lt;/ul>
&lt;h2 id="不安全代码c交互">不安全代码、C交互&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 由于Python的最常用解释器CPython就是基于C的，并提供了丰富且完整的C-&lt;strong>API&lt;/strong>，因此Python对与C交互的支持非常好，这也是Python被常用为胶水语言的原因。调用C-ABI可以使用内置的&lt;code>ctypes&lt;/code>库, 而如果想给C/C++代码写Python API，则可以用Cython、pybind11、boost.Python&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: C#是托管语言，可以使用&lt;code>unsafe&lt;/code>编写操作指针的代码, 利用&lt;code>DLLImport&lt;/code>（P/Invoke）可以调用C-ABI&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: C++本身是C的超集，几乎可以完美兼容C，也就是说C/C++的代码混合编译是没有问题的。另外在&lt;code>extern&lt;/code>代码块中的函数和类不会被混淆（mangle），可以生成C-ABI&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 在Rust中使用&lt;code>unsafe&lt;/code>代码块可以不进行引用检查, &lt;code>extern&lt;/code>代码块可以避免函数签名被混淆（mangle）&lt;/li>
&lt;/ul>
&lt;h2 id="并行和异步">并行和异步&lt;/h2>
&lt;p>由于Rust对变量生命周期的严格管理，在Rust中进行并行和异步会变得非常麻烦，Rust官方专门有一本&lt;a class="link" href="https://rust-lang.github.io/async-book" target="_blank" rel="noopener"
>独立的书&lt;/a>介绍相关的异步内容，在这我就不细展开Rust的用例了，仅介绍大致的用法，留个印象。&lt;del>因为我也还没学会&lt;/del>&lt;/p>
&lt;blockquote>
&lt;p>关于协程、线程、进程之间的区别可以参考&lt;a class="link" href="https://zyxin.xyz/blog/2019-11/ParallelismInPythonAndCsharp/" >我之前的这篇博客&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;h3 id="异步和协程">异步和协程&lt;/h3>
&lt;p>我对Python和C#的异步都有一定的使用经验，对C++的也略有了解，不得不说还是C#的异步语法使用起来最舒服。这也是部分得益于托管语言带来的好处，像C/C++/Rust想要实现异步就需要非常麻烦的语法和生命周期管理。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: Python 3.5引入了&lt;code>async&lt;/code>，&lt;code>await&lt;/code>关键字，并且有&lt;code>asyncio&lt;/code>库实现各个层级的异步封装（封装过多反而导致使用起来很摸不着头脑）&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 没有内置支持&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: &lt;code>&amp;lt;future&amp;gt;&lt;/code>库提供了异步的初步支持，C++20引入&lt;code>co_await&lt;/code>，终于在语言层面支持了程序流中插入异步块，不过真是太不elegant了，并且还只主要是给库的开发者用的。另外好像C++的协程默认都是单开线程的，而不像是其他语言可以进行单线程协程。&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 从C# 5.0引入了&lt;code>async&lt;/code>，&lt;code>await&lt;/code>关键字，应该是这些语言中引入最早的，也是支持最简明的，最容易上手的。C# 7.0后await的对象可以自定义类型了。&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 有&lt;code>async&lt;/code>, &lt;code>await&lt;/code>关键字支持&lt;/li>
&lt;/ul>
&lt;p>{% tabs Async Code Example %}&lt;/p>
&lt;!-- tab Python -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">asyncio&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># define and use async function&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">io_task&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;fake io processing...&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">await&lt;/span> &lt;span class="n">asyncio&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># launch the task in the current thread&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">asyncio&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_event_loop&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run_until_complete&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">io_task&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C++ -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// before C++20
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;future&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;thread&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">bool&lt;/span> &lt;span class="nf">io_task&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;fake io processing&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">this_thread&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">sleep_for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">chrono&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">seconds&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">future&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">bool&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">fut&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">async&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">io_task&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// start a thread to run the task
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">bool&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fut&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// wait for the result
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// co_await has been introduced in C++20, but it&amp;#39;s still not ready to use
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab C# -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-csharp" data-lang="csharp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">using&lt;/span> &lt;span class="nn">System.Threading.Tasks&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span> &lt;span class="n">Task&lt;/span> &lt;span class="n">io_task&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// the return type for async functions is void / Task / Task&amp;lt;T&amp;gt;. For WinRT, you&amp;#39;ll need IAsyncOperation in place of Task&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">WriteLine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;fake io processing...&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">await&lt;/span> &lt;span class="n">Task&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Delay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">io_task&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">Wait&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// start the coroutine and wait for its completion, very intuitive&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">io_task_detached&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">await&lt;/span> &lt;span class="n">io_task&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">io_task_detached&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// start the coroutine and don&amp;#39;t wait for it.&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;!-- tab Rust -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">std&lt;/span>::&lt;span class="n">time&lt;/span>::&lt;span class="n">Duration&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">async_std&lt;/span>::&lt;span class="n">task&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// async function has normal return types
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">io_task&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;fake io processing...&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">task&lt;/span>::&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Duration&lt;/span>::&lt;span class="n">from_secs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// async block returns a Future&amp;lt;T&amp;gt; object
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">task&lt;/span>::&lt;span class="n">block_on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">io_task&lt;/span>&lt;span class="p">()})&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- endtab -->
&lt;p>{% endtabs %}&lt;/p>
&lt;h3 id="线程">线程&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 虽然Python提供了&lt;code>threading&lt;/code>库，但是由于CPython全局锁的存在，实际上通常情况下同时只能执行一个线程，只有在进行IO操作的时候threading会非常游泳&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 在POSIX系统上通常使用&lt;code>pthread&lt;/code>库，而在MSVC下面则可以使用&lt;code>pthread_win32&lt;/code>或者Windows API&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: &lt;code>&amp;lt;thread&amp;gt;&lt;/code>库提供了线程的相关支持（需要C++11）&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: &lt;code>System.Threading&lt;/code>提供了线程的相关支持&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: &lt;code>std::thread&lt;/code>标准模块中提供了线程的相关支持，不过由于Rust对变量声明周期的管理，写代码时经常需要用到&lt;code>Mutex&lt;/code>和&lt;code>Arc&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="进程">进程&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: 在&lt;code>os&lt;/code>和&lt;code>subprocess&lt;/code>库中提供了创建进程的函数。另外Python还在&lt;code>multiprocessing&lt;/code>库中则是提供了非常方便的MPI接口，这是Python比其他语言都好用的地方，可能也算是对全局锁的补偿把。&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 在POSIX系统上通常使用&lt;code>unistd.h&lt;/code>中的&lt;code>fork&lt;/code>，而在MSVC下可以使用Windows API&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 标准库中并没有提供支持，可以用&lt;code>boost.process&lt;/code>库来解决&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: &lt;code>System.Diagnostics&lt;/code>中的&lt;code>Process&lt;/code>类提供了相关支持&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: &lt;code>std::process&lt;/code>标准模块中提供了进程相关支持。&lt;/li>
&lt;/ul>
&lt;h2 id="包管理器">包管理器&lt;/h2>
&lt;p>为什么要专门拎出来这一点，是因为包管理是我放弃julia的最大理由。。。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong>: &lt;code>pip&lt;/code>挺不错，安装方便使用简单；&lt;code>conda&lt;/code>功能更强大，更方便支持带C扩展的包，但是性能差&lt;/li>
&lt;li>&lt;strong>C/C++&lt;/strong>: 一般都依赖Linux的包管理器。在Mac上有&lt;code>brew&lt;/code>，而在Windows上只到最近&lt;code>vcpkg&lt;/code>的出现才算勉强有了可用的包管理。总体而言还是没有好用的包管理器，甚至编译体系都有好几种（&lt;code>conf&lt;/code>/&lt;code>make&lt;/code>, &lt;code>autoconf&lt;/code>, &lt;code>CMake&lt;/code>, Qt的&lt;code>qmake&lt;/code>, Boost的&lt;code>b2&lt;/code>, Visual Studio的&lt;code>nmake&lt;/code>, &amp;hellip;），这也是C++挺劝退的点。&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: &lt;code>nuget&lt;/code>，算不上好用但好在有宇宙第一IDE——VS的支持。&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: &lt;code>cargo&lt;/code>，目前的体验都挺友好的~设计上比较像&lt;code>npm&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="常用数据结构">常用数据结构&lt;/h2>
&lt;p>下表总结了各个语言中常用数据结构的对应关系（非严格对应，他们的实现上或多或少有点区别）&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Python&lt;/th>
&lt;th>C++&lt;/th>
&lt;th>C#&lt;/th>
&lt;th>Rust&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>list&lt;/code>&lt;/td>
&lt;td>&lt;code>vector&lt;/code>&lt;/td>
&lt;td>&lt;code>List&lt;/code>&lt;/td>
&lt;td>&lt;code>Vec&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SortedDict&lt;/code>&lt;/td>
&lt;td>&lt;code>map&lt;/code>&lt;/td>
&lt;td>&lt;code>SortedDictionary&lt;/code>&lt;/td>
&lt;td>&lt;code>BTreeMap&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>dict&lt;/code>&lt;/td>
&lt;td>&lt;code>unordered_map&lt;/code>&lt;/td>
&lt;td>&lt;code>Dictionary&lt;/code>&lt;/td>
&lt;td>&lt;code>HashMap&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SortedSet &lt;/code>&lt;/td>
&lt;td>&lt;code>set&lt;/code>&lt;/td>
&lt;td>&lt;code>SortedSet&lt;/code>&lt;/td>
&lt;td>&lt;code>BTreeSet&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>set&lt;/code>&lt;/td>
&lt;td>&lt;code>unordered_set&lt;/code>&lt;/td>
&lt;td>&lt;code>Set&lt;/code>&lt;/td>
&lt;td>&lt;code>HashSet&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>&lt;code>function&lt;/code>&lt;/td>
&lt;td>&lt;code>Action&lt;/code>/&lt;code>Func&lt;/code>&lt;/td>
&lt;td>&lt;code>Fn&lt;/code>/&lt;code>FnMut&lt;/code>/&lt;code>FnOnce&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>&lt;code>list&lt;/code>&lt;/td>
&lt;td>&lt;code>LinkedList&lt;/code>&lt;/td>
&lt;td>&lt;code>LinkedList&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>deque&lt;/code>&lt;/td>
&lt;td>&lt;code>deque&lt;/code>&lt;/td>
&lt;td>&lt;code>Queue&lt;/code>&lt;/td>
&lt;td>&lt;code>VecDeque&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>heapify&lt;/code>&lt;/td>
&lt;td>&lt;code>make_heap&lt;/code>&lt;/td>
&lt;td>&lt;code>PriorityQueue&lt;/code>&lt;/td>
&lt;td>&lt;code>BinaryHeap&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>&lt;code>unique_ptr&lt;/code>&lt;/td>
&lt;td>-&lt;/td>
&lt;td>&lt;code>Box&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>&lt;code>smart_ptr&lt;/code>&lt;/td>
&lt;td>-&lt;/td>
&lt;td>&lt;code>Rc&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>另外，C++ &lt;code>std::const_cast&lt;/code> 可以在 Rust 中用&lt;code>Cell&amp;lt;T&amp;gt;&lt;/code>和&lt;code>RefCell&amp;lt;T&amp;gt;&lt;/code>起到类似效果(对应引用类型和指针类型？)&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="rust特有的特性">Rust特有的特性&lt;/h2>
&lt;p>在别的语言里面没有的概念，以及Rust独特的语法特性如下&lt;/p>
&lt;ul>
&lt;li>引用检查（Borrow checker）&lt;/li>
&lt;li>生命周期（Lifetime）声明&lt;/li>
&lt;li>&lt;code>{}&lt;/code>代码块和&lt;code>if&lt;/code>、&lt;code>else&lt;/code>、&lt;code>break&lt;/code>也都是表达式，而非语句&lt;/li>
&lt;li>功能强大的宏系统&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>总而言之，语法设计上最优雅的我觉得还是C#和Python，功能和性能最强大的还是C++，最简单和底层的还是C，但是Rust至少有望替代C，这也是我为什么学习这些语言的原因。Rust有一些语法，虽然套用了同一个格式，但是却有很多是编译器特殊支持的（最常见的就是跟Trait相关的，如&lt;code>Box&lt;/code>），这就使得Rust有时候很不优雅，关于这一点可以看&lt;a class="link" href="https://tuna.moe/event/2021/rust/" target="_blank" rel="noopener"
>TUNA的讲座&lt;/a>。&lt;/p>
&lt;p>本文仅为我读完Rust官方入门教材之后的总结，之后有实战经验了我可能会再写一些心得吧~&lt;/p>
&lt;blockquote>
&lt;p>另外在总结本文的时候还发现了一个&lt;a class="link" href="https://ttu.github.io/kotlin-is-like-csharp/" target="_blank" rel="noopener"
>对比Kotlin和C#的网页&lt;/a>，挺有意思的，贴在这供参考&lt;/p>
&lt;/blockquote></description></item><item><title>一句话选择现代编程语言</title><link>https://zyxin.xyz/blog/2021-08/OneLinePerProgrammingLanguage/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2021-08/OneLinePerProgrammingLanguage/</guid><description>&lt;p>最近几年一直有新的编程语言变火，也不断的有新概念的出现。我一直有打算了解各种新的编程语言，并且如果有前景的话多学一门语言也是挺好的。因此本文总结我在了解一些流行的现代语言的过程中，记下来他们的各种特点。如果你也有兴趣尝试新的语言，那么希望这个文章可以帮到你~&lt;/p>
&lt;p>关于语言的流行度可以参考&lt;a class="link" href="https://www.tiobe.com/tiobe-index/" target="_blank" rel="noopener"
>TIOBE排名&lt;/a>、&lt;a class="link" href="https://madnight.github.io/githut" target="_blank" rel="noopener"
>Github排名&lt;/a>和&lt;a class="link" href="https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-languages-loved" target="_blank" rel="noopener"
>Stack Overflow排名&lt;/a>。本文也不会详细介绍每个语言的特性，因为每种语言都用非常多的特性，而且很多也都还在不断开发中。正因如此，本文的评价也仅限用与写下本博客的时候。&lt;/p>
&lt;p>本文主要关注通用程序语言，对于一些领域专用语言（Domain-Specific Language）如SQL就不比较了，因为他们是你需要的时候你就会用，你不需要的话也不需要学。&lt;/p>
&lt;p>关于编程语言的演变，下面是一个很精炼的图（&lt;a class="link" href="https://infographicnow.com/educational/languages/educational-infographic-timeline-of-programming-languages-infographic/" target="_blank" rel="noopener"
>来源点我&lt;/a>），如果想要更完整的演变关系的话可以参考维基的程序语言编年表（&lt;a class="link" href="https://en.wikipedia.org/wiki/History_of_programming_languages" target="_blank" rel="noopener"
>按年代&lt;/a>和&lt;a class="link" href="https://en.wikipedia.org/wiki/Timeline_of_programming_languages" target="_blank" rel="noopener"
>按年份&lt;/a>，推荐后面那个！），或者&lt;a class="link" href="https://www.levenez.com/lang/" target="_blank" rel="noopener"
>参考这个网站&lt;/a>。&lt;/p>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2021-08/OneLinePerProgrammingLanguage/timeline-of-programming-languages.jpg"
width="600"
height="1621"
loading="lazy"
alt="编程语言时间图"
class="gallery-image"
data-flex-grow="37"
data-flex-basis="88px"
>&lt;/p>
&lt;h2 id="现代编程语言的特性">现代编程语言的特性&lt;/h2>
&lt;p>在介绍语言之前，首先还是要介绍以下各种编程语言的概念，不然会埋没很多语言的优秀属性。语言详细特性的比较可以参考&lt;a class="link" href="https://en.wikipedia.org/wiki/Comparison_of_programming_languages#:~:text=General%20comparison%20%20%20%20Language%20%20,%20%20%20%2020%20more%20rows%20" target="_blank" rel="noopener"
>维基百科的比较&lt;/a>，这里的介绍也都是粗略的简介，如果你有兴趣的话可以搜一下这些关键词了解了解~&lt;/p>
&lt;ul>
&lt;li>&lt;strong>面向对象(Object-Oriented)&lt;/strong>：如果有学过程序设计课程的话应该对这个是有了解的。面向对象主要指的是程序是围绕“类”(Class)来编写的。类包含了某一种对象的定义和方法，并且在此之上定义了继承关系，以便于简化代码。&lt;/li>
&lt;li>&lt;strong>动态/静态类型(Dynamic/Static Type)&lt;/strong>：静态类型指的是编程语言中所有变量都必须明确指定的类型，而动态类型语言则不需要指定变量类型。这两个特点是在灵活性和程序安全性之间做的权衡。这两个特性也被称为&lt;strong>强/弱类型&lt;/strong>。在弱类型语言中，有**鸭子类型(Duck-typing)**的概念，也就是我们不关心变量具体是什么类型，只要它提供了指定的接口就可以了。&lt;/li>
&lt;li>&lt;strong>元编程(Meta-Programming)/泛型(Generic Type)&lt;/strong>：元编程指的是可以通过代码生成代码，最典型的例子就是C++的模板。而泛型在用法上很像元编程，但是它并不会显式地生成代码，而是可以看作支持带有“类型参数”的代码。&lt;/li>
&lt;li>&lt;strong>命令式(Imperative)/声明式(Declarative)/函数式(Functional)&lt;/strong>：命令式语言中，你需要一步步指定程序做什么；声明式语言中，你告诉语言你想要达到什么目的；函数式语言中，函数是一等公民，函数本身定义了你想达到什么目标，而程序通过不停地调用函数来实现，并且函数通常可以被存在变量里。&lt;/li>
&lt;li>&lt;strong>并行(Parallelism)&lt;/strong>：并行指的是程序支持多个代码块同时执行。具体的并行三种方法可以参考我之前的博客&lt;a class="link" href="https://zyxin.xyz/blog/2019-11/ParallelismInPythonAndCsharp/" >《进程、线程与协程》&lt;/a>&lt;/li>
&lt;li>&lt;strong>数据科学&lt;/strong>：一些语言是针对数据科学设计的，他们主要的特点是有对高精度数值类型和多维张量的内置支持。&lt;/li>
&lt;li>&lt;strong>测试驱动(Test-driven Development)/契约式(Design by Contract)&lt;/strong>：这两个概念其实是不同的编程逻辑，测试驱动指的是程序最终的目的是通过一定的测试，而契约式编程则是指编写时，程序本身需要满足一定的条件关系。对测试和契约的支持虽然不是必须的，但是在现代大型程序中却是能大大提高程序编写效率和安全性的。&lt;/li>
&lt;li>&lt;strong>虚拟机/中间语言(Intermediate Language)&lt;/strong>：不少语言都通过虚拟机来完成跨平台的实现，编程语言的虚拟机会将语言特定的中间码翻译成机器码。其代表有JVM、CLR、LLVM。&lt;/li>
&lt;li>&lt;strong>垃圾回收(Garbage Collection, GC)&lt;/strong>：垃圾回收是不少语言运行时内置的功能，在有这个功能的语言中你不用操心变量的生命周期，因为对象的销毁由垃圾回收器帮你实现了。&lt;/li>
&lt;/ul>
&lt;hr/>
&lt;blockquote>
&lt;p>下面开始介绍我对各个主流现代编程语言的一句话评价，这些语言主要选择自上文提到的排行榜。知乎&lt;a class="link" href="https://zhuanlan.zhihu.com/p/42534137" target="_blank" rel="noopener"
>有个类似的贴子&lt;/a>，但是主要都是段子。&lt;/p>
&lt;/blockquote>
&lt;h2 id="一n句话描述为什么选择这门语言">一(N)句话描述为什么选择这门语言&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>C&lt;/strong>: YYDS，是这里面最接近汇编的语言，性能好且依赖少，C语言的ABI能够被绝大多数语言调用。&lt;/li>
&lt;li>&lt;strong>CoffeeScript&lt;/strong>: 加糖版Javascript&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 最强大的语言之一，完整的面向对象和元编程支持，兼容C&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: 语法糖超级多，最近微软拥抱开源使得编程资源也变多，比Java快&lt;/li>
&lt;li>&lt;strong>D&lt;/strong>: 目标是替代C++，有很多现代语言特性的支持，如契约编程&lt;/li>
&lt;li>&lt;strong>Dart&lt;/strong>: 谷歌背书的取代的Javascript的语言，但是也就仅此而已了&lt;/li>
&lt;li>&lt;strong>Elixir&lt;/strong>: 基于ErlangVM的函数式语言，设计上借鉴Ruby&lt;/li>
&lt;li>&lt;strong>Erlang&lt;/strong>: 有个软实时，可预期的GC，高容错，有精心设计的并行接口（Green threads）&lt;/li>
&lt;li>&lt;strong>F#&lt;/strong>: C#的函数式版本&lt;/li>
&lt;li>&lt;strong>Fortran&lt;/strong>: 古老的语言，但运行非常快，甚至快过C&lt;/li>
&lt;li>&lt;strong>Go&lt;/strong>: 编译巨快，独立无依赖的可执行文件，内置有完整的协程支持&lt;/li>
&lt;li>&lt;strong>Groovy&lt;/strong>: Apache开发的动态类型版Java，对标Ruby&lt;/li>
&lt;li>&lt;strong>Hack&lt;/strong>: 由Facebook支持的PHP方言&lt;/li>
&lt;li>&lt;strong>Haskell&lt;/strong>: 函数式语言代表作，有很多语法概念都是从Haskell走出来的&lt;/li>
&lt;li>&lt;strong>Java&lt;/strong>: 在服务器后端应用特别广的语言，有垃圾收集，包特别多&lt;/li>
&lt;li>&lt;strong>Javascript&lt;/strong>: 前后端都非常流行的语言，语言灵活，被浏览器支持，也有非常多的包&lt;/li>
&lt;li>&lt;strong>Julia&lt;/strong>: 面向科学计算的语言，运行速度快，内置支持多维张量，有望替代Fortran&lt;/li>
&lt;li>&lt;strong>Kotlin&lt;/strong>: JetBrains开发的加语法糖的Java，而且都是很现代的语法糖，可以编译为Java或者Js&lt;/li>
&lt;li>&lt;strong>Matlab&lt;/strong>: 针对工程师和科学家的语言，工具包非常全，Simulink暂无敌手&lt;/li>
&lt;li>&lt;strong>Objective-C&lt;/strong>: 有啥优点吗？&lt;/li>
&lt;li>&lt;strong>Perl&lt;/strong>: 适合用作脚本语言或者胶水语言，字符串处理方便&lt;/li>
&lt;li>&lt;strong>PHP&lt;/strong>: 可以嵌入HTML，灵活，语法简单，针对服务器端&lt;/li>
&lt;li>&lt;strong>Python&lt;/strong>: 非常灵活，所有东西都是对象（包括类、函数），可读性强，与C/C++兼容好，包非常丰富&lt;/li>
&lt;li>&lt;strong>R&lt;/strong>: 针对统计科学家的语言，包也很全&lt;/li>
&lt;li>&lt;strong>Ruby&lt;/strong>: 链式调用、语法糖、跟Python一样的灵活性&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 语法保证的内存安全、无垃圾回收、也就意味着运行很快&lt;/li>
&lt;li>&lt;strong>Scala&lt;/strong>: 相比于Kotlin，像是JVM上的C++，而Kotlin像是JVM上的C#&lt;/li>
&lt;li>&lt;strong>Swift&lt;/strong>: 苹果开发来用以替代Obj-C的语言，定位上类似Java&lt;/li>
&lt;li>&lt;strong>Typescript&lt;/strong>: 强类型版的Javascript&lt;/li>
&lt;li>&lt;strong>Vala&lt;/strong>: 目标是替代C/C++在Linux的GUI编程中的地位，可以编译成C代码，因此性能不错&lt;/li>
&lt;li>&lt;strong>Visual Basic&lt;/strong>: 微软曾经在很多软件中都内置支持&lt;/li>
&lt;/ul>
&lt;h2 id="一n句话描述为什么劝退这门语言">一(N)句话描述为什么劝退这门语言&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>C&lt;/strong>: 功能过于简陋，需要用结构体和指针实现面向对象，不安全&lt;/li>
&lt;li>&lt;strong>CoffeeScript&lt;/strong>: 感觉没有核心竞争力，更多的人会用Typescript&lt;/li>
&lt;li>&lt;strong>C++&lt;/strong>: 模板编译难以纠错，编译也很慢，语法糖靠各种模板和标准库实现，不优雅，&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: .NetStandard标准混乱，API经常变且不向后兼容&lt;/li>
&lt;li>&lt;strong>D&lt;/strong>: 没有好爹，没有生态，混乱的GC&lt;/li>
&lt;li>&lt;strong>Dart&lt;/strong>: 感觉不如选择Typescript&lt;/li>
&lt;li>&lt;strong>Elixir&lt;/strong>: 除了基于ErlangVM以外没有突出的特性&lt;/li>
&lt;li>&lt;strong>Erlang&lt;/strong>: 灵活性不够，没有好爹&lt;/li>
&lt;li>&lt;strong>F#&lt;/strong>: 没人用哈哈哈哈，要么都去用C#了&lt;/li>
&lt;li>&lt;strong>Fortran&lt;/strong>: 老式语法，没有什么现代语言特性&lt;/li>
&lt;li>&lt;strong>Go&lt;/strong>: 功能少，没有泛型、不许有未使用的变量和模块、强制&lt;code>{&lt;/code>不换行&lt;/li>
&lt;li>&lt;strong>Groovy&lt;/strong>: 如果不限于JVM平台的话有更好的选择&lt;/li>
&lt;li>&lt;strong>Hack&lt;/strong>: 本来PHP就要没人用了哈哈哈&lt;/li>
&lt;li>&lt;strong>Haskell&lt;/strong>: 学它像是搞工程的人去学理论数学，包也不多&lt;/li>
&lt;li>&lt;strong>Java&lt;/strong>: 语法繁琐落后，不如C#写着优美，也不如C#性能好&lt;/li>
&lt;li>&lt;strong>Javascript&lt;/strong>: 单线程，语言过于不严格，参见下面著名的三位一体图
&lt;img src="https://zyxin.xyz/blog/blog/2021-08/OneLinePerProgrammingLanguage/js-triangle.jpg"
width="700"
height="336"
loading="lazy"
alt="Javascript等号三位一体"
class="gallery-image"
data-flex-grow="208"
data-flex-basis="500px"
>&lt;/li>
&lt;li>&lt;strong>Julia&lt;/strong>: 超级难用的包管理器，语法也很蛋疼，且暂不适合做通用开发&lt;/li>
&lt;li>&lt;strong>Kotlin&lt;/strong>: 编译慢，此外没有特别大的缺点，不过如果不限于JVM平台的话有很多其他的选择&lt;/li>
&lt;li>&lt;strong>Matlab&lt;/strong>: 语言本身是Mathworks的专利，并且使用一定要装Matlab软件，大部分功能都可以用Python和Julia实现了&lt;/li>
&lt;li>&lt;strong>Objective-C&lt;/strong>: 只有苹果开发曾经在用，可读性差&lt;/li>
&lt;li>&lt;strong>Perl&lt;/strong>: 晦涩难懂，过于灵活，性能也不行，感觉不如用Python&lt;/li>
&lt;li>&lt;strong>PHP&lt;/strong>: 单线程，仅适用于Web开发，通用性和社区活跃程度不如JS&lt;/li>
&lt;li>&lt;strong>Python&lt;/strong>: 性能差，单线程（GIL）&lt;/li>
&lt;li>&lt;strong>R&lt;/strong>: 比Matlab语法还蛋疼&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>: 编译器太严格、字符串操作很蛋疼&lt;/li>
&lt;li>&lt;strong>Ruby&lt;/strong>: 目前主要是后端工程师使用，性能差&lt;/li>
&lt;li>&lt;strong>Scala&lt;/strong>: 比Kotlin难上手，与Java互操作性也较差&lt;/li>
&lt;li>&lt;strong>Swift&lt;/strong>: 如果不是开发iOS和OSX没必要用&lt;/li>
&lt;li>&lt;strong>Typescript&lt;/strong>: 如果不是Web开发没必要用&lt;/li>
&lt;li>&lt;strong>Vala&lt;/strong>: 主要用户是Gnome和ElementaryOS，生态还不是很完善&lt;/li>
&lt;li>&lt;strong>Visual Basic&lt;/strong>: 如果没有历史包袱就不要用了&lt;/li>
&lt;/ul>
&lt;!-- TODO:
[Crystal](https://crystal-lang.org/),
[Reason](https://reasonml.github.io/),
[Ballerina](https://ballerina.io/),
[Nim](https://nim-lang.org/),
[Zig](https://ziglang.org/),
[Red](https://www.red-lang.org/),
[Pony](https://www.ponylang.io/),
[V](https://vlang.io/) -->
&lt;!-- TODO: Update English version -->
&lt;!-- TODO: Add links to official language website, highlight new languages -->
&lt;blockquote>
&lt;h2 id="拓展阅读">拓展阅读&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.zhihu.com/question/38032439/answer/84176970" target="_blank" rel="noopener"
>为啥Erlang没有像Go、Scala语言那样崛起&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>ACGN收藏 - 音频编码与格式</title><link>https://zyxin.xyz/blog/2021-07/ACGNAudioFormats/</link><pubDate>Tue, 20 Jul 2021 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2021-07/ACGNAudioFormats/</guid><description>&lt;p>在我的收藏里面，音乐是占大头的。我非常喜欢尝试各种风格的音乐，也非常喜欢日本音乐圈的多样性，因此收集了很多。在这过程中也了解到了一些音频格式的内容~我也&lt;a class="link" href="https://github.com/cmpute/audio-codec-benchmark" target="_blank" rel="noopener"
>自己做过一个benchmark&lt;/a>，比较不同音频编码的性能区别，如果有兴趣的话可以自己尝试一下~。&lt;/p>
&lt;p>我个人喜欢收藏无损音乐，目的不仅仅是因为高音质，而是无损意味着“无损”，音质与CD或者其他音源是完全一致的（当然，这个一致性音频编码本身并不能保证音源的完整性，但是如果有其他的辅助信息如EAC log，或者AccurateRip测试结果就完全可以保证了）。在这个情况下我把无损压成有损，就能保证这个有损是达到了预期的音质。如果是网上直接下载有损的话，一是很难确定这个有损有没有经过二次压缩，造成额外音质损失，二是有损也最好不要再转换格式了，同样是因为音质损失，这就造成了额外的不便。&lt;/p>
&lt;p>本文就介绍一下我了解的与音频编码相关的知识，以及各种常用音频编码格式的比较。更全面的格式对比可以&lt;a class="link" href="https://en.wikipedia.org/wiki/Comparison_of_audio_coding_formats" target="_blank" rel="noopener"
>参考Wikipedia页面&lt;/a>。另外需要指明的是，本文的介绍基于音乐收藏和本地播放的目的，与流媒体的需求不同，后者追求稳定的码率、低延迟甚至是低能耗。&lt;/p>
&lt;h2 id="音频信号调制">音频信号调制&lt;/h2>
&lt;blockquote>
&lt;p>如果学过信号处理的读者可能已经了解本章内容了，可以跳过这节~&lt;/p>
&lt;/blockquote>
&lt;p>在物理世界中，声音本质上是一种物体震动产生的波，如果要将物理世界中的波存储为数字世界可以存储的格式，则需要进行信号采样（模数转换）和信号调制。波形信号调制主要有两种方法，一种是脉冲编码调制（pulse-code modulation，PCM），一种则是脉冲密度调制（pulse-density modulation，PDM）。简而言之PCM就是通过数字信号的幅度和频率来分别表示模拟信号的幅度和频率，而PDM则通过数字信号的频率和幅度来分别表示模拟信号的幅度和频率（反过来了）。它们对应的音频存储格式是WAV和DSD（Direct Stream Digital），WAV由于编码简单是最广为使用的音频格式，而DSD由于技术和专利的限制则非常罕见，并且音频编辑比WAV复杂很多，因此只有在索尼的SACD上和一些高清音乐网站可以见到。&lt;/p>
&lt;p>PCM的音质在频率上受限于其采样率，根据Nyquist采样定理，两倍以上的采样率可以真实还原出原波形，所以考虑到人耳的听力最高到20kHz，通常PCM音频的采样率都在40kHz以上（如常见的44.1kHz和48kHz）；在振幅上受限于其采样位深。因此采样率低会导致声音高频被裁掉，而采样位深低会导致振幅分辨率下降，音频的动态范围下降，这两者共同导致音频的失真。而PDM由于我没学过，就不评价其音质了。&lt;/p>
&lt;p>在不同的采样方式之间是可能会产生额外失真的。高音质采样到低音质采样就不用说了，反过来也是可能的，如非整数倍地改变采样率（如44.1kHz到48kHz），PCM和PDM的转换。位深由于对应的是二进制的位数，非整数倍提高位深不会产生失真。&lt;/p>
&lt;h2 id="有损lossy编码">有损（Lossy）编码&lt;/h2>
&lt;p>首先是有损编码，有损编码的音乐比较好找，因为（天国的）虾米、网易云、Spotify等网站都可以下到，现在很多平台都提供比较高音质的试听了。但是在曾经的年代，高音质有损编码也是比较难找的，以及现在放在手机上听歌我还是会转换成有损音质。&lt;/p>
&lt;p>不同的有损格式对于“损失”音频的哪一部分、哪一频段是不一样的，他们适合的场景也不一样，比如有的格式设计之初的目的就睡尽量保留人声质量。如果真要比较哪种格式、哪种编码器的音质最好的话，只有A/B测试才是最可靠的，然而A/B测试也会受到被测对象的主观影响，所以如果想选择一个音质最好的编码器的话，可以自行A/B测试来做判断。&lt;/p>
&lt;p>有损音频的音质可以通过码率（birate）直接进行优劣判断。音频的码率指的是每秒文件能够提供的信息量，以CD音质为例，普通CD一般采样率是&lt;code>44.1kHz&lt;/code>（理论能够还原频率高达&lt;code>22kHz&lt;/code>的波形），采样深度&lt;code>16bit&lt;/code>，双声道，那么原始码率就是&lt;code>44100*16*2=1141.2kbps&lt;/code>，注意这里的&lt;code>kbps&lt;/code>是&lt;code>kilo bits per second&lt;/code>。普通能下载到的有损音乐通常是MP3格式（虽然这年头很少有人再下载音乐了），在我高中那会，从QQ音乐等平台上上下载的MP3基本都是128kbps，只有虾米下载的是192kbps甚至320kbps，因此我还是非常喜欢虾米的。&lt;/p>
&lt;p>码率是一个瞬时概念，对于音频编码（甚至视频编码）而言，码率是随时可能变化的。编码器通常提供两种码率控制方法：恒定比特率（Constant BiRate，CBR）和可变比特率（Variable BiRate，VBR）。选择CBR或者VBR需要试场景而定，CBR适合稳定的媒体串流，避免网络波动产生播放不畅，而VBR由于给了编码器更多空间根据媒体内容调节码率，通常而言可以达到更好的质量，适合本地存储回放。&lt;/p>
&lt;p>一种客观的音质测试方式是直接计算编码后音频与原音频信号相差了多少。根据我的测试，有损音频的质量基本和码率成正比（见下图，如果用信号损失的对数值来看的话几乎是线性正比）。而如果使用&lt;a class="link" href="https://en.wikipedia.org/wiki/Weighting_filter#Loudness_measurements_with_weighting_filters" target="_blank" rel="noopener"
>根据人听力敏感度加权&lt;/a>之后的频谱，那么可以看出在低码率时（如96kbps），AAC的音质较好，这正是AAC设计的目标，即在通话音质（一般就是96kbps）下能够有很好的表现。而在高码率时（如320kbps）WavPack和MP3 CBR的表现更好，因此很多人说MP3格式应该被淘汰，但320k的MP3的音质还是非常好的。&lt;/p>
&lt;p>&lt;img src="https://github.com/cmpute/audio-codec-benchmark/raw/master/figs/PLight_-_Bass_tek_2.wav.lossy_err.jpg"
loading="lazy"
alt="有损音质与码率关系图"
>&lt;/p>
&lt;p>简而言之，我的结论是在同等码率下各种有损格式的音质都差不多，更应该关注的是如何找到高码率的音源。下面介绍几个主流的有损音频编码格式。（我个人非常喜欢用WavPack的有损模式，但是这个很非主流）&lt;/p>
&lt;h3 id="mp3">MP3&lt;/h3>
&lt;p>MP3的名字来源于其最开始是作为MPEG-1标准中的第三种音频格式，它应该是（至少在中国）最广为流传的音频编码格式了。而在支持MP3的编码器中，&lt;a class="link" href="https://lame.sourceforge.io/" target="_blank" rel="noopener"
>lame&lt;/a>是其中最常用的。MP3的编码特性是它会根据码率的设置进行低通滤波，320kbps CBR时滤波在20kHz左右比较接近CD音质的22kHz了，而192kbps CBR滤波则在16kHz左右，128kbps在12KHz左右。因此不同码率MP3的听感区别是非常明显的，通俗来讲音质越差的MP3越像是把喇叭蒙在鼓里的声音，各个频段的特点可以&lt;a class="link" href="https://zyxin.xyz/blog/2020-12/AudiophileIntroduction/" >参考我之前的博客&lt;/a>。&lt;/p>
&lt;p>&lt;a class="link" href="https://lame.sourceforge.io/" target="_blank" rel="noopener"
>lame编码器&lt;/a>虽然2012年之后就几乎没有怎么更新了，但是它应该仍然是所有提供mp3的音乐平台使用的主要编码器。它支持CBR、VBR和独有的的ABR。CBR可以指定码率，VBR无法直接指定码率，而通过指定参数&lt;code>-V&lt;/code>来间接实现码率调整，而ABR则是在可变码率的同时支持指定一个目标平均码率。&lt;/p>
&lt;p>MP3虽然是个很古老的格式，并且有不少为人诟病的缺点，但是因为高码率MP3的音质确实不错，而且MP3的硬件支持非常到位，因此到现在仍然是非常流行的音频格式。&lt;/p>
&lt;h3 id="aac">AAC&lt;/h3>
&lt;p>AAC全名为Advanced Audio Coding，AAC设计目标是成为MP3的后继者。虽然维基上说AAC在同等码率下能够得到比MP3更好的音质，但根据我的测试结果这个结论只在相对较低码率的时候成立。不过AAC设计的定位应该就是针对流媒体，以及现在的蓝牙音频，这些地方音频的码率都是受限的，所以也不能说错。AAC比MP3支持更多的采样率、通道数，在视频编码时其实用的非常多，但是其实它不是针对音乐收藏而设计的。&lt;/p>
&lt;p>AAC音频文件的后缀名通常是&lt;code>m4a&lt;/code>和&lt;code>mp4&lt;/code>。这两者都是MPEG-4标准定义的流媒体容器后缀名，其中前者专门针对音频，而后者则是音频和视频都可以用。关于容器是什么，我会在之后的视频编码器博客中详细介绍。&lt;/p>
&lt;p>AAC音频编码器除了万能的ffmpeg以外，还有以下这些专门针对AAC的编码器&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="http://wiki.hydrogenaud.io/index.php?title=Nero_AAC" target="_blank" rel="noopener"
>NeroAAC&lt;/a>：质量最好，但是是商用编码器，不开源。&lt;/li>
&lt;li>QuickTime AAC：由苹果设计、应用在QuickTime和后来的iTunes中、口碑不错。&lt;a class="link" href="https://github.com/nu774/qaac" target="_blank" rel="noopener"
>有第三方开源的实现（qaac）&lt;/a>。&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/knik0/faac" target="_blank" rel="noopener"
>FAAC&lt;/a>：Free AAC，开源，但是感觉用的人不多&lt;/li>
&lt;/ul>
&lt;p>总的而言，AAC的特性非常多，也是一个经过深思熟虑后设计的编码器，但由于是针对流媒体设计的，对音频收藏来说并没有什么吸引力。&lt;/p>
&lt;h2 id="无损lossless编码">无损（Lossless）编码&lt;/h2>
&lt;p>无损编码即经过编码压缩之后不会损失信息的编码方式。如果仅仅是为了压缩而言的话，通用的文件压缩理论上也是可以用作音频编码的，但是通用压缩的效率肯定不如专门设计的音频压缩高，并且需要先解压才能播放。无损编码没有音质之差，它们的主要指标则是编码解码耗时，压缩率、对音频格式的支持以及其他附加功能。对音频格式的支持包括多声道（如5.1）、高采样率和位深（如常见的Hi-Res格式96kHz/24bit）、对DSD的支持等。&lt;/p>
&lt;p>下面介绍一些常用的无损格式（其中我选择的就是WavPack）。&lt;/p>
&lt;h3 id="flac">FLAC&lt;/h3>
&lt;p>FLAC名为Free Lossless Audio Codec，虽然听起来非常老土和山寨，但应该是目前各平台最通用的格式，像是MP3在有损编码里的地位。FLAC开源、性能好、解码快、硬件支持好、压缩率也不错，无脑选flac一般没什么问题。FLAC是MPEG支持的格式，很多高质量的DVD和BD压缩出来的视频里都会用FLAC作为音频编码。因此通常情况下FLAC编码音频文件的后缀名是&lt;code>.flac&lt;/code>，但有时你也能看到&lt;code>.m4a&lt;/code>的后缀名。&lt;/p>
&lt;h3 id="apetak">APE/TAK&lt;/h3>
&lt;p>APE（Monkey&amp;rsquo;s Audio）和TAK（Tom&amp;rsquo;s lossless Audio Kompressor）都是能够提供非常高压缩率的编码器，但是他们俩都是闭源的。在电驴（VeryCD）时代用APE的人非常多，可能就是由于其较高的压缩率吧，但是APE的编码和解码相当慢。TAK的编码解码都很快，估计是利用了多线程或者AVX加速。另外还有一款编码器叫OptimFrog，能够提供最高的压缩率，但是编码和解码都奇慢无比，更像是个Proof of concept的作品，而且还不开源，实际使用就不要考虑了。&lt;/p>
&lt;h3 id="wavpack">WavPack&lt;/h3>
&lt;p>这里隆重推荐我现在使用的WavPack。它开源、功能丰富、支持各种采样率位深和通道数，甚至支持DSD的编码，这个特性是别无二家了。&lt;/p>
&lt;p>不过最吸引我的功能其实是支持混合编码（见后文）。WavPack由于其开源的特点，同样被各大音乐软件所支持，甚至ffmpeg和MKV视频容器都是支持WavPack的，不过MPEG-4仍然不支持比较遗憾。WavPack在硬件上支持可能没有FLAC广，但是WavPack的源码中同样包含了用汇编直接编写的几个核心函数，因此编解码的性能也是非常好的。&lt;/p>
&lt;p>根据我的使用经验，WavPack有损音质好，无损体积小，编码也快，总之除了FLAC之外找WavPack就没错了！&lt;/p>
&lt;h2 id="混合hybrid编码">混合（Hybrid）编码&lt;/h2>
&lt;p>除了有损无损之外还有一种编码方式是混合编码，它指的是编码器在生成有损压缩音频后还生成一个修正文件（Correction File）。当修正文件和本体音频同时存在时原始音频可以被无损还原。这个编码方式的好处是你可以同时拥有大体积的高音质文件和小体积的低音质文件，非常适合我这样的收藏党，文件本体放在云上，然后小体积的有损部分可以经常下载下来听。有损部分也可以用作demo，如果听了demo之后喜欢上这首音乐了再去下载修正文件提高音质。&lt;/p>
&lt;p>支持混合编码的主要有三种音频格式：LossyWav，WavPack和OptimFrog，其中最后一种非常难用，而且好像和LossyWAV一样不支持无损播放，即需要先解码再播放才能达到无损音质。&lt;/p>
&lt;h3 id="lossywav">LossyWAV&lt;/h3>
&lt;p>LossyWAV其实不算是一个完整的音频编码器，而是一个预处理软件。LossyWAV只能处理原始的PCM音频，然后生成的也是PCM音频，之后还需要使用其他的（无损）编码器来进行压缩。它的原理是分析原始音频，然后对其进行某种形式的变换使得音频更容易被压缩，从而降低生成的音频文件平均码率。由于这个变换是不可逆的，因此它也是有损压缩，但是LossyWAV支持生成修正文件，因此它可以看作一种混合编码方式。&lt;/p>
&lt;p>经过以上描述，相信大家可以看出来编码过程非常麻烦，如果想要生成混合模式下的音频文件和修正文件，需要先从原始PCM音频生成有损PCM和修正PCM，然后再分别通过其他方式编码器将它们分别压缩，而无损解码的过程则是把他们反过来。因此LossyWAV在编解码速度和文件体积上都完全没有优势，并且这个原理也意味着LossyWav不支持无损播放。在能够选择WavPack的情况下还是不要用LossyWAV了。&lt;/p>
&lt;h3 id="wavpack-1">WavPack&lt;/h3>
&lt;p>WavPack内置对混合模式的支持，而且WavPack支持无损播放。这意味着只要播放器能够找到修正文件，那么播放器就能直接以无损音质播放音乐而不需要额外解码。这个特性对我来说就是killer！另外从前文图表可以看出，WavPack在有损模式下也能够达到很好的音质水平，甚至在特定码率下比MP3和AAC都要好。唯一遗憾的地方是混合模式下WavPack音频总体的压缩率是比较低的，通常会比无损模式下的体积要高出5%左右。不过这个年头存储空间越来越不值钱了，所以这个问题也完全可以忽略。&lt;/p>
&lt;p>总而言之我完全找不到理由不使用WavPack，再次向大家推荐这个编码器！&lt;/p>
&lt;hr>
&lt;p>本文介绍了在ACG音乐收藏的过程中我了解到的音频编码知识，而在下一篇博客我还会介绍视频编码的内容~&lt;/p>
&lt;blockquote>
&lt;p>参考资料：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://samplerateconverter.com/educational/dsd-pcm" target="_blank" rel="noopener"
>DSD vs PCM&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/cmpute/audio-codec-benchmark" target="_blank" rel="noopener"
>我自己搭的codec对比benchmark&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://en.wikipedia.org/wiki/Comparison_of_audio_coding_formats" target="_blank" rel="noopener"
>维基百科对音频格式的对比页面&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>MegaFavNumbers - 最喜爱的百万数字</title><link>https://zyxin.xyz/blog/2021-07/MegaFavNumbers/</link><pubDate>Sun, 11 Jul 2021 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2021-07/MegaFavNumbers/</guid><description>&lt;p>这篇博客也是拖了很久了，简直是蹭热度都蹭不到热的。。。去年年底有一帮数学家和喜欢数学的人（Numberphile）发起了一个Youtube系列，叫&lt;a class="link" href="https://www.youtube.com/hashtag/megafavnumbers" target="_blank" rel="noopener"
>#MegaFavNumbers&lt;/a>，也就是介绍自己最喜欢的大于一百万的数字。虽然没有要求这个数字是整数，但是Numberphile一般只关注整数（甚至仅自然数）。如果没有这个限制的话，那物理化学上就有很多常数了，例如某视频评论区有人提到阿伏伽德罗常数23333&lt;/p>
&lt;p>如果让我来选的话我还真想不太出来，毕竟没学多少数学，顶多会选$2^{32}$这种程序员知道的数字，或者已知最大的质数、孪生质数云云。这个题目真的是很有意思了，很多有特殊性质的数字或者是某数列的第一个数都会比较小，很少会有一个非常大并且独一无二的数字，因此看了3Blue1Brown的视频之后我顿时就来了兴趣，&lt;del>准备&lt;/del>写下这篇博客介绍以下各博主选择的数字，又了解一些平常不知道的冷知识~哈哈。我大致将这些数字分了个类，不过不是很严格。&lt;/p>
&lt;h2 id="某特殊数列中第一个超过1m的">某特殊数列中第一个超过1M的&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.youtube.com/watch?v=b1wWGRZ9YTE" target="_blank" rel="noopener"
>3 628 800&lt;/a> by @Peter Pike：第一个超过1M的阶乘。作者讲了一堆和阶乘有关的可视化，但是数字本身其实比较直观了。&lt;/li>
&lt;li>&lt;a class="link" href="https://www.youtube.com/watch?v=dJ6pej8SihI" target="_blank" rel="noopener"
>10&lt;sup>69&lt;/sup>+69&lt;/a> by @Kevin Du：$10^x+x$数列中第个3质数（前两个是$10^1+1$，$10^9+9$），即&lt;a class="link" href="https://oeis.org/A089379" target="_blank" rel="noopener"
>OEIS数列A089379&lt;/a>的第三个数 （不是很知道为什么没有选$10^9+9$ ┑(￣Д ￣)┍）&lt;/li>
&lt;li>&lt;a class="link" href="https://www.youtube.com/watch?v=A7eJb8n8zAw" target="_blank" rel="noopener"
>≈1.1698e45&lt;/a> by @Stand-up Maths：满足$\tan( p )&amp;gt;p$的第一个质数p，即&lt;a class="link" href="https://oeis.org/A249836" target="_blank" rel="noopener"
>OEIS数列A249836&lt;/a>中的第一个质数。&lt;/li>
&lt;li>&lt;a class="link" href="https://www.youtube.com/watch?v=Z3xq4ODNeZs&amp;amp;t=208s" target="_blank" rel="noopener"
>$C^{104}_{39}$&lt;/a> by @Zoe Griffiths：在杨辉三角里出现超过5次的数中，大于1M的第一个数。神奇的是前一个数是24310，然后突然就变得很大了！&lt;/li>
&lt;li>&lt;a class="link" href="https://www.youtube.com/watch?v=a9k_QmZbwX8" target="_blank" rel="noopener"
>640 320&lt;sup>3&lt;/sup>&lt;/a> by @Richard E. BORCHERDS：$\approx e^{\pi\sqrt{163}}-744$。取这个数的原因是它与$e^{\pi\sqrt{67}}-744$和$e^{\pi\sqrt{93}}-744$都神奇地非常接近一个整数，其背后的原因跟椭圆模函数$1/q+744+196884q+21493760q^2+&amp;hellip;$有关。这个数由传奇印度数学家Srinivasa Ramanujan发现，也被称为Ramanujan常数，计算这个数需要支持任意精度浮点运算的计算器。&lt;/li>
&lt;li>&lt;a class="link" href="https://www.youtube.com/watch?v=kIE2JZTwv_k" target="_blank" rel="noopener"
>23 240 400&lt;sub>6&lt;/sub> = 720 720&lt;sub>10&lt;/sub>&lt;/a> by jan Misali：即六进制表示的720720。720720是接近1M的超级合数（令$d(n)$表示$n$的因数个数，$f_\epsilon(n)=d(n)/n^\epsilon$，超级合数则是满足$\forall k\in\mathbb{Z}^+$, $k&amp;lt; n, d(n)&amp;gt;d(k), f_\epsilon(n)\geq f_\epsilon(k)$的数$n$），即&lt;a class="link" href="https://oeis.org/A002201" target="_blank" rel="noopener"
>OEIS数列A002201&lt;/a>中接近1M的一个很满足强迫症的数。博主为了让它超过1M换成了6进制哈哈哈哈。&lt;/li>
&lt;/ul>
&lt;h2 id="某特殊数列最后一个数">某特殊数列最后一个数&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.youtube.com/watch?v=5BFDdVqAFZE" target="_blank" rel="noopener"
>73 939 133&lt;/a> by @Flammable Maths: 最大的可右截断素数（right truncatable prime），即&lt;a class="link" href="http://oeis.org/A024770" target="_blank" rel="noopener"
>OEIS数列&lt;/a>最后一个数。&lt;/li>
&lt;li>&lt;a class="link" href="https://www.youtube.com/watch?v=lKjR60jkUQE" target="_blank" rel="noopener"
>≈1.151322e38&lt;/a> by @Normalized Nerd：十进制下最后一个水仙花数，即&lt;a class="link" href="http://oeis.org/A005188" target="_blank" rel="noopener"
>OEIS数列A005188&lt;/a>最后一个数。&lt;/li>
&lt;li>&lt;a class="link" href="https://www.youtube.com/watch?v=RAKWgYDcB4k" target="_blank" rel="noopener"
>$3\times2^{402653209}-1$&lt;/a> by @timpa&amp;rsquo;s videos: 从4开始的Goodstein序列的最大一个数，即&lt;a class="link" href="http://oeis.org/A005188" target="_blank" rel="noopener"
>OEIS数列A056193&lt;/a>中最大数。&lt;/li>
&lt;/ul>
&lt;h2 id="某猜想的第一个正例或者反例">某猜想的第一个正例或者反例&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.youtube.com/watch?v=eQCUPQdi6DY" target="_blank" rel="noopener"
>906 150 257&lt;/a> by @SparksMaths：&lt;a class="link" href="https://en.wikipedia.org/wiki/P%C3%B3lya_conjecture" target="_blank" rel="noopener"
>Pólya猜想&lt;/a>的最小反例。&lt;a class="link" href="https://www.zhihu.com/question/37164066/answer/71589759" target="_blank" rel="noopener"
>这里有个知乎回答提到了这个例子&lt;/a>。&lt;/li>
&lt;li>&lt;a class="link" href="https://www.youtube.com/watch?v=R2eQVqdUQLI" target="_blank" rel="noopener"
>666 030 256, 696 630 544&lt;/a> by @singingbanana：偶亲和数猜想：“偶数亲和数之和为9的倍数”的第一个反例。（亲和数对：A的所有真因数之和等于B，B的所有真因数之和等于A）&lt;/li>
&lt;li>&lt;a class="link" href="https://www.youtube.com/watch?v=vv0bHK44Q1s" target="_blank" rel="noopener"
>569 936 821 221 962 380 720&lt;/a> by @Numberphile：一个著名猜想的任意整数可以写成三个整数的三次方之和，其中$3=x^3+y^3+z^3$的解除了(1,1,1)，(4,4,-5)外找到的第三个解中的正数即为博主选择的数。&lt;/li>
&lt;li>&lt;a class="link" href="https://www.youtube.com/watch?v=L4ArlAfKTLA" target="_blank" rel="noopener"
>≈8.42443e51&lt;/a> by @WillsWei：使得$n^{17}+9$和$(n+1)^{17}+9$不互质的第一个$n$。&lt;/li>
&lt;/ul>
&lt;h2 id="来自非数学领域的数">来自非数学领域的数&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.youtube.com/watch?v=bknybcgfjAk" target="_blank" rel="noopener"
>1 094 795 585&lt;/a> by @LiveOverflow：&lt;code>0x41414141&lt;/code>，即ASCII码表示的&lt;code>AAAA&lt;/code>，被视作缓存溢出的标志&lt;/li>
&lt;li>&lt;a class="link" href="https://www.youtube.com/watch?v=pCNVkUYUnrY" target="_blank" rel="noopener"
>≈1.01971e1400&lt;/a> by @The Comamba: $k\cdot 256^{211}+99$，其中&lt;code>k&lt;/code>是一段破解DVD加密的代码的二进制表示。由于这段代码不合法，一个程序员用这个数把它加密成一个质数然后上传到了一个质数网站，也是很有想法了！&lt;/li>
&lt;li>&lt;a class="link" href="https://www.youtube.com/watch?v=QqbDLoNHqDk" target="_blank" rel="noopener"
>6.187e34&lt;/a> by @Tom Rocks Maths: $1/l_p$，$l_p$代表普朗克长度。普朗克提出世界不是连续的，因此普朗克常数就可以用来用整数表达这个世界！&lt;/li>
&lt;li>&lt;a class="link" href="https://www.youtube.com/watch?v=Zx5B0imgrS8" target="_blank" rel="noopener"
>1 056 006&lt;/a> by @Eddie Woo：悉尼歌剧院房顶的瓷砖数，surprise！哈哈哈哈！&lt;/li>
&lt;li>&lt;a class="link" href="https://www.youtube.com/watch?v=_Y-HRGdYr9s" target="_blank" rel="noopener"
>1 597 463 007&lt;/a> by @Rodrigo Aldana: 快速开方算法中的magic常数&lt;code>0x5f3795df&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="其他">其他&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.youtube.com/watch?v=4g_OjRB0wCE" target="_blank" rel="noopener"
>≈4.3252e19&lt;/a> by @David Dijon 和 @Philip Hintze: 魔方的组合可能数。&lt;/li>
&lt;li>&lt;a class="link" href="https://www.youtube.com/watch?v=2SBqn9EaMg0" target="_blank" rel="noopener"
>302 575 350&lt;/a> by @blackpenredpen：买到Mega Million彩票的可能性。&lt;/li>
&lt;li>&lt;a class="link" href="https://www.youtube.com/watch?v=P7Fbfu584ts" target="_blank" rel="noopener"
>12 345 679&lt;/a> by @TyYann：也是个很有名的数字了，12345679$\times$11 = 111111111。作者因为小时候的回忆而选择了它。&lt;/li>
&lt;li>&lt;a class="link" href="https://www.youtube.com/watch?v=mH0oCDa74tE" target="_blank" rel="noopener"
>≈8.08e53&lt;/a> by @3Blue1Brown：“魔群”（Monster Group）的大小。魔群是“散在单群”（Sporadic Simple Groups）中最大的群。推荐看完整原视频，解释这个概念也是非常麻烦了。。。另外&lt;a class="link" href="https://www.zhihu.com/question/47850518/answer/358979421" target="_blank" rel="noopener"
>知乎这也有个很棒的回答&lt;/a>。这个数是我觉得这系列里面最有意思的，一个数学中应该是非常基础的概念里面竟然会有这么大的尺寸，非常神奇！&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>时间有限，这里只总结了这么多。有一类数字没有加进来，就是专门生成大数字的运算符，所产生的最小数字。。。因为不好打出来所以没放。这个合作系列一共有200多个视频，如果有兴趣的话可以去&lt;a class="link" href="https://www.youtube.com/hashtag/megafavnumbers" target="_blank" rel="noopener"
>Youtube列表里面查看&lt;/a>~另外对有兴趣探寻这些数字游戏的人，我也推荐&lt;a class="link" href="https://projecteuler.net/" target="_blank" rel="noopener"
>Project Euler&lt;/a>，里面有很多找数字的题目，同时满足了对数字的好奇心和编程练习~&lt;/p>
&lt;blockquote>
&lt;h2 id="参考链接">参考链接&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.youtube.com/hashtag/megafavnumbers" target="_blank" rel="noopener"
>Youtube #MegaFavNumbers&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.zhihu.com/question/37164066" target="_blank" rel="noopener"
>数学史上有哪些看似成立的算式形式猜想，最终被某个大数证明不成立？ - 知乎&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://primes.utm.edu/glossary/page.php?sort=LawOfSmall" target="_blank" rel="noopener"
>Law of Small Numbers&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.zhihu.com/question/47850518" target="_blank" rel="noopener"
>数学中的“怪兽群”是什么概念&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://projecteuler.net/" target="_blank" rel="noopener"
>Project Euler&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://johncarlosbaez.wordpress.com/2018/09/20/patterns-that-eventually-fail/" target="_blank" rel="noopener"
>Patterns That Eventually Fail&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>ACGN 收藏者的自我修养</title><link>https://zyxin.xyz/blog/2021-07/ACGNCollection/</link><pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2021-07/ACGNCollection/</guid><description>&lt;p>很久没写博客了，这次想总结一下自己在ACGN收藏这条道路上越走越远，到底都走了哪些弯路哈哈哈哈 &lt;del>（博客画风突变）&lt;/del>。这一篇算是一个开篇稿吧，想写的内容有挺多的，一些比较短的内容会放在这一篇底下。&lt;/p>
&lt;p>&lt;a class="link" href="https://en.wikipedia.org/wiki/ACG_%28subculture%29" target="_blank" rel="noopener"
>ACGN&lt;/a>即Animation、Comics、Games、Novel，不知道这个年头还有多少人用这个词，但是这个词确实描述了我的兴趣爱好。虽然ACGN从名字上来看没有特定的文化限制，但是一般都是指源自日本的（日本的文化输出是不得不服啊），尤其是Animation这个词，通常在ACG里面的A其实指的是Anime（Animation的日式发音缩写），特指日本动漫。鄙人虽然喜欢看（日本）动漫小说等，算的上半个二刺螈，但是ACGN产业本身也是良莠不齐的文化产品，其中有很多优秀的产品，也不乏令人无语的奇葩。&lt;/p>
&lt;p>个人认为日本ACGN的吸引力不仅仅在于产品制作精良，更在于其涉猎内容的广泛以及表达形式的多样，再加上各式产业的紧密衔接，让人很容易进这个坑里。我从初中入宅以来也接触了很多ACGN的内容，不过主要是看动漫去了，小说漫画看了个别，而日式游戏基本只接触过俩：雀龙门和东方系列。但真正让我入坑收藏的其实是从东方接触到的同人音乐，同人音乐的世界包罗万象，而又大多是限量发售，因此就勾起了我的收藏欲。之后渐渐的不仅收藏同人音乐，也去收藏起ACGN的产品了。&lt;/p>
&lt;p>以前作为一个高中生，实在是没有什么存储资源存那么多的内容，不过现在好很多了，但是却也没有精力去整这些东西了。更悲催的是大二硬盘被偷了一次，导致我一半的收藏没了，也导致我很长一段时间再也没有收藏的欲望了。。。（于是落下了很多坑，悔不当初）&lt;/p>
&lt;p>之后的几篇博文想介绍以下几个内容，虽是由我收藏的爱好衍生出来的一些技术，但也可以适用于很多其他的场合，因此有想把他们写下来的动力：&lt;/p>
&lt;ol>
&lt;li>&lt;a class="link" href="https://zyxin.xyz/blog/2021-07/ACGNFileManagement/" >文件管理&lt;/a>&lt;/li>
&lt;li>音频压制&lt;/li>
&lt;li>音乐整理与播放器&lt;/li>
&lt;li>视频压制&lt;/li>
&lt;li>网页打包&lt;/li>
&lt;/ol>
&lt;p>这篇就写到这里了，希望这个博客的坑最后也能填完orz。。&lt;/p></description></item><item><title>ACGN收藏 - 文件管理</title><link>https://zyxin.xyz/blog/2021-07/ACGNFileManagement/</link><pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2021-07/ACGNFileManagement/</guid><description>&lt;p>对于ACGN收藏来说，文件管理是一个基础任务，毕竟收藏的文件内容多种多样，例如光盘镜像、压制后的音频视频、小册子扫描、字幕甚至小游戏等。把文件按一定结构整理是必要的，我也专门为整理音乐写了&lt;a class="link" href="https://github.com/cmpute/Fluss" target="_blank" rel="noopener"
>一些小工具&lt;/a>，不过整理文件的格式因人而异，也没有特别的难度，因此不需要特别描述我是怎么做的。我觉得值得一提的内容是如何对文件进行定期存档和备份，这也是我在硬盘被偷之后立马开始对收藏的文件进行的操作。备份有一个3-2-1的原则：3份备份，2份本地，1份云端，下面会介绍一些本地的备份和云端备份的方法以及我的选择。&lt;/p>
&lt;h2 id="离线备份">离线备份&lt;/h2>
&lt;p>离线备份就是把文件资料整理并存储到另一个设备上，需要考虑的功能有加密、压缩、增量更新、去重、冗余等。如果是最基本的备份，如果只想直接备份，不考虑加密压缩等的话，著名的&lt;a class="link" href="https://rsync.samba.org/" target="_blank" rel="noopener"
>rsync&lt;/a>是个不错的选择，它可以同步两个目录（可以是挂载FTP的目录），并且有算法来进行去重以减少二进制的传输。&lt;/p>
&lt;p>对我而言最大的需求是有冗余（指恢复记录，Recovery Record）和分卷，因为之前有在光盘上存一部分的音乐，而最后有几个压缩包已经无法恢复了，光这一条一卡几乎没剩下几条选项，可以参考&lt;a class="link" href="https://en.wikipedia.org/wiki/List_of_archive_formats#Data_recovery" target="_blank" rel="noopener"
>维基百科&lt;/a>。内置支持恢复记录的格式最著名且常用的有WinRAR（虽然不开源），另外剩下的里面开源的只有DAR，FreeArc。FreeArc已经10年没更新了，并且代码是毛子用Haskell写的，注释都是俄语。。因此就不考虑了。如果考虑外部支持的话最常用的就是Par2标准。下面对比几种（文件级别）方案的区别&lt;/p>
&lt;blockquote>
&lt;p>如果有多盘的话那么RAID就是不二选择了。不过选择文件系统以及组RAID或者NAS都是比较折腾，而且多数情况下需要Linux，我现在平时还是难免用Windows当主力，换成Linux做备份还是麻烦，因此本文就不介绍支持备份功能的文件系统了。如有兴趣可以自行了解&lt;a class="link" href="https://www.openzfs.org" target="_blank" rel="noopener"
>ZFS&lt;/a>、&lt;a class="link" href="https://btrfs.wiki.kernel.org/index.php/Main_Page" target="_blank" rel="noopener"
>Btrfs&lt;/a>或者&lt;a class="link" href="https://wiki.archlinux.org/title/XFS" target="_blank" rel="noopener"
>XFS&lt;/a>+&lt;a class="link" href="https://en.wikipedia.org/wiki/Logical_Volume_Manager_%28Linux%29" target="_blank" rel="noopener"
>LVM&lt;/a>。这方面还有有很多博文可以参考（如&lt;a class="link" href="https://markmcb.com/2020/01/07/five-years-of-btrfs" target="_blank" rel="noopener"
>这一篇ZFS和Btrfs的比较&lt;/a>，以及&lt;a class="link" href="https://ownyourbits.com/2019/03/03/how-to-recover-a-btrfs-partition/" target="_blank" rel="noopener"
>这一篇如何从Btrfs恢复数据&lt;/a>）&lt;/p>
&lt;/blockquote>
&lt;h3 id="winrar">WinRAR&lt;/h3>
&lt;p>&lt;a class="link" href="https://www.rarlab.com/" target="_blank" rel="noopener"
>WinRAR&lt;/a>除了不开源之外其实没有任何大毛病，它的解压部分也是开源的，因此不用担心以前的rar压缩包以后会打不开。主要的缺陷是WinRAR对增量更新几乎没有支持，最多&lt;a class="link" href="https://x443.wordpress.com/2012/07/11/winrar-incremental-differential-backup/" target="_blank" rel="noopener"
>通过文件flag来实现&lt;/a>，因此不必指望RAR做增量更新了。如果只是想把收藏做个镜像，那WinRAR就很方便了，有不错的压缩和加密，而且内置支持分卷和恢复记录，这两个功能到2021年仍然是独一家。&lt;/p>
&lt;h3 id="dar--par2">DAR + Par2&lt;/h3>
&lt;p>DAR是一个设计来替代Tar的文档格式，内置对Par2的支持，并且支持增量更新，对大量数据的备份其实挺友好的。&lt;a class="link" href="https://en.wikipedia.org/wiki/Parchive#Par2" target="_blank" rel="noopener"
>PAR2&lt;/a>是个给文件生成外部恢复记录的标准，可以生成一些恢复记录文件，当数据主体文件有一些损坏的时候，可以使用PAR2文件进行恢复，并且PAR2文件本身也是能够允许一部分损坏的。这个方案其实功能上来说很不错，但是由于是针对Linux设计的，对Windows支持用cygwin太不友好了。此外DAR的软件支持也不是很全，不知道为什么没有流行起来。&lt;/p>
&lt;h3 id="7zip--par2">7zip + Par2&lt;/h3>
&lt;p>如果不限打包软件（不要求对Par2的直接支持和增量更新）的话7zip应该是当前评价最高的压缩软件了。7zip + Par2是个不错的选择，不过设置Par2的参数就有一些麻烦了。这个方案相比WinRAR的优势仅仅在于7zip和Par2都是开源的。7zip有个额外的坏处是它的slice每个分区不能独立打开，rar的话每个slice包都有对应的文件可以解压。Par2相比WinRAR的修复好处在于它可以progressively提供冗余，就是下载的冗余文件不够的话可以下载更多冗余文件来进行修复，弱势是它不能处理32767以上个文件，因此必定需要跟某个archive格式一起使用。&lt;/p>
&lt;h3 id="7zip--seqbox">7zip + SeqBox&lt;/h3>
&lt;p>除了冗余数据之外，另一种保护对象是磁盘系统的文件头。SeqBox是一个用来保护&lt;strong>单一&lt;/strong>文件在磁盘文件系统损坏的情况下仍能恢复数据的通用工具，其工作原理是将文件分割成尺寸小于硬盘扇区（sector）大小的块，每个文件块有独立的包含文件UID的文件头，这样哪怕分区表损坏，指定文件还是可以通过一次全盘扫描恢复出来。而BlockyArchive则是基于此之上的改进版，给每个文件块加上了冗余码，使得文件本身的损坏也可以得到恢复。这个方法对数据长期冷存储应该是很有用的。不过它会产生不小的额外存储开销，并且对应的功能其实更适合通过文件系统本身来解决，例如之前提到的著名的ZFS和Btrfs。&lt;/p>
&lt;h2 id="在线备份">在线备份&lt;/h2>
&lt;p>由于在线存储服务商通常都会提供数据完整性check以及数据冗余存储的功能，因此对recovery record的需求没有那么大（百度网盘除外！！！辣鸡网盘下载经常文件损坏）。有许多软件支持数据同步和备份，同步比如Google Drive自带的sync，Onedrive或者&lt;a class="link" href="https://rclone.org/" target="_blank" rel="noopener"
>rclone&lt;/a>，他们的缺陷是没有加密、压缩，并且支持的snapshot功能有限。相比于本地备份，在线备份更关注的可能就是文件体积了，因为文件体积可能直接会影响收费策略，而冗余和备份通常会有云服务商来保证，因此去重对于在线备份来说是更重要的。&lt;/p>
&lt;p>更针对性的备份软件则对这些都有支持，在&lt;a class="link" href="https://alternativeto.net/software/time-machine/?license=opensource" target="_blank" rel="noopener"
>这个网站有一个开源软件的list&lt;/a>。这些软件通常支持将数据备份到另一个目录、NAS或者网盘，并且定期执行增量备份。由于Windows或者Mac目前还是不可避免地成为主力系统，因此只考虑支持Windows、Mac的情况下，再加上有GUI，可选项有&lt;a class="link" href="https://www.duplicati.com/" target="_blank" rel="noopener"
>Duplicati&lt;/a>，&lt;a class="link" href="https://duplicacy.com/" target="_blank" rel="noopener"
>Duplicacy&lt;/a>，&lt;a class="link" href="https://www.urbackup.org/impressions.html" target="_blank" rel="noopener"
>UrBackup&lt;/a>和&lt;a class="link" href="https://github.com/BlobBackup/BlobBackup" target="_blank" rel="noopener"
>BlobBackup&lt;/a>。这些软件有些是针对系统备份设计的，但其实我对系统备份没有什么需求，毕竟重装系统也没有很麻烦。Duplicacy有开源CLI，但GUI是收费的，性能很好。UrBackup的UI都很简陋，而且感觉更新不勤。BlockBackup是个定位简洁的产品，看下来Duplicati和Duplicacy还是个不错的选择，Duplicati支持的后端更多，而Duplicacy的性能更好并且更稳定。关于这些选择有不少比较，例如&lt;a class="link" href="https://forum.duplicati.com/t/big-comparison-borg-vs-restic-vs-arq-5-vs-duplicacy-vs-duplicati/9952" target="_blank" rel="noopener"
>Duplicati的论坛里&lt;/a>，&lt;a class="link" href="https://github.com/gilbertchen/benchmarking" target="_blank" rel="noopener"
>Duplicacy作者的benchmark&lt;/a>，可供参考。目前我的选择是Duplicacy，因为稳定并且高效。但Duplicacy由于算法特性，产生的文件块比较小，因此对于大数量的小文件备份不是很友好，如果之后要做日常文件备份的话可能还是会考虑Duplicati。&lt;/p>
&lt;p>这里提以下去重（Deduplication）和&lt;a class="link" href="http://dar.linux.free.fr/doc/usage_notes.html#Decremental_Backup" target="_blank" rel="noopener"
>增量（Incremental）/减量（Decremental）/差分（Differential）备份&lt;/a>的区别，通常增量备份仅仅会保留完整的新文件而可以跳过没有改动的文件（类似Git的模式），对文件中不同的部分一般不做处理，但在这种情况下如果有大文件进行了内容修改，则会产生大量的浪费，因此有专门的去重算法来针对文件整体内容进行去重，其本质上就是将所有文件看作一个大文件，然后通过特定的方法拆分（通常是使用&lt;a class="link" href="https://en.wikipedia.org/wiki/Rolling_hash" target="_blank" rel="noopener"
>Rolling hash&lt;/a>）来达到快速查重的效果。这样的一个比较大的问题就是文件会被分成很多小块（通常只有几个MB），因此对于文件传输来说其实很低效（例如上传到网盘、拷入备用磁盘等），并且将文件分块太细也会带来一定的性能和容量损失。在文件内容大部分为大文件，并且不会内部进行小修改的时候，这样的操作其实比较浪费时间。&lt;/p>
&lt;p>这里提到的在线备份工具都可以把本地磁盘看作一个备份目的地，因此也可以用作离线备份。另外离线备份也可以通过同步工具（如rclone）变成在线备份。上文提到的离线备份一般不能做到multi-version（除了ZFS），不过对于比如我这个音乐收集的任务来说，历史记录不是非常重要，因此也是个可行的方案。&lt;/p>
&lt;h2 id="网站归档">网站归档&lt;/h2>
&lt;p>还有一个比较另类的需求，我不仅想备份自己的文件，还想备份别人的&lt;del>文件&lt;/del>网站。&lt;/p>
&lt;p>很多同人社团的网站有很多信息，如Discography、世界观设定、Stuff List甚至一些正常的blog等，但是这些内容都不是持久的，很多同人社团停止活动之后网站也没了，因此也想备份他们的网站。这个需求通常可以通过知名网站&lt;a class="link" href="https://archive.org/web/" target="_blank" rel="noopener"
>Internet Archive&lt;/a>完成，但是这个网站因为是公益性质的，一些多媒体资源并不一定有保存下来，还是自己搭建网站爬虫会比较可靠，Internet Archive可以作为补充。&lt;/p>
&lt;p>网站爬取以前是通过IDM（Internet Download Manager）可以实现，但是IDM不免费因此后面也没有用了。而单页的存档方式之前很流行的一个格式是Firefox的&lt;a class="link" href="https://en.wikipedia.org/wiki/Mozilla_Archive_Format" target="_blank" rel="noopener"
>maff&lt;/a>，不过Firefox也不再支持这个格式了。现在的计划是下载单独的网页用Save Page WE这个插件来完成，基本可以原封不动地备份一个网页，而对于备份整个网站，计划之后搭建一个自己的&lt;a class="link" href="https://github.com/ArchiveBox/ArchiveBox" target="_blank" rel="noopener"
>ArchiveBox&lt;/a>。&lt;/p></description></item><item><title>“音频发烧友” / “Audiophile” 入门及杂谈</title><link>https://zyxin.xyz/blog/2020-12/AudiophileIntroduction/</link><pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2020-12/AudiophileIntroduction/</guid><description>&lt;p>最近买了一些新的耳机，但是买完总感觉自己被收智商税了，于是就查查查了好多资料。这篇文章介绍我理解下音频发烧友的一些词汇是什么意思，如果你不烧耳机音响，但是想了解这个群体的，这个文章也能作为一个入门参考～Hifi领域有很多词汇我也没懂的，我也写在文章里了，如果有老烧路过请指教一二。我尝试用我学过的知识来客观解释音频领域的知识，我没上过信号处理，相关课程只上过自动控制和离散控制。&lt;/p>
&lt;h2 id="发烧到底追求的是什么">发烧到底追求的是什么&lt;/h2>
&lt;p>刚好今天有看到&lt;a class="link" href="https://www.youtube.com/watch?v=rM8sxFxmOUw" target="_blank" rel="noopener"
>一个Youtube视频&lt;/a>讲到，为什么音乐人并不care那些高端的音频设备。视频内容本身的观点是：一方面音乐人更关注的是音乐本身能不能打动人，另一方面是音乐人很多也没有那么多闲钱哈哈哈。以及底下的评论有很多人说自己是pro musician，然后疯狂喷audiophile追求的东西是虚无飘渺的。我承认烧音频领域有很多玄学都是脑放（脑补出来的），但是做耳机解码之类的厂家也是有很多pro audo engineer，不能否认这里面也是有很多技术门道的。根据这一帮自称pro musician的发言，我估计他们也没有多牛，他们的观点也有幸存者偏差在里面，并且本身不同级别不同类型的音乐也有不同的需求，因此这些评论也就看看就好。不过有一点我是同意的，听音乐最重要的还是音乐本身，对音质的追求不应放于对音乐本身的追求之上。&lt;/p>
&lt;p>再打个比方，对音质的追求和对画质的追求其实是相似的，好的（照片）画质能让我们看清楚世界更多的细节，好的音质能让我们更真切地感受到被乐器包围的感觉。音频处理和视频处理也有很多相似的地方，因为他们都经常被看作信号来处理，后文我也会经常拿画质来打比方。&lt;/p>
&lt;h3 id="什么是好的音质">什么是好的音质&lt;/h3>
&lt;p>在找到了自己喜欢的音乐之后，我们当然会希望手里的设备能更好的还原音乐本身，能听到每一点细节。因此对音质好的标准在我看来（我相信也是大多数人的观点），指的是&lt;strong>耳朵听到的声音感觉和你站在录音的地方听到的声音感觉非常相似&lt;/strong>。由此可见在现场听，在乐器和人声面前听才能获得&lt;strong>完美的音质&lt;/strong>，这是音质的金标准。当然这个也不是那么统一的，例如我并不觉得在歌手演唱会听到的音乐会比手机放出来的好听，因为演唱会非常嘈杂并且音响素质也不见得很好；但如果是在音乐厅听交响乐，我可以拍胸脯保证听到的声音远超电子设备播放出来的。又比如我还听很多电子音乐，里面很多音色都是直接合成出来的，那就无法通过这样的标准来定义了，这种情况下最好的音质可以定义成&lt;strong>你听到的声音和音乐人以及调音师想让你听到的声音一致&lt;/strong>。&lt;/p>
&lt;p>上面提到的音质是可以客观定义和测量的，但是另一部分人追求的音质则是他听到的声音符不符合他的口味，例如有些人喜欢温润的女声，有些人喜欢低沉的bass，这些其实都是主观的喜好。这才是发烧友的精髓——定制，就像搞机械键盘什么的，定制和折腾才是发烧友的精髓。不过我对这样的音质并没有什么追求，因为他们通常都可以通过简单的Eq（调整Equilizer）来解决。&lt;/p>
&lt;h3 id="听到的声音的几个指标">听到的声音的几个指标&lt;/h3>
&lt;p>通常对于音频发烧友来说，音质好不好是个比较笼统的词汇，因为音质好大抵是相似的，而音质差则各有各的差法。为了区分这些方面，audiophile们利用以及发明了很多与音质有关的词汇，我把比较常见的以及他们的意思列在下面了&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>声音基本概念&lt;/th>
&lt;th>(声音的本质是声波)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Loudness / 响度&lt;/td>
&lt;td>声波的振幅，通常会取势能来计算平均振幅&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Tone / 音调&lt;/td>
&lt;td>（简单）声波的频率，真实的声音通常会是多个频率的叠加&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Timbre / 音色&lt;/td>
&lt;td>声波的形状，人通过音色区分声音的来源&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>音频信号&lt;/th>
&lt;th>(如何表征一个音频信号)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Spectrogram / 频谱&lt;/td>
&lt;td>频谱描述信号在各个频率上的幅度，一般通过Fourier变换计算，由于Fourier变换是可逆的，因此频谱可以唯一地对应一段声音&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Frequency (Response) / 频率(响应)&lt;/td>
&lt;td>频率响应描述输入信号和输出信号在频域上的差异&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Phase / 相位&lt;/td>
&lt;td>相位本身指周期信号中信号在周期的哪个位置，但是相位本身很少用，用的更多的是相位差。我们常用的是将相位差推广到非周期信号，然后用来描述多个声道之间的信号时间差&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>可以量化的词汇&lt;/th>
&lt;th>（客观描述音质）&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Bass / 低频&lt;/td>
&lt;td>20Hz-20kHz的低频部分&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Mid / 中频&lt;/td>
&lt;td>20Hz-20kHz的中间部分&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Treble / 高频&lt;/td>
&lt;td>20-20kHz的高频部分&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Imaging / 声像&lt;/td>
&lt;td>声音的定位准不准，与信号相位有关。&lt;a class="link" href="https://www.rtings.com/headphones/tests/sound-quality/imaging" target="_blank" rel="noopener"
>可参考Rtings的测量方法&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Sound Stage / 声场&lt;/td>
&lt;td>感受到的空间大小，听起来音源越分散，声场越大。这个主要是针对耳机还原音箱声场的感觉，具体解释参考&lt;a class="link" href="https://site.douban.com/widget/notes/275603/note/118007253/" target="_blank" rel="noopener"
>豆瓣这篇文章&lt;/a>，测量方法参考&lt;a class="link" href="https://www.rtings.com/headphones/tests/sound-quality/passive-soundstage" target="_blank" rel="noopener"
>Rtings的测试流程&lt;/a>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Dynamic Range / 动态范围&lt;/td>
&lt;td>在同一段声音里同时表现幅度很大和很小的信号的能力，可以参考图像的HDR技术。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Transient / 瞬态&lt;/td>
&lt;td>这个词我是抱有疑问的，虽然控制器确实有响应时间这个参数，但是用在声音信号上感觉并不算很合适。好像一般通过追踪方波输入来看耳机的瞬态响应。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Signal to Noise Ratio (SNR) / 信噪比&lt;/td>
&lt;td>字面意思，信号对噪声的比。这个噪音通常是音频电路的底噪。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Total Harmonic Distortion (THD) / 总谐波失真&lt;/td>
&lt;td>输入一个纯净正弦信号，输出里这个信号的谐波就是谐波失真。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Intermodulation Distortion (IMD) / 互调失真&lt;/td>
&lt;td>输出两个频率的信号，测输出信号的失真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Crosstalk / 串扰&lt;/td>
&lt;td>多通道之间的信号干扰&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>玄学词汇&lt;/th>
&lt;th>（主观描述音质）&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Fidelity / Resolution / 解析力&lt;/td>
&lt;td>这个词可能指的是低失真？有时候感觉也指超高频的频率响应。被各种厂家的广告用烂了，没有统一的解释&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Punchy / 力度&lt;/td>
&lt;td>通常指的是低频非常重&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Congested / 拥挤 / Shouty&lt;/td>
&lt;td>大概指的是声场小，或者是中高频gain太高&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Sharp / 锐&lt;/td>
&lt;td>一般是在频谱的某一小段中高频上有刺突&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Clean / Clarity / 通透 / 纯净&lt;/td>
&lt;td>应该都指的是中高频比较突出&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Sound quality / 音质&lt;/td>
&lt;td>虽然这里我们客观地讨论了什么是好音质，但是在audiophile社区里面这个词并不都是这么定义的&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Tonality / 调性&lt;/td>
&lt;td>这个词我着实没弄懂，本身是用来形容乐曲的谱调的，但是用来形容音质我也摸不找头脑&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Layered / 层次感&lt;/td>
&lt;td>这虽然我知道是什么意思，以及能听出来区别，但是觉得这个词很模糊。我猜测它与声像和声场都有关。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>其中低中高频的区别这里贴一张引自crinacle的图&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2020-12/AudiophileIntroduction/fr-chart.png"
width="634"
height="699"
loading="lazy"
alt="频率对应图"
class="gallery-image"
data-flex-grow="90"
data-flex-basis="217px"
>&lt;/p>
&lt;h3 id="人能听出多大差别">人能听出多大差别&lt;/h3>
&lt;p>在定义了什么是好音质以后，还有个问题是人能听出来多大的音质差别？首先一个基本常识是人的听力范围是在20Hz-20kHz之间（也有说16Hz-20kHz的），这是目前通用的标准，包括音频的采样率定在44100Hz也是参考了这个数据。另外在&lt;a class="link" href="https://www.zhihu.com/question/274582289/answer/640857360" target="_blank" rel="noopener"
>这个知乎回答&lt;/a>里面，答主引用了这些数据：&lt;/p>
&lt;blockquote>
&lt;p>人耳所能感知到的纯单音变化最小幅度为0.3dB
人耳在最敏感的500Hz~2kHz段所能感知到的频率变化一般是0.2%
人耳所能感知的低次谐波失真变化最小量一般在1%上下&lt;/p>
&lt;/blockquote>
&lt;p>以上这些数据可以作为参考，但是它们并不能作为硬性指标，例如说音频信号超过20kHz的部分就是完全没有意义的，我认为是不科学的。一是因为以上都是统计数据，不能否认现实世界有“金耳朵”的存在（不过至少我不是），二是以上数据来源于科学实验，其实验过程与我们听音乐的时候可能并不相同，有可能会导致音频敏感度的差别。不过至少这些数据让我们有一个大概的概念，如果一个音频设备带来的提升远小于这些数，那么极大概率你是听不出他们带来的区别的。&lt;/p>
&lt;h2 id="发烧友字典">发烧友字典&lt;/h2>
&lt;p>Hifi界另外一些让人摸不着头脑的地方就是，各种各样的词汇，以及这些词汇似乎指向的东西有时候也很不明确。。。这里把我自己学到的记一下。&lt;/p>
&lt;h3 id="音乐播放器系统组成">音乐播放器系统组成&lt;/h3>
&lt;p>我们这里不考虑录音室的系统组成，而只考虑用户的系统组成。&lt;/p>
&lt;h4 id="音源">音源&lt;/h4>
&lt;p>好像音源又叫&lt;strong>前端&lt;/strong>？整那么邪乎干啥。。。音源有CD机、电脑、唱片机（俗称转盘turntable？），因为现在都是数字音乐了，因此重要的就是源文件的音质。音频格式有很多说法，首先分PCM和DSD两种，PCM是时域采样而DSD是频域采样。PCM又有很多指标，例如位深指音频每个采样的精度（通常是16bit，HiRes则有24bit以上），采样率指采样的频率，根据Nyquist-Shannon采样定律，频率高于20kHz理论上就能做到无损采样。然后音乐文件的格式又分有损和无损，有损格式如果比特率足够高还行，如果很低那就会非常严重地影响音质。然后音源会输出到数字界面。&lt;/p>
&lt;h4 id="数字界面">数字界面&lt;/h4>
&lt;p>虽然机油送我了一个数字界面，但是我并不能听出区别，以及我到现在也不是很清楚这个界面是干什么的。根据&lt;a class="link" href="https://www.zhihu.com/question/30806888/answer/50247612" target="_blank" rel="noopener"
>我知乎看到的资料&lt;/a>，数字界面是把USB信号转换成DAC芯片能够直接读取的信号。外置数字界面的好处一个是时钟（可能）比内置更加精确，另一个是给没有USB或者火线（IEEE-1394协议）接口的DAC提供输入。这里就涉及另一个玄学的概念，叫&lt;strong>时钟抖动（Jitter）&lt;/strong>。由于数字信号的采样（指PCM）是恒定频率的，因此如果数字线路的时钟频率不稳定，是会非常影响DAC转换结果的。抖动可以来源于时钟本身（如晶振），也可能来源于数字信号传输的接口芯片。不过就像知乎另一个回答说的，一般这种抖动都非常非常细微，我并不认为这对信号能有太多影响，并且我确实也听不出来。想感受一下多玄学的可以再看看&lt;a class="link" href="http://www.erji.net/forum.php?mod=viewthread&amp;amp;tid=7494&amp;amp;extra=pageD1&amp;amp;page=" target="_blank" rel="noopener"
>耳机大家庭的文章&lt;/a>。。。&lt;/p>
&lt;h4 id="解码器digital-analog-converterdac">解码器（Digital-Analog Converter，DAC）&lt;/h4>
&lt;p>DAC就是数模转换器，用来将数字信号转成模拟信号。这个过程我觉得挺重要的，因为数模转换（模数转换）带来的信号损失还是很明显的。从控制理论里的零阶保持（ZOH）来理解的话，&lt;a class="link" href="https://www.dummies.com/education/science/science-engineering/real-world-signals-and-systems-case-solving-the-dac-zoh-droop-problem-in-the-z-domain/" target="_blank" rel="noopener"
>转换过程会影响信号的相位和高频&lt;/a>。DAC的质量在整个音频管道中还是比较重要的。另外一个特性是DAC支持的格式，现在主流的hifi解码都支持高位深和DSD的音频了。&lt;/p>
&lt;h4 id="放大器amplifieramp">放大器（Amplifier，Amp）&lt;/h4>
&lt;p>用于音箱的一般称功放（功率放大器），用于耳机的一般称耳放。放大器的作用就是把解码出来的模拟信号放大到合适的音量。很多设备如手机，甚至一些DAC都把功放集成进去了。独立的放大器设备有两个好处，一个的更好的电磁隔离，更少的底噪，另一个是可以提供更大的功率储备，用来推特别难推的耳机（如低阻低灵敏度的耳机），在极端状态下可以减少失真。&lt;/p>
&lt;p>耳放还分两种：电子管耳放（胆机），晶体管耳放（石机）。我没听过胆机，但都说胆机声音温润，估计说到底就是胆机削低了高频。因此如果纯音质角度看，选一个低失真的耳放就可以了。&lt;/p>
&lt;p>功放有时分前级后级，据我查到的资料说，前级是low-pass filter，用来处理低频，然后后级整体放大？这里我也不懂了，搜到各种不一样的说法，我觉得我还是别管这玩意了。（&lt;a class="link" href="https://www.zhihu.com/question/30806888" target="_blank" rel="noopener"
>知乎参考在此&lt;/a>）&lt;/p>
&lt;h4 id="接口">接口&lt;/h4>
&lt;p>再讲一下不同音频设备之间的连接接口，数字的接口一般就是USB和S/PDIF了，模拟信号主要有TRS，TRRS，XLR等等，可以&lt;a class="link" href="http://sound.zol.com.cn/512/5124960_all.html" target="_blank" rel="noopener"
>参考这篇文章&lt;/a>。这些接口本身没什么差别，虽然说有人对这个很在意，甚至还有人对墙上插座的接口很讲究，但是我觉得这都是玄学= =（就是不科学）&lt;/p>
&lt;h4 id="回放设备">回放设备&lt;/h4>
&lt;p>就是音箱或者耳机，这玩意也是有各种产品。音箱分有源音箱和无源音箱，有源就是内置了放大器的。耳机则分入耳（In-ear, IEM），和头戴式耳机（On-ear/Over-ear）。具体这就不展开了。&lt;/p>
&lt;h3 id="耳机相关">耳机相关&lt;/h3>
&lt;h4 id="单元">单元&lt;/h4>
&lt;ul>
&lt;li>Balanced Armerture / BA / 动铁：平衡铁通过磁场变化，带动振膜运动。&lt;/li>
&lt;li>Dynamic Driver / DD / 动圈：磁场直接驱动线圈，带动振膜运动。&lt;/li>
&lt;li>Planar Magnetic / 平板：磁场直接驱动金属板运动。&lt;/li>
&lt;li>Piezoelectric Ceramic / 压电陶瓷单元：压电晶体带动振膜变形发声。&lt;/li>
&lt;li>Electrostatic / EST / 静电：电场带动振膜运动。
(可以参见&lt;a class="link" href="https://www.youtube.com/watch?v=BKhS7X8rs74" target="_blank" rel="noopener"
>Linus的视频&lt;/a>)&lt;/li>
&lt;/ul>
&lt;h4 id="线材">线材&lt;/h4>
&lt;p>首先要说明的是，音频线材对声音的影响微乎其微。线材影响声音的原理是不同线材有不同的阻抗、容抗和感抗曲线（主要是阻抗和容抗），因此可能会微微影响低阻耳机的频率响应。另外，说线材能提升音质的基本就是扯淡。参见&lt;a class="link" href="https://www.zhihu.com/question/274582289" target="_blank" rel="noopener"
>该知乎回答&lt;/a>。&lt;/p>
&lt;ul>
&lt;li>TPC: 电解铜&lt;/li>
&lt;li>OFC: 无氧铜&lt;/li>
&lt;li>OCC: 单结晶无氧铜&lt;/li>
&lt;li>5N/6N/7N：（铜）纯度，几个N就有几个9。&lt;/li>
&lt;li>Litz/Litz2：绕线方式，参考&lt;a class="link" href="https://www.newenglandwire.com/product/litz-wire-types-and-constructions/" target="_blank" rel="noopener"
>Litz官网&lt;/a>。并不知道不同绕线方法对感抗有没有什么影响。。
现在的线材基本都是无氧铜。个人认为为了好看和功能换线可以，为了换口味换线可以，为了增加屏蔽层减少外部信号噪音可以，但是为了“提升音质”就纯粹是智商税了。另外上面提到的都是传递模拟信号的线材，对那种audio-grade的USB线我是打死都不信有什么区别的，数字信号对这么点阻抗的变化根本不可能有什么反应。&lt;/li>
&lt;/ul>
&lt;h4 id="耳塞耳垫">耳塞/耳垫&lt;/h4>
&lt;p>耳塞(Tip)和耳垫(Pad)可以影响声音在进入耳朵之前的回响，因此也是会改变声音的。耳垫的影响比较大，耳塞我觉得比较小。不过同样的，我认为不同的耳塞耳垫都是相当于给耳机加了EQ，因此不必追求高音质的耳垫。有一点例外，如果耳塞耳垫有漏音的话，会严重影响音质，这种情况下就需要更换了。&lt;/p>
&lt;hr>
&lt;p>这大概就是我对audiophile各种知识的笔记了。在了解这么多之后，我还是觉得，选一个小巧、功能多、性能还过得去的DAC和amp，然后选个音质够用的耳机就行了，不用再换了。音质这玩意到最后音质提升的性价比实在太低了，还是找更多好听的音乐来的实在。&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a class="link" href="https://crinacle.com/2020/04/08/graphs-101-how-to-read-headphone-measurements/" target="_blank" rel="noopener"
>Graphs 101: How to Read Headphone Measurements&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Minecraft 1.12建服及侦测器BUD</title><link>https://zyxin.xyz/blog/2020-12/MCBud112/</link><pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2020-12/MCBud112/</guid><description>&lt;p>进来给实验室的服务器上装了个Minecraft服务器，给大家闲来无事上来种种菜，顺便体验一下新版本的特性。之前最高只玩过1.8，现在虽然更新到1.16了，但是听说很多Mod都还是只支持到1.12，所以就搭了1.12的服务器。基岩版的MC（Win10自带的那个）虽然性能很好，但是由于不购买就没法玩，所以考虑到大家肯定最开始都不想买，以及那个开服好像很麻烦，就还是搭了Java的服务器。&lt;/p>
&lt;h2 id="一分钟上手minecraft开服">一分钟上手Minecraft开服&lt;/h2>
&lt;p>以前玩Minecraft的时候都觉得开服务器好麻烦，要知道各种各样的配置方法，因此很佩服服主管理这些东西。直到有一天我搜到了这个：&lt;a class="link" href="https://github.com/itzg/docker-minecraft-server" target="_blank" rel="noopener"
>docker-minecraft-server&lt;/a>，瞬间感觉一键开服不是梦了！这个repo把Minecraft的服务器版本以及Bukkit/Spigot服务器端Mod框架（可以理解成服务器上的Forge）都嵌进去了，简直不要太方便。数据也是从host的硬盘里mount进去的，因此如果你的服务器要转移或者备份也很方便。有了这个，开服只需要一行命令（假设你服务器上有docker）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">docker run -d -p 25565:25565 --name mc -e &lt;span class="nv">EULA&lt;/span>&lt;span class="o">=&lt;/span>TRUE itzg/minecraft-server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>由于可以设置的环境变量非常多，因此我后来把配置都写到了docker-compose文件里面，这样修改设置后启动服务器就更简单了～目前我的设置如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;3.8&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">minecraft&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">itzg/minecraft-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;25565:25565&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;/home/jacobz/Minecraft/docker-data:/data&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">MEMORY&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">4G&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">EULA&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;TRUE&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">VERSION&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1.12.2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ENABLE_AUTOPAUSE&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;TRUE&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># OVERRIDE_SERVER_PROPERTIES: &amp;#34;TRUE&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">MAX_TICK_TIME&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;-1&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ONLINE_MODE&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;FALSE&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">TZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">US/Eastern&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">DIFFICULTY&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">easy&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">TYPE&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">BUKKIT&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">OPS&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">cmpute&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">restart&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">always&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="侦测器单片bud">侦测器单片BUD&lt;/h2>
&lt;p>在服务器上玩了几天，最终还是想搭一个自动农场来解决温饱问题。再不去骗村民的情况下，最方便的食物我觉得就是南瓜饼了，它的原料（鸡蛋、糖、南瓜）都是非常好自动化的。因此我就想着顺便琢磨一下有侦测器之后自动农场有没有什么更方便的方法。甘蔗机在&lt;a class="link" href="https://zyxin.xyz/blog/2017-08/MCTowerSugarcane/" >我以前甘蔗机的博文&lt;/a>里面有写到，侦测器搭甘蔗机的效率不如传统的BUD，因此主要可以改动的就是在南瓜机上了。感觉应该不是很难，因此我本地琢磨了一会，弄出来两种利用侦测器的单片BUD：&lt;/p>
&lt;table>
&lt;tr>
&lt;th>上置型&lt;/th>
&lt;th>下置型&lt;/th>
&lt;tr>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 侧视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----活塞+沙子版本|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-$|sand|rr-$e1|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|obs-n|pi-n|ts-$|rd-$|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|O|pi-w|rd-$|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st|st|st|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----粘性活塞版本|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-$|st|rr-$e1|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|obs-n|sp-n|ts-$|rd-$|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|O|pi-w|rd-$|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st|st|st|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;pre>&lt;code>&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;
&lt;/code>&lt;/pre>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 侧视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----活塞+沙子版本|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| |rd-$ |pi-e|O |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-$|ts-$ | |obs-s|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st |rr-$w1|sand|rd-$ |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st |st |pi-n|st |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----粘性活塞版本|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| |rd-$ |pi-e|O |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-$|ts-$ | |obs-s|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st |rr-$w1|st |rd-$ |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st |st |sp-n|st |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;pre>&lt;code>&amp;lt;/td&amp;gt;&amp;lt;tr&amp;gt;
&lt;/code>&lt;/pre>
&lt;/table>
&lt;p>上图中O代表检测更新的地方，可以看见上置型的结构比下置的要稍微精简一点点，并且由于南瓜只能生成在泥土上，因此我最后使用了上置型的方法搭了自动南瓜机。对比&lt;a class="link" href="https://zyxin.xyz/blog/2017-08/MCTowerPumpkin/" >我之前传统BUD的南瓜机方案&lt;/a>，只需要把这个结构横着堆叠一下就行，在南瓜机上面有了侦测器确实可以大大减小粘性活塞的使用。不过由于这个结构比之前的方案宽度多了一格，因此没一层可能只能容纳两排南瓜了，因此如果要更密集的堆叠可能需要考虑改进这个结构。&lt;/p></description></item><item><title>终端的特殊控制符</title><link>https://zyxin.xyz/blog/2020-05/TerminalControlCharacters/</link><pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2020-05/TerminalControlCharacters/</guid><description>&lt;p>之前碰到过很多终端工具可以显示非常好看的进度条，或者显示丰富的颜色，甚至还有的直接可以在终端通过字符绘制UI（a.k.a. &lt;a class="link" href="https://en.wikipedia.org/wiki/Text-based_user_interface" target="_blank" rel="noopener"
>TUI&lt;/a>），我一直都很好奇是怎么做到的。之后又知道了curses这个Python库和它的一些高层封装（例如asciimatics），然后最终在Stack Overflow里面查到了这些都是通过特殊的终端控制符来实现的。本文就介绍这些终端控制符的使用方法，他们很适合用来写一个简单无依赖的TUI。如果需要更复杂和全面的TUI功能，还是最好使用封装好的库。&lt;/p>
&lt;h2 id="ascii-控制符">ASCII 控制符&lt;/h2>
&lt;p>在最开始接触编程的时候，如果你学的是C，那你一定很熟悉&lt;code>\n&lt;/code>，这就是一个”换行“的转义字符，代表终端光标令起一行。有时你还会碰到&lt;code>\r&lt;/code>，这是”回车“。“回车”这个名字来源于打字机时代，在使用打字机的时候，如果你需要新起一行，那么需要的操作是：转动滚筒把纸往外抽一行，再把字车（相当与打印机的打印头）移到最左端。这两个操作的名字分别是“换行”和“回车”。因此严格来说另起一行的字符串应该是&lt;code>\r\n&lt;/code>，这也是Windows的标准，而在Unix中则简化成&lt;code>\n&lt;/code>会自动执行回车。&lt;/p>
&lt;p>换行和回车是两个非常常用的控制字符，也是定义在了ASCII表中的控制字符。在ASCII表中还定义了其他的控制字符，列在下面了。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>ASCII名字&lt;/th>
&lt;th>ASCII码&lt;/th>
&lt;th>printf风格转义&lt;/th>
&lt;th>用途&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>BEL 铃声&lt;/td>
&lt;td>0x07&lt;/td>
&lt;td>&lt;code>\a&lt;/code>&lt;/td>
&lt;td>哔一下（执不执行取决于终端）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>BS 退格&lt;/td>
&lt;td>0x08&lt;/td>
&lt;td>&lt;code>\b&lt;/code>&lt;/td>
&lt;td>*光标回退一格&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ESC 退出&lt;/td>
&lt;td>0x1B&lt;/td>
&lt;td>&lt;code>\e&lt;/code>&lt;/td>
&lt;td>可代表按下ESC键，不是C标准&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>FF 换页&lt;/td>
&lt;td>0x0C&lt;/td>
&lt;td>&lt;code>\f&lt;/code>&lt;/td>
&lt;td>光标移到新一页&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>LF 换行&lt;/td>
&lt;td>0x0A&lt;/td>
&lt;td>&lt;code>\n&lt;/code>&lt;/td>
&lt;td>光标下移一行&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CR 回车&lt;/td>
&lt;td>0x0D&lt;/td>
&lt;td>&lt;code>\r&lt;/code>&lt;/td>
&lt;td>光标回到行首&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>HT 水平制表&lt;/td>
&lt;td>0x09&lt;/td>
&lt;td>&lt;code>\t&lt;/code>&lt;/td>
&lt;td>标记水平制表位（Tab键）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>VT 垂直制表&lt;/td>
&lt;td>0x0B&lt;/td>
&lt;td>&lt;code>\v&lt;/code>&lt;/td>
&lt;td>标记垂直制表位&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>NUL 空值&lt;/td>
&lt;td>0x00&lt;/td>
&lt;td>&lt;code>\0&lt;/code>&lt;/td>
&lt;td>代表啥也没有，C里面终结字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>**&lt;code>\c&lt;/code>&lt;/td>
&lt;td>终止输出，基本不被支持了&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>*光标这里泛指各类终端的指示当前文本位置的东西，在打字机上叫“type guide”，在显示屏上里面叫“光标 cursor”，而在有些场合也叫指针。
**这个用法貌似只在一些终端中有，我也不确定它是否有对应一个字符。在&lt;a class="link" href="http://www.gnu.org/software/coreutils/manual/html_node/printf-invocation.html" target="_blank" rel="noopener"
>GNU的文档&lt;/a>里有简短解释。&lt;/p>
&lt;h2 id="ansivt100-控制符串">ANSI/VT100 控制符（串）&lt;/h2>
&lt;p>很多终端都支持彩色文字的输出，而彩色文字的表达方式通常都参考ANSI的色彩标准。而ANSI用来实现色彩显示的转义表还定义了指针控制和设备管理的功能。&lt;/p>
&lt;p>这一类控制符实际上是个字符串，所以应该叫控制串？他们都由&lt;code>&amp;lt;ESC&amp;gt;&lt;/code>字符开头，也就是&lt;code>0x1B&lt;/code>。所以我推测实际上&lt;code>ESC&lt;/code>的双关（退出/转义）也被用到了这里哈哈。以下内容大部分来自 ANSI/VT100 Terminal Control Escape Sequences 表格，详细解释可以参考这个表格以及维基的页面。链接都放在引用部分。&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>0x1B&lt;/code>在一些终端中会用&lt;code>^[&lt;/code>代表，因此如果你看到了&lt;code>^[[&lt;/code>那通常也都是通过这种方法转义的字符序列。&lt;/p>
&lt;/blockquote>
&lt;p>我把这个表中能用于bash的字符都拎出来放在下面了。以下表中的转义序列名称都是我自己翻译的，我不知道有没有统一的中文翻译hhh。&lt;/p>
&lt;h3 id="终端设备相关">终端设备相关&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>名称&lt;/th>
&lt;th>转义字符串&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>查询设备码&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[c&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>报告设备码&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[{code}0c&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>查询光标位置&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[6n&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>报告光标位置&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[{ROW};{COLUMN}R&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>重置设备&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;c&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>可以在你的终端里输入&lt;code>printf &amp;quot;\x1b[c&amp;quot;&lt;/code>，看看会输出什么&lt;/p>
&lt;/blockquote>
&lt;h3 id="光标控制">光标控制&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>名称&lt;/th>
&lt;th>转义字符串&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>设置指针位置&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[{ROW};{COLUMN}H&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>指针上移&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[{COUNT}A&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>指针下移&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[{COUNT}B&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>指针前移（右移）&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[{COUNT}C&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>指针后移（左移）&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[{COUNT}D&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>保存指针位置&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[s&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>复原指针位置（到保存位置）&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[u&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>保存指针位置和属性&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;7&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>复原指针位置和属性&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;8&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="滚动">滚动&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>名称&lt;/th>
&lt;th>转义字符串&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>启用滚动&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[r&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>启用指定行之间滚动&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[{START};{END}r&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>向下滚动一行&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;D&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>向上滚动一行&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;M&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="制表">制表&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>名称&lt;/th>
&lt;th>转义字符串&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>设置对齐位&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;H&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>清楚对齐位&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[g&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>清楚所有对齐位&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[3g&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="清除">清除&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>名称&lt;/th>
&lt;th>转义字符串&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>清除文字到行末&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[K&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>清除文字到行首&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[1K&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>清除整行&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[2K&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>清除文字到屏幕底&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[J&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>清除文字到屏幕顶&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[1J&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>清屏&lt;/td>
&lt;td>&lt;code>&amp;lt;ESC&amp;gt;[2J&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="定义">定义&lt;/h3>
&lt;ul>
&lt;li>设置文字绑定: &lt;code>&amp;lt;ESC&amp;gt;[{key};&amp;quot;{string}&amp;quot;p&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="显示颜色属性">显示颜色属性&lt;/h3>
&lt;ul>
&lt;li>设置光标属性: &lt;code>&amp;lt;ESC&amp;gt;[{attr1};...;{attrn}m&lt;/code>&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>属性代码&lt;/th>
&lt;th>属性效果&lt;/th>
&lt;th>属性代码&lt;/th>
&lt;th>属性效果&lt;/th>
&lt;th>属性代码&lt;/th>
&lt;th>属性效果&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0&lt;/td>
&lt;td>重置&lt;/td>
&lt;td>30&lt;/td>
&lt;td>前景黑&lt;/td>
&lt;td>40&lt;/td>
&lt;td>背景黑&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>亮&lt;/td>
&lt;td>31&lt;/td>
&lt;td>前景红&lt;/td>
&lt;td>41&lt;/td>
&lt;td>背景红&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>暗&lt;/td>
&lt;td>32&lt;/td>
&lt;td>前景绿&lt;/td>
&lt;td>42&lt;/td>
&lt;td>背景绿&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>下划线&lt;/td>
&lt;td>33&lt;/td>
&lt;td>前景黄&lt;/td>
&lt;td>43&lt;/td>
&lt;td>背景黄&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5&lt;/td>
&lt;td>闪烁&lt;/td>
&lt;td>34&lt;/td>
&lt;td>前景蓝&lt;/td>
&lt;td>44&lt;/td>
&lt;td>背景蓝&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>7&lt;/td>
&lt;td>反向&lt;/td>
&lt;td>35&lt;/td>
&lt;td>前景紫&lt;/td>
&lt;td>45&lt;/td>
&lt;td>背景紫&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>8&lt;/td>
&lt;td>隐藏&lt;/td>
&lt;td>36&lt;/td>
&lt;td>前景青&lt;/td>
&lt;td>46&lt;/td>
&lt;td>背景青&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>37&lt;/td>
&lt;td>前景白&lt;/td>
&lt;td>47&lt;/td>
&lt;td>背景白&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;p>ASCII转义符&lt;/p>
&lt;ul>
&lt;li>Wiki &lt;a class="link" href="https://en.wikipedia.org/wiki/Escape_sequences_in_C" target="_blank" rel="noopener"
>Escape sequences in C&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.bing.com/search?q=ascii&amp;#43;table" target="_blank" rel="noopener"
>Bing ASCII table&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://linux.die.net/man/1/printf" target="_blank" rel="noopener"
>&lt;code>printf&lt;/code> Linux man page&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ANSI转移符&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="http://www.termsys.demon.co.uk/vtansi.htm" target="_blank" rel="noopener"
>&lt;code>ANSI/VT100 Terminal Control Escape Sequences&lt;/code>&lt;/a>&lt;/li>
&lt;li>Wiki &lt;a class="link" href="https://en.wikipedia.org/wiki/ANSI_escape_code" target="_blank" rel="noopener"
>&lt;code>ANSI escape code&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;!-- http://ascii-table.com/ansi-escape-sequences-vt-100.php
http://www.termsys.demon.co.uk/vtansi.htm --></description></item><item><title>进程、线程与协程 (C# vs Python)</title><link>https://zyxin.xyz/blog/2019-11/ParallelismInPythonAndCsharp/</link><pubDate>Thu, 07 Nov 2019 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2019-11/ParallelismInPythonAndCsharp/</guid><description>&lt;p>近来由于项目需要，接触了一下一直没去了解过的Python异步语法，发现和之前我熟悉的C#有很多不同。在深入Python的异步逻辑之后，由于Python在语法上保留了很多语言机制的细节（比如成员函数的&lt;code>self&lt;/code>参数），我反而对C#的异步有了更深的了解。这里就来重新梳理一下各种并行方法的区别，以及他们在C#和Python上实现的区别。（这里只讨论单机的并行机制。）&lt;/p>
&lt;p>总的来说，并行机制主要有进程(Process)、线程(Thread)和协程(Coroutine)，其并行实现的开销依次递减，但是他们对每个任务的鲁棒性也是依次递减的。进程是操作系统资源分配的最小单元，线程则是能够被CPU并行处理的最小单元，而协程则是目前实现“并行”的最简单方法。一个进程中可以有多个线程，而一个线程中可以有多个协程。他们具体在特性上有以下区别&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>进程&lt;/th>
&lt;th>线程&lt;/th>
&lt;th>协程&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>独立内存堆&lt;/td>
&lt;td>√&lt;/td>
&lt;td>×&lt;/td>
&lt;td>×&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>独立处理器（可硬件并行）&lt;/td>
&lt;td>√&lt;/td>
&lt;td>√&lt;/td>
&lt;td>×&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>独立上下文&lt;/td>
&lt;td>√&lt;/td>
&lt;td>√&lt;/td>
&lt;td>×&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>独立栈、寄存器状态&lt;/td>
&lt;td>√&lt;/td>
&lt;td>√&lt;/td>
&lt;td>√&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="进程">进程&lt;/h2>
&lt;p>进程是系统层面实现并行的机制了，进程管理是现代操作系统的一大核心之一。进程之间互不影响，操作系统会保证一个程序崩溃了，其他程序以及系统内核不会崩溃。操作系统还会提供其他的进程管理功能，例如&lt;a class="link" href="https://en.wikipedia.org/wiki/Scheduling_%28computing%29" target="_blank" rel="noopener"
>进程调度&lt;/a>、设置进程优先级等等。不同语言底层对进程接口的实现实际上都是对系统接口的封装。&lt;/p>
&lt;h3 id="一些概念">一些概念&lt;/h3>
&lt;p>与进程相关的概念通常都是操作系统课程的必修知识哈哈：&lt;/p>
&lt;ul>
&lt;li>进程间通信(Inter-process communiation, IPC)：故名思意。常用手段有管道、共享内存、信号量(Semaphore)、消息队列等。&lt;/li>
&lt;li>管道(Pipe)：管道大概是进程间通信的最常用方式？分命名管道和匿名管道, 进程双方均可往其中读写数据。&lt;/li>
&lt;li>远程过程调用(Remote procedure call): 远程过程调用通过特定的消息序列化手段，可以实现进程间通信，其使用形式是把一个“远程”的函数在本地进行执行。&lt;/li>
&lt;li>进程锁：如果为了避免多个进程访问同一个资源的冲突的话，就会用到进程锁，其实现方法有&lt;a class="link" href="https://blog.csdn.net/luansxx/article/details/7736618" target="_blank" rel="noopener"
>管道、信号量&lt;/a>、以及文件锁等。&lt;/li>
&lt;li>文件锁：文件锁是实现进程互斥的一种常用手段，只需要建立空文件句柄并锁上就可了~并且文件锁还能做到权限控制，非常方便~&lt;/li>
&lt;/ul>
&lt;h3 id="c35">C#&lt;/h3>
&lt;p>C#中对进程控制的模块主要通过&lt;a class="link" href="https://docs.microsoft.com/dotnet/api/system.diagnostics.process" target="_blank" rel="noopener"
>&lt;code>System.Diagnostics.Process&lt;/code>&lt;/a>实现，可以实现建立进程、管理进程等，还可以指定具体的内存映射参数，如虚拟内存的页大小。而对管道的支持则是在&lt;code>Process&lt;/code>类中有一部分，以及在&lt;a class="link" href="https://docs.microsoft.com/en-us/dotnet/api/system.io.pipes" target="_blank" rel="noopener"
>&lt;code>System.IO.Pipe&lt;/code>&lt;/a>里面有更全面的接口。我觉得这样的命名空间分类是挺合理的，&lt;code>Process&lt;/code>类的API其实只能用来进行程序调用和系统诊断，而&lt;code>Pipe&lt;/code>则由于它和&lt;code>Stream&lt;/code>的概念比较符合，因此归在IO空间下是合适的。&lt;/p>
&lt;h3 id="python">Python&lt;/h3>
&lt;p>Python中对进程的控制以及通信方法的实现都在&lt;code>multiprocess&lt;/code>包里，它的一些具体使用方法可以参考&lt;a class="link" href="https://zyxin.xyz/blog/2017-12/PythonCall/" >另一篇之前的博文&lt;/a>。值得一提的是，Python中还针对Unix系统提供了&lt;code>fcntl&lt;/code>, &lt;code>posix&lt;/code>等库专门用来调用系统底层API，这些API有部分是和进程有关的。相关内容还是查阅对应的资料会比较清楚~&lt;/p>
&lt;h2 id="线程">线程&lt;/h2>
&lt;p>线程是进程中细化的并行机制，线程的实现也需要用到操作系统的接口，不过线程的创建的管理基本都是在进程内部完成的。由于线程之间不独立内存空间，因此在C++这种能够随意操作内存的语言中，一个线程崩了，这个进程也大概率就崩了。但是在C#和Python中，由于有比较完善的Exception机制，并且没有什么机会直接操作内存，一般线程崩了主进程还是能接着跑的。多线程想必应该是大家用的最多的并行方法了~&lt;/p>
&lt;h3 id="一些概念-1">一些概念&lt;/h3>
&lt;p>在线程里面又有一些新的概念&lt;/p>
&lt;ul>
&lt;li>线程池(Thread pool)：线程池与内存池相似，都是为了避免频繁新建和销毁线程(or 内存)而造成额外的开销&lt;/li>
&lt;li>线程锁：线程锁与进程锁相似，是为了避免线程间访问同样的资源而产生冲突（例如&lt;a class="link" href="https://stackoverflow.com/questions/34510/what-is-a-race-condition" target="_blank" rel="noopener"
>race condition&lt;/a>）。线程间产生访问冲突非常常见，因此程序员掌握线程锁的使用是非常必要的。线程锁在C++中的&lt;code>&amp;lt;mutex&amp;gt;&lt;/code>有非常全面的实现。这里面锁的类型具有代表性，分为条件锁、自旋锁等等，具体区别可以参考&lt;a class="link" href="https://blog.csdn.net/bian_qing_quan11/article/details/73734157" target="_blank" rel="noopener"
>这篇博客&lt;/a>。C++的多线程非常令人头大&amp;hellip;这里就不展开了。&lt;/li>
&lt;li>事件(Event)：在多线程体系中，事件是一种常用于线程同步的机制，如果线程需要在运行过程中等待其他线程的运行，就可以使用事件机制。&lt;/li>
&lt;/ul>
&lt;h3 id="c35-1">C#&lt;/h3>
&lt;p>C#中与线程相关的模块在&lt;a class="link" href="https://docs.microsoft.com/dotnet/api/system.threading" target="_blank" rel="noopener"
>&lt;code>System.Threading&lt;/code>&lt;/a>空间下。&lt;code>System.Threading.Thread&lt;/code>提供了线程实现的类，使用delegate即可创建线程对象。这个空间底下也提供了&lt;code>SpinLock&lt;/code>、&lt;code>Semaphore&lt;/code>、&lt;code>Mutex&lt;/code>等线程锁，以及&lt;code>AutoResetEvent&lt;/code>实现了事件机制。&lt;code>System.Threading.ThreadPool&lt;/code>则提供了线程池的实现。另外需要指出的是C#提供了&lt;code>lock&lt;/code>关键字，只需对冲突的对象使用&lt;code>lock&lt;/code>锁上，那么在其对应的上下文中就能够避免冲突。&lt;/p>
&lt;h3 id="python-1">Python&lt;/h3>
&lt;p>Python中与线程相关的对象在&lt;a class="link" href="https://docs.python.org/library/threading.html" target="_blank" rel="noopener"
>&lt;code>threading&lt;/code>&lt;/a>模块中，其中&lt;code>Thread&lt;/code>类提供了线程实现，&lt;code>Lock&lt;/code>, &lt;code>Semaphore&lt;/code>提供了线程锁，&lt;code>Event&lt;/code>实现了事件机制。Python中可以使用&lt;code>with lock:&lt;/code>这样的块实现与C#&lt;code>lock&lt;/code>相似的语法，但是这个地方的lock仍然需要自己声明，不如C#和Java中的&lt;code>lock&lt;/code>用着方便。&lt;/p>
&lt;p>总体而言C#和Python对多线程机制的支持都比较全面，然而CPython有一个臭名昭著的&lt;a class="link" href="http://cenalulu.github.io/python/gil-in-python/" target="_blank" rel="noopener"
>全局锁GIL&lt;/a>，使得其多线程效率大幅下降。因此在很多Python库中，大家宁愿使用&lt;code>multiprocess&lt;/code>多进程来进行并行（即便需要处理进程间通信的问题），也不愿使用&lt;code>threading&lt;/code>来完成并行任务。这一点上不得不说Python辣鸡！&lt;/p>
&lt;h2 id="协程">协程&lt;/h2>
&lt;p>协程应该是21世纪才用的比较多的技术了，并且这个概念应该是在Go里面提的最多。在前文我提到协程是并行时打了引号，这是因为协程本质上还是同一个时刻只能干一件事，没法利用硬件并行，因此我们形容协程都是用“异步”(Asychronized)而不是“并行”(Parallel)。异步是与同步相对的，只要程序能一会干点这个，一会干点那个，不按顺序来，那就可以称作异步了。协程的广泛应用是由于近些年大型服务器的负载越来越大，并发需求越来越高（&lt;del>同时剁手的人越来越多&lt;/del>），多任务切换的开销越来越不可忽视，因此协程这个开销最小的方法就被广泛应用了。协程实际上不是一个比线程更小的概念，而是另一类概念（并行/串行 vs 异步/同步)。协程的特点是一个任务能够跑到一半就暂停，然后把状态存起来，等到需要的东西备齐了以后再把状态复原接着跑；至于暂停之前和之后是不是在同一个线程上跑、有没有跟别的任务一块跑并不重要。因此实际上协程是回调(Callback)机制的一个封装升级。&lt;/p>
&lt;p>实际上不依赖于系统线程的并行技术不止协程一种：
&lt;blockquote>
&lt;p>&lt;p>A &lt;a class="link" href="http://en.wikipedia.org/wiki/Fiber_%28computer_science%29" target="_blank" rel="noopener"
>Fiber&lt;/a> is a lightweight thread that uses cooperative multitasking instead of preemptive multitasking. A running fiber must explicitly &amp;ldquo;yield&amp;rdquo; to allow another fiber to run, which makes their implementation much easier than kernel or user threads.&lt;/p>
&lt;p>A &lt;a class="link" href="http://en.wikipedia.org/wiki/Coroutine" target="_blank" rel="noopener"
>Coroutine&lt;/a> is a component that generalizes a subroutine to allow multiple entry points for suspending and resuming execution at certain locations. Unlike subroutines, coroutines can exit by calling other coroutines, which may later return to the point where they were invoked in the original coroutine.&lt;/p>
&lt;p>A &lt;a class="link" href="http://en.wikipedia.org/wiki/Green_threads" target="_blank" rel="noopener"
>Green Thread&lt;/a> is a thread that is scheduled by a virtual machine (VM) instead of natively by the underlying operating system. Green threads emulate multithreaded environments without relying on any native OS capabilities, and they are managed in user space instead of kernel space, enabling them to work in environments that do not have native thread support.&lt;/p>
&lt;/p>&lt;span class="cite">&lt;span>― &lt;/span>&lt;span>Robert Harvey, &lt;/span>&lt;a href="https://softwareengineering.stackexchange.com/a/254141">&lt;cite>@StackExchange&lt;/cite>&lt;/a>&lt;/span>&lt;/blockquote>&lt;/p>
&lt;h3 id="一些概念-2">一些概念&lt;/h3>
&lt;ul>
&lt;li>事件循环(Event loop)：事件循环是一种非常简单的实现异步的机制，简而言之就是维护一个队列，然后把队列里的任务挨个执行，而任务随时随地可以被添加进队列。&lt;/li>
&lt;li>异步执行/等待(async/await)：这两个关键词在多个语言中都有出现。async用来修饰函数，说明这个函数可以异步执行；await用来等待异步函数的结束，如果没有结束就把当前任务搁着。&lt;/li>
&lt;/ul>
&lt;h3 id="c35-2">C#&lt;/h3>
&lt;p>C#中没有协程的概念，C#在5.0版本中引入的&lt;code>async&lt;/code>/&lt;code>await&lt;/code>关键字提供了异步执行的接口。据我所知C#应该是最早一批引入这个概念的语言了，并且C#里面async和await的使用非常顺滑~。C#的async/await调度与Go一样，都是通过线程池实现，因此性能也非常不错。C#中与async/await有关的接口在&lt;a class="link" href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks%60" target="_blank" rel="noopener"
>&lt;code>System.Threading.Tasks&lt;/code>&lt;/a>下，里面的&lt;code>Task&lt;/code>类型是对能够await的对象的封装。&lt;/p>
&lt;p>C#中也有用到Event loop来实现异步的地方，一般是在UI相关的函数中，例如整个C#里面的&lt;code>event&lt;/code>机制都是通过事件循环来实现的。使用事件循环来完成与UI相关的异步应该是非常标准的做法了，例如Qt里面也有&lt;code>QEventLoop&lt;/code>来实现UI的异步回调。与Event loop相关的是Dispatcher机制，Dispatcher可以将指定任务加进事件循环中执行，例如在WPF中可以用Window的Dispatcher在其他线程中将任务加进UI主线程。&lt;/p>
&lt;p>另外需要指出的是C#还可以通过&lt;code>yield&lt;/code>关键词实现异步，&lt;code>yield return&lt;/code>可能是C#最早的异步机制了，不过功能有限，只能与&lt;code>IEnumerable&lt;/code>合作使用。C#中有一些协程的库（如Unity里的）就是使用&lt;code>yield&lt;/code>机制来实现的。具体怎么使用&lt;code>yield&lt;/code>还请去学习C#的语法~&lt;/p>
&lt;h3 id="python-2">Python&lt;/h3>
&lt;p>Python对异步的支持就来的比较晚了，直到&lt;a class="link" href="https://www.python.org/dev/peps/pep-0492/" target="_blank" rel="noopener"
>PEP 492&lt;/a>才正式加入了对&lt;code>async&lt;/code>关键字的支持，放在了&lt;code>asyncio&lt;/code>模块中。Python对这对关键词的实现又很辣鸡了，&lt;a class="link" href="https://robertoprevato.github.io/Comparisons-of-async-await/" target="_blank" rel="noopener"
>采用的是Event loop机制来实现&lt;/a>（可能是因为多线程性能太差了吧= =）。最让人蛋疼是为了执行异步函数你还需要自己开event loop，如果你之前开过一个了，那你还需要把之前那个loop找回来，然后dispatch进去，这是何其难受！。。&lt;/p>
&lt;p>Python中只要对象有&lt;code>__await__&lt;/code>、&lt;code>__aiter__&lt;/code>或者&lt;code>__aenter__&lt;/code>就可以分别支持&lt;code>await&lt;/code>、&lt;code>async for&lt;/code>和&lt;code>async with&lt;/code>的代码块。Python还设计了三个相关概念：Coroutine代表异步对象、Task代表异步执行计划、Future代表异步执行结果。。何必呢？？？像C#用一个Task代表全部不行吗？再配合event loop的接口，就产生了&lt;code>create_task&lt;/code>、&lt;code>run_coroutine_threadsafe&lt;/code>、&lt;code>run_until_complete&lt;/code>、&lt;code>run_in_executor&lt;/code>等我总是搞不清区别的函数。。。我爱C#！&lt;/p>
&lt;hr>
&lt;p>以上是我对C#和Python中异步机制的总结，我对各语言底层的了解并不深，如有错漏还请指点~&lt;/p></description></item><item><title>Cython中的特殊函数</title><link>https://zyxin.xyz/blog/2019-08/CythonFunctions/</link><pubDate>Wed, 28 Aug 2019 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2019-08/CythonFunctions/</guid><description>&lt;p>这次来介绍一下Cython中的特殊函数定义，Cython相比Python本身的特殊函数之外还增加了一些新的函数，用来满足对C特性的支持，其中有些内容还经常令人混淆。关于Python中特殊变量和特殊函数名的内容，&lt;a class="link" href="https://docs.python.org/3/reference/datamodel.html" target="_blank" rel="noopener"
>请参考Python官方文档&lt;/a>。&lt;/p>
&lt;h2 id="def-cdef和cpdef">&lt;code>def&lt;/code>, &lt;code>cdef&lt;/code>和&lt;code>cpdef&lt;/code>&lt;/h2>
&lt;p>首先最开始需要分清的便是Cython中的三种函数类型。&lt;code>def&lt;/code>定义的对象（包括变量、函数、类型）都是普通的Python对象，是Python可以直接调用的，因此其参数都只能是Python类型或对象；&lt;code>cdef&lt;/code>定义的对象则是C/C++层面的，可以直接用C/C++对象作为参数，因此不能被普通Python代码调用，这样减少了很多overhead因此可以提高运行效率。另外尽管&lt;code>cdef&lt;/code>的函数不是Python对象，无法当作变量使用，但还是可以获取函数指针的。而&lt;code>cpdef&lt;/code>则是同时兼具两方面特性，其本质是用&lt;code>cdef&lt;/code>定义函数后再用&lt;code>def&lt;/code>定义一个函数封装，使得在Cython中调用时可以调用高效的&lt;code>cdef&lt;/code>版本，而在Python中调用的是与Python兼容的&lt;code>def&lt;/code>版本。&lt;/p>
&lt;h2 id="__init__和__cinit__">&lt;code>__init__&lt;/code>和&lt;code>__cinit__&lt;/code>&lt;/h2>
&lt;p>在理清了上面几个关键字后另一个经常令人疑惑的点便是&lt;code>__init__&lt;/code>和&lt;code>__cinit__&lt;/code>的区别。&lt;code>__cinit__&lt;/code>和&lt;code>__dealloc__&lt;/code>都是Cython特有的特殊函数。&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/userguide/special_methods.html#initialisation-methods-cinit-and-init" target="_blank" rel="noopener"
>官方文档在其用法上解释&lt;/a>的并不清楚，只是说&lt;code>__cinit__&lt;/code>可以用来进行C/C++级别的初始化。实际上，使用&lt;code>__cinit__&lt;/code>的重要原因是源于其特性：&lt;code>__cinit__&lt;/code>会像C++一样自动执行基类的&lt;code>__cinit__&lt;/code>，因此它保证会在构造时被执行一次（且只被执行一次）。由于Python中的&lt;code>__init__&lt;/code>函数默认不会调用基类的&lt;code>__init__&lt;/code>，因此如果想保证类型中的&lt;code>cdef&lt;/code>成员被初始化，避免可能的堆栈问题（如指针没有初始化），那么就可以选择使用&lt;code>__cinit__&lt;/code>。如果理解了这一点就可以知道，什么时候需要使用&lt;code>__cinit__&lt;/code>了。&lt;/p>
&lt;p>但是使用&lt;code>__cinit__&lt;/code>的时候有很多限制需要了解：&lt;/p>
&lt;ol>
&lt;li>&lt;code>__cinit__&lt;/code>有时会带来额外的开销，&lt;a class="link" href="https://kaushikghose.wordpress.com/2015/03/08/cython-__cinit__/" target="_blank" rel="noopener"
>这篇博客中有一些分析&lt;/a>。&lt;/li>
&lt;li>&lt;code>__cinit__&lt;/code>的参数声明和&lt;code>__init__&lt;/code>必须一致，因为会同时被调用。因此通常&lt;code>__cinit__&lt;/code>的参数中会留下&lt;code>*kargs&lt;/code>和&lt;code>**kvargs&lt;/code>。&lt;a class="link" href="https://stackoverflow.com/a/33091422" target="_blank" rel="noopener"
>Stackoverflow上也有人问过这个情况&lt;/a>。&lt;/li>
&lt;li>&lt;code>__cinit__&lt;/code>中如果要用&lt;code>malloc&lt;/code>分配内存，记得在&lt;code>__dealloc__&lt;/code>中销毁。&lt;code>__dealloc__&lt;/code>相当于C++版本的&lt;code>__del__&lt;/code>&lt;/li>
&lt;li>&lt;code>__cinit__&lt;/code>和&lt;code>__init__&lt;/code>一样也只能使用&lt;code>def&lt;/code>声明，不能用&lt;code>__cdef__&lt;/code>和&lt;code>__cpdef__&lt;/code>。具体原因我并不清楚。&lt;/li>
&lt;/ol>
&lt;h2 id="运算符重载">运算符重载&lt;/h2>
&lt;p>其他大多数的特殊函数定义和用法几乎和Python相同，但是需要特别指出的是运算符重载的部分。以加法为例，在Python中加法&lt;code>a + b&lt;/code>的实现方式是：&lt;/p>
&lt;ol>
&lt;li>如果&lt;code>a&lt;/code>中定义了&lt;code>__add__&lt;/code>，那么调用&lt;code>a.__add__(b)&lt;/code>&lt;/li>
&lt;li>如果&lt;code>a&lt;/code>中没有定义，而&lt;code>b&lt;/code>中定义了&lt;code>__radd__&lt;/code>，那么调用&lt;code>b.__radd(a)&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>而在Python的C扩展类里（包含Cython和pybind11的实现），其实现方式是寻找接受&lt;code>a&lt;/code>和&lt;code>b&lt;/code>类型的&lt;code>__add__&lt;/code>重载，也就是说本质上在C扩展类中定义的&lt;code>__add__&lt;/code>都是&lt;code>__add__&lt;/code>的重载，这也是与C++的&lt;code>operator&lt;/code>重载理念一致，只不过这个&lt;code>__add__&lt;/code>仍然需要定义在类里。在&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/userguide/special_methods.html#arithmetic-operators" target="_blank" rel="noopener"
>Cython文档中给出的运算符列表&lt;/a>里，参数里带&lt;code>self&lt;/code>的函数都是按照Python中的方法实现的，&lt;code>self&lt;/code>不能指定类型；而以&lt;code>x, y&lt;/code>这种形式为参数的则是按照C扩展类执行方式的函数，&lt;code>x&lt;/code>和&lt;code>y&lt;/code>都可以指定类型。&lt;/p>
&lt;p>另外Cython还定义了一个特殊的运算符函数&lt;code>__richcmp__&lt;/code>，这个是Python中没有的，不过其功能只是把比较符号（&amp;gt;,&amp;lt;,=）的实现合并了，与Python的&lt;code>__eq__&lt;/code>、&lt;code>__lt__&lt;/code>等函数没有本质区别。&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/userguide/special_methods.html#rich-comparison-operators" target="_blank" rel="noopener"
>这在官方文档中也有说明&lt;/a>&lt;/p>
&lt;h2 id="__getbuffer__">&lt;code>__getbuffer__&lt;/code>&lt;/h2>
&lt;p>&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/userguide/special_methods.html#buffer-interface-pep-3118-no-python-equivalents-see-note-1" target="_blank" rel="noopener"
>Cython中有两个版本的Buffer协议&lt;/a>，一种是提案PEP-3118定义的，另一种是Python官方定义之前Cython自己的定义方式。其中前者在&lt;a class="link" href="https://zyxin.xyz/blog/2019-08/CythonInterop/" >之前介绍Cython封装的文章&lt;/a>中已有介绍，就不多赘述。其相关的特殊函数是&lt;code>__getbuffer__&lt;/code>和&lt;code>__releasebuffer__&lt;/code>，这两个函数也都是Cython特有的。而后者比较难用，已经被标记为depricated废弃了，也不介绍了。&lt;/p>
&lt;h2 id="属性property">属性（property）&lt;/h2>
&lt;p>Cython中还提供了一套非常方便的属性定义方法。原本在Python中定义属性非常但疼，例如下面的代码定义了名为&lt;code>length&lt;/code>的属性，使得你可以通过&lt;code>square.length&lt;/code>的方法访问它&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Square&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@property&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">length&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_length&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@length.setter&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">length&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_length&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@length.deleter&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">length&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_length&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>而在Cython中定义属性就更简单了，它除了支持上面的方法外还有另一种更加直观的定义方式（虽然这个方式也已经被标记为depricated了）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Square&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">property&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__get__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_length&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__set__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_length&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__del__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_length&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;p>Cython的类型还有各种其他的奇奇怪怪的小特性，在Cython的这两篇文档里有详细介绍：&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/userguide/extension_types.html" target="_blank" rel="noopener"
>Extension Types&lt;/a>, &lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/userguide/special_methods.html#buffer-interface-pep-3118-no-python-equivalents-see-note-1" target="_blank" rel="noopener"
>Special Methods of Extension Types&lt;/a>，仅供参考～&lt;/p></description></item><item><title>在Cython中操作数组</title><link>https://zyxin.xyz/blog/2019-08/CythonArray/</link><pubDate>Wed, 28 Aug 2019 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2019-08/CythonArray/</guid><description>&lt;p>Cython提供了很多方法来搭建C/C++内存和Python对象间的桥梁，但是官方的教程只介绍了一些基础的方法。这篇文章就介绍一下我在各个场合学到和用到的Cython封装（多维）数组的技巧。一般而言这个桥梁会分为两部分，Python与Cython和Cython与C/C++。其中Python中的数组主要形式是&lt;code>list&lt;/code>、&lt;code>array.array&lt;/code>和&lt;code>numpy.ndarray&lt;/code>；Cython中的数组形式有&lt;code>[:,:,:]&lt;/code>（&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/userguide/memoryviews.html?highlight=pointer#view-cython-arrays" target="_blank" rel="noopener"
>Memoryview&lt;/a>/&lt;a class="link" href="https://www.python.org/dev/peps/pep-3118/" target="_blank" rel="noopener"
>Buffer&lt;/a>）和&lt;code>cython.view.array&lt;/code>；C/C++的数组形式有&lt;code>**&lt;/code>（指针）、&lt;code>vector&lt;/code>和&lt;code>Eigen::Vector/Matrix&lt;/code>。&lt;/p>
&lt;blockquote>
&lt;p>本篇介绍的主要内容也来自于Cython的文档：&lt;a class="link" href="http://cython.readthedocs.io/en/latest/src/userguide/memoryviews.html" target="_blank" rel="noopener"
>Typed Memoryviews&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;p>在这里也先介绍一下Cython中的这几个概念：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Memoryview&lt;/strong>：这是cython提供的一种语法糖，相当于提供了C中&lt;code>int[][][]&lt;/code>形式数组的类型。由于Memoryview可以兼容Python的Buffer协议，因此我把他们放在了一起。Memoryview需要指定元素的类型，这个类型必须是内置数值类型或者&lt;strong>C结构体&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>&lt;code>cython.view.array&lt;/code>&lt;/strong>：这是Cython提供的一个多维数组类型，与&lt;code>numpy.ndarray&lt;/code>非常相似了。
这两个东西也是可以相互转换的，例如&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">cython.view&lt;/span> &lt;span class="n">cimport&lt;/span> &lt;span class="n">array&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">cvarray&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Cython array to Memoryview&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cyarr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cvarray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">itemsize&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">format&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;i&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="nb">int&lt;/span> &lt;span class="p">[:,&lt;/span> &lt;span class="p">:,&lt;/span> &lt;span class="p">:]&lt;/span> &lt;span class="n">cyarr_view&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cyarr&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Memoryview to Cython array&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">cvarray&lt;/span> &lt;span class="n">back&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cyarr_view&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="python与cython数组相互转换">Python与Cython数组相互转换&lt;/h2>
&lt;p>Python与Cython之间的转换基本上都由Cython的Memoryview提供了接口，实际上直接赋值就可以。例如官方给出的这段例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">cpython&lt;/span> &lt;span class="n">cimport&lt;/span> &lt;span class="n">array&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">cparray&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">np&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Memoryview on a NumPy array&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">narr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">arange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">27&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dtype&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;i&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">reshape&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="nb">int&lt;/span> &lt;span class="p">[:,&lt;/span> &lt;span class="p">:,&lt;/span> &lt;span class="p">:]&lt;/span> &lt;span class="n">narr_view&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">narr&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Memoryview on a CPython array&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">parr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cparray&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;i&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="nb">int&lt;/span> &lt;span class="p">[:]&lt;/span> &lt;span class="n">parr_view&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parr&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>顺带一提，&lt;code>list&lt;/code>对象由于本身不代表一段连续内存，因此需要先转换为&lt;code>array&lt;/code>或&lt;code>ndarray&lt;/code>再赋值给Memoryview。反过来由于Numpy支持Buffer协议，因此Memoryview和Cython的&lt;code>cython.view.array&lt;/code>都可以直接转换为&lt;code>numpy.ndarray&lt;/code>，然后转换为&lt;code>array&lt;/code>和&lt;code>list&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">cpython&lt;/span> &lt;span class="n">cimport&lt;/span> &lt;span class="n">array&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">cparray&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">np&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">parr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cparray&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;i&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="nb">int&lt;/span> &lt;span class="p">[:]&lt;/span> &lt;span class="n">parr_view&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parr&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">narr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parr_view&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># explicit version: np.array(parr_view, copy=False)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>以上这些代码中的等式都没有发生内存拷贝。&lt;/p>
&lt;/blockquote>
&lt;h2 id="cython数组与cc数组相互转换">Cython数组与C/C++数组相互转换&lt;/h2>
&lt;p>Cython的Memoryview同样承担了大量与C/C++数组进行转换的功能，不过Memoryview只支持一种转换方法，就是与raw指针的相互转换：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">libc.stdlib&lt;/span> &lt;span class="n">cimport&lt;/span> &lt;span class="n">malloc&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">double&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">double&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">double&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Convert pointer to Memoryview&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">double&lt;/span>&lt;span class="p">[:]&lt;/span> &lt;span class="n">view&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">double&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,:&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">data&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Convert Memoryview to pointer&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">view&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>以上代码的等式中也没有发生内存拷贝。&lt;/p>
&lt;/blockquote>
&lt;p>这里需要指出的是，由于指针本身只是一段内存的代表，因此在转换时制定类型和长度（如&lt;code>&amp;lt;double[4]&amp;gt;&lt;/code>），并且需要保证指针指向的数组是C型连续的（多维数组中最后一维的内存是连续的）。如果要将&lt;code>vector&lt;/code>和&lt;code>Eigen::Matrix&lt;/code>转换为Memoryview，那么也同样需要获取其内存指针（&lt;code>vector::data&lt;/code>和&lt;code>Eigen::Matrix::data&lt;/code>）。另外，通过&lt;strong>指针转换出来的Memoryview没有引用计数&lt;/strong>，因此如果你的指针是某个Cython类的成员，那么不要使用指针转换，而使用Buffer协议的方式进行传递。&lt;/p>
&lt;h2 id="其他直接转换的方法">其他直接转换的方法&lt;/h2>
&lt;p>除了上面提到的方法之外还有一些直接转换的方法，但是这些方法往往不会做类型和尺寸检查，以及很重要的内存连续性检查（Memoryview会区分C型内存和Fortran型内存），因此使用时需要谨慎。&lt;/p>
&lt;ul>
&lt;li>&lt;code>cdef vector[int] data; cdef list view = data&lt;/code>：Cython提供了list和vector直接转换的接口&lt;/li>
&lt;li>&lt;code>cdef np.ndarray[double] data; cdef double* view = &amp;lt;double*&amp;gt; data.data&lt;/code>&lt;/li>
&lt;li>&lt;code>cdef np.ndarray[double, ndim=2] data; cdef double* view = &amp;amp;data[0,0]&lt;/code>&lt;/li>
&lt;li>&lt;code>cdef array.array data; cdef double* view = data.data.as_doubles[0]&lt;/code>：利用了&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/tutorial/array.html#zero-overhead-unsafe-access-to-raw-c-pointer" target="_blank" rel="noopener"
>Cython中的API&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="非内置类型的转换">非内置类型的转换&lt;/h2>
&lt;p>在实际应用过程中还会碰到由复杂元素构成的数组（例如PCL里面的PointXYZ、SLAM里会用到的Quaternion），这时就有将复杂类型（通常是自定义struct）在Python和C/C++之间转换的需求。这时可以选择利用Cython提供的MemoryView，也可以利用Python的Buffer协议直接将C++对象传递给Python。&lt;/p>
&lt;p>使用Buffer协议的方法请直接参考&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/userguide/buffer.html" target="_blank" rel="noopener"
>Cython文档&lt;/a>，使用Memoryview的例子如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">libc.stdlib&lt;/span> &lt;span class="n">cimport&lt;/span> &lt;span class="n">malloc&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">np&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">struct&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">int&lt;/span> &lt;span class="n">size&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">int&lt;/span> &lt;span class="n">count&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">[:]&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">buf&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buf&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># [(&amp;#39;size&amp;#39;, &amp;#39;&amp;lt;i4&amp;#39;), (&amp;#39;count&amp;#39;, &amp;#39;&amp;lt;i4&amp;#39;)]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Cython与C/C++的交互</title><link>https://zyxin.xyz/blog/2019-08/CythonInterop/</link><pubDate>Tue, 27 Aug 2019 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2019-08/CythonInterop/</guid><description>&lt;p>用Cython也用了很有一段时间了，这次就介绍一下它的最重要功能——使用Cython来封装C/C++代码。最基本的封装方法可以参见Cython文档中的相关页面：&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/userguide/external_C_code.html" target="_blank" rel="noopener"
>Interfacing with External C Code&lt;/a>和&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/userguide/wrapping_CPlusPlus.html" target="_blank" rel="noopener"
>Using C++ in Cython&lt;/a>，本文介绍主要是比较重要和常用的Cython/C++交互特性，而自定义Python拓展类（而不是封装现有C++）的一些操作可以&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/tutorial/cdef_classes.html" target="_blank" rel="noopener"
>参考官方教程&lt;/a>。&lt;/p>
&lt;p>封装C++代码时，最重要的关键词就是&lt;code>extern&lt;/code>，在定义函数时使用这个关键字就说明该声明是外部的，而使用&lt;code>cdef extern from&lt;/code>语句就能指定声明对应的头文件。例如如果要封装函数&lt;code>func&lt;/code>，对应的Cython语句是&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">extern&lt;/span> &lt;span class="kn">from&lt;/span> &lt;span class="s2">&amp;#34;func.c&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">void&lt;/span> &lt;span class="n">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span> &lt;span class="n">arg&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="文件结构">文件结构&lt;/h2>
&lt;p>首先讲一下Cython的文件结构。如果你之有一个小模块需要封装的话你可以把所有代码写到同一个&lt;code>pyx&lt;/code>里进行编译，否则的话你就可以利用Cython的目录结构来管理多个层次的代码。Cython的文件一共有三种：&lt;code>pyx&lt;/code>，&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/userguide/language_basics.html#the-include-statement-and-include-files" target="_blank" rel="noopener"
>&lt;code>pxi&lt;/code>&lt;/a>（&lt;a class="link" href="https://stackoverflow.com/a/45440199" target="_blank" rel="noopener"
>注意与&lt;code>pyi&lt;/code>区分&lt;/a>）和&lt;code>pxd&lt;/code>（&lt;a class="link" href="https://stackabuse.com/differences-between-pyc-pyd-and-pyo-python-files/" target="_blank" rel="noopener"
>注意与&lt;code>pyd&lt;/code>区分&lt;/a>）。&lt;/p>
&lt;p>&lt;code>.pyx&lt;/code>是Cython的源文件，类似于&lt;code>.cpp&lt;/code>文件在C++中的地位，而对应&lt;code>.h&lt;/code>头文件地位的则是&lt;code>pyi&lt;/code>。在Cython中添加&lt;code>import 'header.pyi'&lt;/code>的语句就会将&lt;code>header.pyi&lt;/code>文件中的内容原封不动地直接插入当前位置，这与C++的&lt;code>#include&lt;/code>语句的作用是相同的。而&lt;code>pxd&lt;/code>则是另一套符号化的逻辑，&lt;code>.pxd&lt;/code>文件中只能声明函数、声明类型、不能有函数和类型的定义内容（除了&lt;code>inline&lt;/code>函数外），而在&lt;code>cimport&lt;/code>了&lt;code>pxd&lt;/code>的定义之后当前代码便引入了对应的函数或者类型签名。这个工作方式则更符合C++中头文件的实际用途。定义了&lt;code>pxd&lt;/code>后就可以在多个Cython文件之间共享同一个类型了。&lt;/p>
&lt;p>不过既然涉及了&lt;code>include&lt;/code>语法，就必然要指定类似于C++的引用路径了。&lt;code>pxi&lt;/code>和&lt;code>pxd&lt;/code>文件的引用路径可以&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/userguide/sharing_declarations.html#search-paths-for-definition-files" target="_blank" rel="noopener"
>在cythonize过程中手动指定&lt;/a>，而&lt;code>pxd&lt;/code>由于是符号化的还可以通过新建&lt;code>__init__.pxd&lt;/code>的方式来实现类似于Python的引用方法。只要在Cython搜索目录下的文件夹中包含&lt;code>__init__.pxd&lt;/code>文件，Cython就会认为这是一个Cython库，之后就可以用&lt;code>cimport&lt;/code>语句通过与Python中&lt;code>import&lt;/code>相类似的语法将对应模块文件（&lt;code>.pxd&lt;/code>文件）引用进来。当然，&lt;code>pxd&lt;/code>文件&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/userguide/source_files_and_compilation.html#compiling-with-the-cythonize-command" target="_blank" rel="noopener"
>也可以通过命令参数直接导入&lt;/a>。关于如何组织这些文件以及头文件之间的关系，读者可以参考&lt;a class="link" href="https://github.com/cmpute/pcl.py" target="_blank" rel="noopener"
>我写的PCL封装库&lt;/a>和&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/userguide/sharing_declarations.html" target="_blank" rel="noopener"
>Cython的相关文档&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>函数在pxd中的定义不能显式指定默认参数，而是必须用&lt;code>*&lt;/code>代替，例如&lt;code>cdef void func(a=0)&lt;/code>在&lt;code>pxd&lt;/code>中声明的话需要改为&lt;code>cdef void func(a=*)&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;h2 id="类型封装">类型封装&lt;/h2>
&lt;p>Cython对C++的类型提供了基本可用的封装语法。为什么说基本可用，是因为Cython目前对模板的支持还非常有限，因此实际上可以说Cython只支持到C++98的程度。不过尽管如此，Cython已经能够完成大多数代码的封装需求了。Cython对&lt;code>class&lt;/code>的支持通过&lt;code>cdef cppclass &amp;lt;class-name&amp;gt;&lt;/code>来实现，这里&lt;code>cppclass&lt;/code>关键词是为了和Cython的&lt;code>class&lt;/code>关键词进行区分。Cython中&lt;code>class&lt;/code>关键词代表的是和Python一致的&lt;code>PyObject&lt;/code>对象，代表的是Python类型，而&lt;code>cppclass&lt;/code>则指代C++原生类型，由于Cython文件中无法直接编写C++代码，因此&lt;code>cdef cppclass&lt;/code>语句通常在&lt;code>cdef extern from&lt;/code>的语法块中，用来封装现有的C++类型。另外一点需要注意的地方是Cython&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/userguide/language_basics.html#c-variable-and-type-definitions" target="_blank" rel="noopener"
>提供封装&lt;code>enum&lt;/code>和&lt;code>struct&lt;/code>的语法&lt;/a>，但是针对的是C中的&lt;code>enum&lt;/code>和&lt;code>struct&lt;/code>，而非C++中的&lt;code>enum class&lt;/code>和&lt;code>struct&lt;/code>（C++中&lt;code>struct&lt;/code>和&lt;code>class&lt;/code>几乎没有区别）。如果要封装C++版本的&lt;code>enum&lt;/code>和&lt;code>struct&lt;/code>可以直接使用&lt;code>cppclass&lt;/code>关键词。以下是封装C++类型的一个例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">extern&lt;/span> &lt;span class="kn">from&lt;/span> &lt;span class="s2">&amp;#34;test.h&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cdef&lt;/span> &lt;span class="n">cppclass&lt;/span> &lt;span class="n">Test&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">void&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="别名与-namespace-关键字">别名与 namespace 关键字&lt;/h3>
&lt;p>由于Cython最后生成的是全局的C代码，因此在引用C++类时需要明确声明类型含命名空间的全称，这里就需要用到别名的机制。Cython允许从&lt;code>.h&lt;/code>文件中导入声明的时候给类型和方法改名字，具体用法如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">extern&lt;/span> &lt;span class="kn">from&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;header-name&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cdef&lt;/span> &lt;span class="n">void&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">new&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;origin-function-name&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cdef&lt;/span> &lt;span class="n">cppclass&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">new&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">class&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;origin-class-name&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>简而言之就是在方法或者类型名称后添加引号，引号里写上原本C++中的名字。这个机制有很多tricky的用法，它可以用来声明带命名空间的方法和类型、可以用来&lt;a class="link" href="https://stackoverflow.com/a/25955546" target="_blank" rel="noopener"
>重命名C++中的运算符&lt;/a>、可以用来直接声明实例化的模板类型、甚至可以用来把C++常量声明成类型用于模板参数（这种操作可以&lt;a class="link" href="https://github.com/wouterboomsma/eigency/blob/master/eigency/core.pxd" target="_blank" rel="noopener"
>参考eigency库中的代码&lt;/a>）。&lt;/p>
&lt;p>其中针对第一种用法，为了简化带有命名空间对象的声明，Cython加入了&lt;code>namespace&lt;/code>关键字。在&lt;code>cdef&lt;/code>语句中添加&lt;code>namespace&lt;/code>从句可以使得Cython编译器默认给其包含的语句块中所有的类型加上对应的命名空间，例如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">extern&lt;/span> &lt;span class="kn">from&lt;/span> &lt;span class="s2">&amp;#34;test.h&amp;#34;&lt;/span> &lt;span class="n">namespace&lt;/span> &lt;span class="s2">&amp;#34;ns&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cdef&lt;/span> &lt;span class="n">cppclass&lt;/span> &lt;span class="n">Test&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>与以下代码是等价的&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">extern&lt;/span> &lt;span class="kn">from&lt;/span> &lt;span class="s2">&amp;#34;test.h&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cdef&lt;/span> &lt;span class="n">cppclass&lt;/span> &lt;span class="n">Test&lt;/span> &lt;span class="s2">&amp;#34;ns::Test&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="模板支持">模板支持&lt;/h3>
&lt;p>这个特性在&lt;a class="link" href="https://zyxin.xyz/blog/2018-12/CythonTypes/" >之前介绍Cython类型的文章中&lt;/a>也有提到过，这里补充一下它的一些特性。Cython对C++模板的支持通过&lt;code>[]&lt;/code>符号实现，以下是Cython中对&lt;code>vector&lt;/code>的封装代码可供参考&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">extern&lt;/span> &lt;span class="kn">from&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;vector&amp;gt;&amp;#34;&lt;/span> &lt;span class="n">namespace&lt;/span> &lt;span class="s2">&amp;#34;std&amp;#34;&lt;/span> &lt;span class="n">nogil&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cdef&lt;/span> &lt;span class="n">cppclass&lt;/span> &lt;span class="n">vector&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">ALLOCATOR&lt;/span>&lt;span class="o">=*&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctypedef&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="n">value_type&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctypedef&lt;/span> &lt;span class="n">ALLOCATOR&lt;/span> &lt;span class="n">allocator_type&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中&lt;code>vector[T,ALLOCATOR=*]&lt;/code>对应的就是C++中的&lt;code>vector&amp;lt;T, ALLOCATOR&amp;gt;&lt;/code>符号。模板参数在Cython中同样可以有复数个，也可以有默认值，&lt;a class="link" href="https://gist.github.com/bjodah/3cc42d9c5f70a321af29" target="_blank" rel="noopener"
>似乎现在也支持常数作为模板参数&lt;/a>，不过我没有尝试过，而据说老版本是不支持常数模板参数的。&lt;/p>
&lt;p>之前有提到Cython中对模板的支持是阉割过的，主要特征有以下几点：&lt;/p>
&lt;ul>
&lt;li>Cython不支持模板参数的类型声明访问。例如上面的&lt;code>vector&lt;/code>类型声明中不能使用&lt;code>ctypedef allocator_type.size_type size_type&lt;/code>这样的语法，而这样的类型推断在C++中是有很多的。&lt;/li>
&lt;li>Cython不支持模板构造函数中包含新的模板参数
不过Cython一直在改进对模板的支持，因此以后也很有可能会得到改进。&lt;/li>
&lt;/ul>
&lt;h2 id="buffer协议">Buffer协议&lt;/h2>
&lt;p>Cython还针对性地支持了&lt;a class="link" href="https://docs.python.org/3/c-api/buffer.html" target="_blank" rel="noopener"
>Python的Buffer协议&lt;/a>，用来传递一块结构化的内存，这个协议的标准被记录在了&lt;a class="link" href="https://www.python.org/dev/peps/pep-3118/" target="_blank" rel="noopener"
>提案PEP-3118&lt;/a>中。这个协议通过&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/userguide/buffer.html" target="_blank" rel="noopener"
>&lt;code>__getbuffer__&lt;/code>和&lt;code>__releasebuffer__&lt;/code>&lt;/a>两个Cython自定义的特殊函数实现，通过这个方式Cython代码就可以将C++内存转化为Python识别的内存。因为Numpy支持将支持Buffer协议的对象转换为ndarray，因此这个Buffer协议的通常用法是将一个C++对象变成Numpy的矩阵。具体的使用案例也可以&lt;a class="link" href="https://github.com/cmpute/pcl.py/blob/master/pcl/PointCloud.pyx#L565" target="_blank" rel="noopener"
>参照我的pcl封装库中的对应代码&lt;/a>。&lt;/p>
&lt;hr>
&lt;p>本文介绍了Cython中操作C/C++对象的方法，不过仅仅介绍了一些进阶用法。如果是新手的话还是先参照之前提到两篇文档学习基本的函数、类型封装方法吧～&lt;/p></description></item><item><title>如何选择Python与C++之间的胶水</title><link>https://zyxin.xyz/blog/2019-08/GluePythonCpp/</link><pubDate>Sun, 11 Aug 2019 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2019-08/GluePythonCpp/</guid><description>&lt;p>Python作为一门胶水语言，它与C/C++之间的兼容性（Interoperability）我认为是它相比其他动态语言脱颖而出的最大原因。Python原生支持的是与C语言的接口，Python的发行版自带有&lt;code>Python.h&lt;/code>头文件，里面提供了在C中调用Python和反过来在Python中调用C的接口定义。但是C++就不一样了，虽然C++ ⇔ C ⇔ Python的通道是可行的，但是想要完整兼容C++的特性的话需要很多额外的重复代码（boilerplate）。因此相应针对Python/C++绑定的库也就应运而生了，我所了解的库主要有四个：&lt;a class="link" href="https://www.boost.org/doc/libs/1_70_0/libs/python/doc/html/index.html" target="_blank" rel="noopener"
>Boost.Python&lt;/a>，&lt;a class="link" href="https://cython.org/" target="_blank" rel="noopener"
>Cython&lt;/a>，&lt;a class="link" href="https://pybind11.readthedocs.io/en/stable/" target="_blank" rel="noopener"
>pybind11&lt;/a>，&lt;a class="link" href="http://www.swig.org/" target="_blank" rel="noopener"
>SWIG&lt;/a>。虽然网上也有不少比较三者的页面，但是我觉得都不够详细，这篇博客就介绍一下我基于使用这几个库的经验比较。&lt;/p>
&lt;p>上面说到的这些库我基本都有接触过，其中用过的有pybind11和Cython，分别用在了我正在写的&lt;a class="link" href="https://github.com/cmpute/cgal.py" target="_blank" rel="noopener"
>CGAL&lt;/a>和&lt;a class="link" href="https://github.com/cmpute/pcl.py" target="_blank" rel="noopener"
>PCL&lt;/a>的绑定上。另外二者则是在其他库的代码中有读过（如Caffe和CGAL的官方绑定）。总的来说，Boost.Python和pybind11主要用于给现有C++代码提供Python绑定，并且不用学习新的语法;SWIG提供一个给C++代码编写多种语言绑定的框架，它本质上是一种代码生成器，基于SWIG自定义的语法;Cython则是基于Python的C/C++代码封装器，其本质也是代码生成器，但是Cython的语法是Python的超集，也就是说Python的代码可以零成本移植到Cython中。&lt;/p>
&lt;h2 id="boostpython-vs-pybind11">Boost.Python vs pybind11&lt;/h2>
&lt;p>Boost.Python是一个Boost框架中封装C++代码的工具，通过宏定义和元编程来简化Python的API调用，消灭bolierplate。Boost.Python还提供对Numpy底层API的封装，因此适用性很强，能满足Python绑定的绝大多数需求。而pybind11则是受Boost.Python启发的一套类似的API，其目标是提供Header-only的易用的Python接口。由于pybind11脱胎于Boost，因此它们的接口非常相似，例如最简单的封装一个函数，Boost.Python代码如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;boost/python.hpp&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">BOOST_PYTHON_MODULE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">example&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">boost&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">python&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">def&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;add&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">add&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>而对应的pybind11代码则是&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;pybind11/pybind11.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">PYBIND11_MODULE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">example&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">def&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;add&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>因此熟练掌握这两者之一的开发者能很快上手另一个库的使用。他们的编译方式也是相似的，只需添加一个工程，写好对应的封装代码，然后利用他们的CMake模块进行编译，生成的动态链接库只要文件名正确就可以直接从Python进行import了。他们二者的区别主要有以下几个方面：&lt;/p>
&lt;ol>
&lt;li>pybind11是Header-only的，因此只需把它的头文件添加到include目录就算安装好了。而Boost.Python则是需要先编译安装才能使用，需要处理其依赖。&lt;/li>
&lt;li>pybind11的社区更加活跃，Boost.Python则受限于Boost的更新周期，回应反馈可能会比较慢。&lt;/li>
&lt;li>pybind11的易用性更好，文档齐全且友善，由于没有依赖问题，编译方便上手也快。&lt;/li>
&lt;li>Boost.Python兼容旧特性的C++，也兼容Boost自定义的类型（如smartptr），因此如果需要封装的代码是基于Boost的，那可能Boost.Python会比pybind11合适。pybind11针对的环境则是C++1x，并且只支持标准C++库。&lt;/li>
&lt;li>Boost.Python对Numpy的支持比较完备，例如Boost.Python支持自定义&lt;code>numpy.dtype&lt;/code>，而pybind11对Numpy的支持主要基于Python的buffer协议。
因此基本上如果封装不基于Boost的库的话可以先考虑pybind11，而如果是封装基于Boost的库（如PCL），或者深度操作Numpy，那还是直接上Boost.Python吧～&lt;/li>
&lt;/ol>
&lt;h2 id="boostpythonpybind11-vs-cython">Boost.Python/pybind11 vs Cython&lt;/h2>
&lt;p>这两者的选用其实差别非常大，因为他们的代码逻辑都是不同的。而具体选择哪个库就纯粹是根据需求出发了。他们的区别如下（以下pybind11同时也代表了Boost.Python）&lt;/p>
&lt;ol>
&lt;li>pybind11基于C++，更适合C++工程师。Cython则是基于Python，写习惯的Python的人上手更快，并且能同时方便地兼容Python和C++。&lt;/li>
&lt;li>Cython相比pybind11的环境配置更加简单，用户只需通过pip安装Cython就可以利用Cython的功能了，也无需配置路径。&lt;/li>
&lt;li>Cython封装C++类会比Boost.Python更加繁杂，你需要先定义C++类，再封装成Python类。相当于Cython还多一步翻译头文件的工作。&lt;/li>
&lt;li>Cython支持模板（虽然是阉割版本）！这是Cython独家的一个killer特性，不过是与第3点相关联的。如果你已经翻译好了现有的模板代码，那么用户就可以用Python的语法来自行展开模板了！pybind11需要在编译的时候实例化模板，因此一般只封装常用的实例，或者穷举所有实例化可能（这会导致生成的封装库尺寸爆炸）&lt;/li>
&lt;li>pybind11封装重载函数比Cython要方便太多！Cython封装重载函数的话一般需要定义大量的可选参数和类型判断。&lt;/li>
&lt;li>Cython封装继承类就更加麻烦了，不仅要处理方法重载，还要复制继承关系，十分繁复。&lt;/li>
&lt;li>Cython无法利用上C++的宏定义，这对支持条件编译非常不利，很多时候还需要自己利用&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/userguide/language_basics.html#conditional-statements" target="_blank" rel="noopener"
>Cython的条件语句&lt;/a>翻译一套条件编译的逻辑。&lt;/li>
&lt;li>Cython似乎在封装上比pybind11性能好，参见&lt;a class="link" href="https://github.com/pybind/pybind11/issues/1227" target="_blank" rel="noopener"
>pybind11#1227&lt;/a>和&lt;a class="link" href="https://github.com/pybind/pybind11/issues/2005" target="_blank" rel="noopener"
>pybind#2005&lt;/a>。如果你的代码需要经常调用封装后的函数，那么选择Cython性能更好。&lt;/li>
&lt;/ol>
&lt;p>以前很多人使用Cython的原因是Cython可以很方便地加速Python代码，但是&lt;code>numba.jit&lt;/code>的出现则让这个功能实际上成了鸡肋，因此Cython最近的使用率也是越来越低了。如果没有很强的对保留模板灵活性的需求，或者不是封装目标不是基于C语言的，那还是选择pybind11来的方便。如果封装接口只是一小部分需求的话也还是用Cython会更加一致，我在自己的PCL绑定项目中使用Cython的原因是有大量基于Python的扩展代码，因此使用Cython还是能更方便。&lt;/p>
&lt;h2 id="swig">SWIG&lt;/h2>
&lt;p>SWIG是个很神奇的东西，他能够将C++代码封装成Python/C#/Java/Ruby等多种语言，但是也正因为这个灵活性，它对C++的高级特性的支持就比较辣鸡了。在&lt;a class="link" href="https://github.com/sciencectn/cgal-bindings" target="_blank" rel="noopener"
>CGAL官方的绑定库&lt;/a>中可以看到有不少代码需要针对Python和Java打补丁，因此如果没有多语言的需求的话SWIG应该是下下策了。这应该也是SWIG一直没啥发展的原因吧～&lt;/p>
&lt;hr>
&lt;p>总而言之，如果有多语言绑定的需求可以选择SWIG，如果有以下需求可以选择Cython，其他情况选择pybind11即可&lt;/p>
&lt;ul>
&lt;li>需要保留模板参数，让用户可以自行选择用什么类型展开，或者目标用户有继续使用和拓展C++ API的需求时，用Cython便于用户使用&lt;/li>
&lt;li>有大量的封装函数调用时，Cython的性能最好&lt;/li>
&lt;li>绑定的对象是C语言写的API或者不涉及面向对象的话，那么用Cython写封装会更方便（不用处理编译的问题）&lt;/li>
&lt;/ul>
&lt;p>本文介绍了Boost.Python/pybin11/Cython/SWIG之间的特性与区别，而具体用法则是一笔带过。如果大家对其中的某工具感兴趣的话可以直接去官网看教程～也欢迎参考我的&lt;a class="link" href="https://zyxin.xyz/blog/blog/tags/Cython/" >Cython系列博客&lt;/a>，以及我的一些Github项目如&lt;a class="link" href="https://github.com/cmpute/pcl.py" target="_blank" rel="noopener"
>pcl.py&lt;/a>，&lt;a class="link" href="https://github.com/cmpute/cgal.py" target="_blank" rel="noopener"
>cgal.py&lt;/a>。&lt;/p></description></item><item><title>ROS参数设置方法总结</title><link>https://zyxin.xyz/blog/2019-08/ROSParameter/</link><pubDate>Fri, 02 Aug 2019 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2019-08/ROSParameter/</guid><description>&lt;p>最近在研究ROS节点（ROS Node）的参数设置方式，由于系统比较复杂，并且会变得更加复杂，因此需要一个统一的参数设置方式。这里就比较一下四种参数获取方案的区别～&lt;/p>
&lt;h2 id="命令行文件输入">命令行/文件输入&lt;/h2>
&lt;p>由于ROS节点本身也只是普通的可执行程序，因此它可以正常地从启动参数中读取参数，另外也可以从配置文件中读取参数。这两种方法都是常规程序读取参数的方法。从命令行中读取参数有C++的&lt;code>Boost.Program_options&lt;/code>库和Python的&lt;code>argparse&lt;/code>的库，用来解析命令行参数输入，支持可选参数、重复参数、参数分组等等。而从文件输入的话，常见的设置格式有&lt;code>json&lt;/code>，&lt;code>yaml&lt;/code>，&lt;code>toml&lt;/code>甚至&lt;code>ini&lt;/code>等等。从这些文件中读取比较灵活，但是无法利用ROS框架，并且需要自行统一格式。&lt;/p>
&lt;h2 id="参数服务器">参数服务器&lt;/h2>
&lt;p>ROS中很有名的支持参数设置的结构是参数服务器，参数服务器是一个包含在master结点里的集中式字典结构，在ROS的Wiki上有介绍：&lt;a class="link" href="http://wiki.ros.org/Parameter%20Server/cn" target="_blank" rel="noopener"
>中文&lt;/a>|&lt;a class="link" href="http://wiki.ros.org/Parameter%20Server" target="_blank" rel="noopener"
>英文&lt;/a>。参数服务器也可以从文件中读取参数，文件格式是&lt;code>yaml&lt;/code>，读取的方式是在&lt;code>.launch&lt;/code>文件中添加&lt;code>&amp;lt;rosparam&amp;gt;&lt;/code>标签，并指定键值或者文件路径。&lt;/p>
&lt;h3 id="rosparam">rosparam&lt;/h3>
&lt;p>&lt;code>rosparam&lt;/code>是操作参数服务器的一套工具，你可以从程序中调用&lt;code>rosparam&lt;/code>的API，或者使用命令行工具对指定参数进行动态更改。命令行的用法参见&lt;a class="link" href="http://wiki.ros.org/rosparam#rosparam_command-line_tool" target="_blank" rel="noopener"
>ROS Wiki&lt;/a>&lt;/p>
&lt;h3 id="rosrun">rosrun&lt;/h3>
&lt;p>&lt;code>rosrun&lt;/code>和&lt;code>roslaunch&lt;/code>都是运行ROS模块的工具，其中&lt;code>rosrun&lt;/code>只能运行单个节点，而&lt;code>roslaunch&lt;/code>则支持更加复杂的启动体系。用&lt;code>rosrun&lt;/code>进行参数服务器的设置的方式是在启动参数中添加&lt;code>key:=value&lt;/code>。&lt;/p>
&lt;h3 id="roslaunch">roslaunch&lt;/h3>
&lt;p>用&lt;code>roslaunch&lt;/code>进行参数服务器的设置的方式是在文件中添加&lt;code>&amp;lt;param&amp;gt;&lt;/code>标签。&lt;param>&lt;code>和&lt;/code>&lt;rosparam>&lt;code>实质上功能相似，前者设置的是单个参数，而后者针对的是一套参数。另外&lt;/code>roslaunch&lt;code>还支持从命令行读取参数，格式也是&lt;/code>key:=value&lt;code>，读取进来后存入的是&lt;/code>&lt;arg>&lt;code>标签，而如果要使用这类参数的话需要使用&lt;/code>roslaunch&lt;code>的&lt;/code>$(arg key)&lt;code>语法。具体的&lt;/code>roslaunch`语法&lt;a class="link" href="http://wiki.ros.org/roslaunch/XML" target="_blank" rel="noopener"
>参见ROS Wiki&lt;/a>。&lt;/p>
&lt;h3 id="dynamic_reconfigure">dynamic_reconfigure&lt;/h3>
&lt;p>ROS中还提供了另一种机制叫&lt;a class="link" href="http://wiki.ros.org/dynamic_reconfigure" target="_blank" rel="noopener"
>&lt;code>dynamic_reconfigure&lt;/code>&lt;/a>也可以用来动态设置参数。它与参数服务器的区别在于它的参数更新是基于回调机制，而参数服务器实际上是轮询机制。ROS程序会主动询问参数服务器以获取参数，而&lt;code>dynamic_reconfigure&lt;/code>则是动态地告知ROS程序参数更新事件。&lt;code>dynamic_reconfigure&lt;/code>的使用方法是定义&lt;code>.cfg&lt;/code>文件，并在其中通过Python程序定义可动态设置的参数。&lt;code>cfg&lt;/code>文件在CMakeLists.txt中需要注册，注册语法及顺序参见&lt;a class="link" href="http://wiki.ros.org/catkin/CMakeLists.txt#Example" target="_blank" rel="noopener"
>CMakeLists.txt的Wiki&lt;/a>和&lt;a class="link" href="http://wiki.ros.org/dynamic_reconfigure/Tutorials/HowToWriteYourFirstCfgFile" target="_blank" rel="noopener"
>&lt;code>.cfg&lt;/code>文件的Wiki&lt;/a>。个人感觉实际上&lt;code>dynamic_reconfigure&lt;/code>实现的效果和自己定义ROS服务来更新参数是相似的。&lt;/p>
&lt;blockquote>
&lt;p>最后总结下来的话ROS参数服务器还是最常用的，但是参数服务器的名称同样也有命名空间的限制，也分私有参数和公有参数等等。。这两个的区别我其实现在还没有搞清楚= =&lt;/p>
&lt;/blockquote></description></item><item><title>折腾 KDE Neon 的配置</title><link>https://zyxin.xyz/blog/2019-07/ConfigureKdeNeon/</link><pubDate>Wed, 31 Jul 2019 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2019-07/ConfigureKdeNeon/</guid><description>&lt;img src="https://zyxin.xyz/blog/2019-07/ConfigureKdeNeon/neon.png" alt="Featured image of post 折腾 KDE Neon 的配置" />&lt;p>最近我已经将KDE Neon作为主力系统之一了，Plasma桌面真的是太好用了！于是给家里的主机也装上了Neon，这篇文章就记录一下安装配置和美化的过程啦～&lt;/p>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2019-07/ConfigureKdeNeon/neon.png"
width="2560"
height="1080"
loading="lazy"
alt="Plasma桌面折腾结果～"
class="gallery-image"
data-flex-grow="237"
data-flex-basis="568px"
>&lt;/p>
&lt;h2 id="系统安装及boot设置">系统安装及Boot设置&lt;/h2>
&lt;h3 id="双系统安装">双系统安装&lt;/h3>
&lt;p>安装Neon还是非常简单的，直接从官网下载系统镜像，烧进U盘正常安装即可。不过由于我选择的是与Windows双系统安装，因此需要手动分区。这里要纠正一下之前[安装双系统博文中的分区方式](https://zyxin.xyz/blog/2018-09/LinuxDualSystem/。现在的Linux系统实际上只需要给根目录&lt;code>/&lt;/code>分区就可以了，&lt;code>/home&lt;/code>分区以前建议单独分区的原因是为了便于系统的更改，这样在修改系统分区之后（如重装系统）还能保留&lt;code>/home&lt;/code>底下的文件，但其实现在很多系统已经能做到重装并保留&lt;code>/home&lt;/code>分区了，这时对于我这小硬盘的笔记本来说反而导致空间利用不灵活。而交换分区&lt;code>/swap&lt;/code>也是没有必要的，交换分区的存在类似于Windows下的虚拟内存，用硬盘的一部分来虚拟内存，避免内存不足的情况。新Linux可以利用交换文件完成类似功能，因此不必专门给&lt;code>/swap&lt;/code>分区。（不过我猜专门给它分个区可能能提高性能？）。最后最关键的是不要给&lt;code>/boot&lt;/code>分区了,&lt;code>/boot&lt;/code>分区是为了保证boot文件区不被占满，以致无法正常启动。利用EFI方式启动的系统只需要有&lt;code>efi&lt;/code>分区即可，而且多个系统可以利用同一个EFI分区。因此只需告诉安装器使用EFI分区作为启动分区，关于EFI的详细信息请看后文~&lt;/p>
&lt;blockquote>
&lt;p>分区的时候还看到了之前的系统里有标记为&lt;code>msr&lt;/code>的分区，是Windows的预留分区，好像具体没啥用。这里贴&lt;a class="link" href="http://bbs.wuyou.net/forum.php?mod=viewthread&amp;amp;tid=374959" target="_blank" rel="noopener"
>一篇考据文章&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;h3 id="refind设置">rEFind设置&lt;/h3>
&lt;p>安装完系统后我还准备安装rEFind来替代默认的bootloader——GRUB(GRUB实在是太丑了&amp;hellip;)。由于Windows10禁掉了启动其他系统的入口，因此之前只能用GRUB。rEFind是一个更加强大的启动器，并且可自定义的部分也多～rEFind是基于UEFI的启动器，相比GRUB能支持更多的功能，甚至可以在启动阶段就加载一些驱动，这就使得rEFind可以有高清的界面哈哈哈～关于UEFI与传统BIOS的区别可以参考&lt;a class="link" href="https://wiki.manjaro.org/index.php?title=Some_basics_of_MBR_v/s_GPT_and_BIOS_v/s_UEFI" target="_blank" rel="noopener"
>Manjaro论坛的这篇帖子&lt;/a>和&lt;a class="link" href="https://www.zhihu.com/question/36313402/answer/66947818" target="_blank" rel="noopener"
>知乎的这篇帖子&lt;/a>。UEFI和BIOS都是主板ROM程序启动后调用的bootloader类型，当bootloader通过UEFI或者BIOS过程加载之后就会启动系统内核。而UEFI相比BIOS可以支持更大的bootloader和并行启动，是现在大部分系统采用的启动方式～&lt;/p>
&lt;p>rEFind在Ubuntu下安装非常方便～直接用&lt;code>apt&lt;/code>安装即可。安装完重启就会发现默认进入的已经是rEFind界面了～不过默认的界面主题非常丑，也有很多多余的启动项，因此还需要稍微设置一下～设置教程网上有很多了，主题在官网和搜索引擎也都可以搜到，这里就不赘述。我的设置文件&lt;a class="link" href="https://github.com/cmpute/dotfiles/blob/master/refind/user.conf" target="_blank" rel="noopener"
>可以在Github找到&lt;/a>～我保留了GRUB的chainload入口，避免rEFind崩了进不去系统，然后另外添加了一个直接启动Linux内核的入口。最后界面效果如下，还是很赏心悦目的～&lt;/p>
&lt;p>{% asset_img refind.jpg rEFInd界面照片 %}&lt;/p>
&lt;p>安装完成以后就接着&lt;a class="link" href="https://zyxin.xyz/blog/2018-09/LinuxDualSystem/" >参考之前的文章&lt;/a>继续设置就可以了。其中最必要的两个操作是把系统时间调成&lt;code>local-rtc&lt;/code>避免与Windows冲突，以及把Plasma环境中鼠标单击的行为从打开改为选择。。。&lt;/p>
&lt;h3 id="输入法安装">输入法安装&lt;/h3>
&lt;p>Neon安装完后默认是没有输入法的，不过反正中文输入法都是要安装&lt;a class="link" href="https://wiki.archlinux.org/index.php/fcitx" target="_blank" rel="noopener"
>fcitx&lt;/a>的，还避免了使用ibus的冲突～fcitx的安装&lt;a class="link" href="https://blog.ctang.me/the-first-story-on-medium-8a132a1b62fe" target="_blank" rel="noopener"
>参考这篇文章&lt;/a>即可，其中&lt;code>fcitx-qt-impanel&lt;/code>这个包可以让fcitx的状态显示在任务栏里～最近好像fcitx在开发新版本(&lt;a class="link" href="https://a-wing.top/linux/2018/08/14/fcitx5.html" target="_blank" rel="noopener"
>fcitx5&lt;/a>)，不过目前还只有Arch linux有包可以直接用，因此也就没折腾了。&lt;/p>
&lt;p>安装完成之后还需要让fcitx框架跟随系统在后台启动，在Ubuntu底下修改的文件是&lt;code>.xprofile&lt;/code>，而KDE桌面环境不会加载&lt;code>.xprofile&lt;/code>，而是加载&lt;code>.xsessionrc&lt;/code>，修改方式参见&lt;a class="link" href="https://wiki.archlinux.org/index.php/fcitx#Set_environment_variables_for_IM_modules" target="_blank" rel="noopener"
>Arch Wiki&lt;/a>，最后好像还需要加&lt;code>fcitx &amp;amp;&lt;/code>来确保启动= =&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>折腾这些玩意的过程中发现&lt;a class="link" href="https://wiki.archlinux.org/index.php" target="_blank" rel="noopener"
>Arch Wiki&lt;/a>真是个好东西啊～KDE桌面的大部分问题都可以搜到解答～&lt;/li>
&lt;li>&lt;code>.xinitrc&lt;/code>, &lt;code>.xprofile&lt;/code>，&lt;code>.xsession&lt;/code>这些设置文件我真的是被搞蒙了。。&lt;a class="link" href="https://www.reddit.com/r/linux/comments/1p6orz/bashrc_bash_profile_inputrc_profile_xprofile/" target="_blank" rel="noopener"
>这里有一篇帖子&lt;/a>和&lt;a class="link" href="https://unix.stackexchange.com/questions/281858/difference-between-xinitrc-xsession-and-xsessionrc/281923#281923" target="_blank" rel="noopener"
>一篇回答&lt;/a>梳理了他们的关系，可供参考～&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="rclone配置">rclone配置&lt;/h3>
&lt;p>另一个必装的好东西是rclone，之前在&lt;a class="link" href="https://zyxin.xyz/blog/2019-04/LinuxRemoteSetup/" >远程桌面设置的文章&lt;/a>中有提到。由于KDE内置的GoogleDrive和OneDrive连接不太好使，还是用rclone来访问网盘吧= =。在设置好rclone之后可以通过自定义服务的方式让rclone在系统启动时自动挂载网盘到指定路径，然后在Dolphin（KDE的文件管理器）里面将这两个位置添加到左侧目录就可以啦～这样就可以直接从文件管理器访问了～具体的配置文件可以参考我的Github。&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>如果自定义服务添加到的位置是系统服务位置，那么可能会碰到权限问题，&lt;a class="link" href="https://forum.rclone.org/t/rclone-gdrive-not-mounting-permissions-or-fuse-issue/8067/2" target="_blank" rel="noopener"
>这里有解决方法&lt;/a>&lt;/li>
&lt;li>关于systemd的服务设置可以&lt;a class="link" href="https://wiki.archlinux.org/index.php/Systemd/User" target="_blank" rel="noopener"
>参考Arch Wiki&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="主题设置美化">主题设置美化&lt;/h2>
&lt;h3 id="plasma主题设置">Plasma主题设置&lt;/h3>
&lt;p>KDE Plasma最大的优点就是流畅以及好看！不折腾一下主题真的是对不起这么好的环境了～我大概主要进行了以下修改&lt;/p>
&lt;ul>
&lt;li>风格选择&lt;code>Breeze Dark&lt;/code>， 透明度设置为70%左右&lt;/li>
&lt;li>图标使用&lt;code>Papirus Dark&lt;/code>&lt;/li>
&lt;li>使用透明桌面主题&lt;a class="link" href="https://store.kde.org/p/1170816/" target="_blank" rel="noopener"
>&lt;code>Breeze Transparent Dark&lt;/code>&lt;/a>&lt;/li>
&lt;li>Firefox浏览器去掉titlebar，主题设为Dark&lt;/li>
&lt;li>添加全局菜单添加到底部
&lt;blockquote>
&lt;p>注意默认的Firefox去掉titlebar的话&lt;a class="link" href="https://www.reddit.com/r/kde/comments/bn2klu/firefox_csd_bug_with_kde_global_menu_plasmoid/" target="_blank" rel="noopener"
>对全局菜单的Plasmoid支持有问题&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>fcitx主题选择Dark&lt;/li>
&lt;li>在桌面特效中选择喜欢的窗口动画，调节窗口透明度～&lt;/li>
&lt;/ul>
&lt;p>剩下的换壁纸、配色主题什么的都来一遍就可以了～最后的桌面效果见标题图，还是很顺眼的～&lt;/p>
&lt;h3 id="其他小工具">其他小工具&lt;/h3>
&lt;h4 id="窗口附着缩放">窗口附着缩放&lt;/h4>
&lt;p>这个KWin脚本名叫Sticky Window Snapping，真的是神器！可以让附着在一块的窗口同时进行尺寸调整！这个功能相当于Windows分屏功能的升级版，这酸爽谁用谁知道啊！～下载地址&lt;a class="link" href="https://store.kde.org/p/1112552" target="_blank" rel="noopener"
>见KDE商城&lt;/a>，使用效果在官网有动图可以参考～还&lt;a class="link" href="https://store.kde.org/p/1112554/" target="_blank" rel="noopener"
>有个类似的脚本&lt;/a>可以做到让窗口严格按照网格排列，不过相比之下就显然鸡肋很多了。&lt;/p>
&lt;blockquote>
&lt;p>这些功能的Windows替代品可以&lt;a class="link" href="https://zhuanlan.zhihu.com/p/33722847" target="_blank" rel="noopener"
>参见少数派的文章&lt;/a>，不过貌似没有免费的软件可以做到Tilting&lt;/p>
&lt;/blockquote>
&lt;h4 id="redshift红移">Redshift（红移）&lt;/h4>
&lt;p>红移是Linux底下提供“护眼模式”的软件，有点类似f.lux，这个对我们这个天天盯电脑的还是很有用啦～安装直接&lt;code>apt install redshift plasma-applet-redshift-control&lt;/code>即可，第二个软件是Redshift的Plasma插件，可以在任务栏通过它来调节红移，非常方便～安装完后应该就可以通过Plasma挂件来设置红移了，如果不能自动识别地理位置的话&lt;a class="link" href="https://wiki.archlinux.org/index.php/Redshift#Automatic_location_based_on_GPS" target="_blank" rel="noopener"
>参考Arch Wiki中描述的geoclue工具&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>其他还有一些KDE下非常好用的软件，也一并列在这里了～以后用多了再专门开个文章～&lt;/p>
&lt;ul>
&lt;li>Kdenlive / Audacity：免费的视频/音频剪辑软件，基本够用了～&lt;/li>
&lt;li>Meld：文件比较器&lt;/li>
&lt;li>Remmina / KRDC：远程桌面的客户端，后者是KDE自家的，感觉比Remmina还是差点&lt;/li>
&lt;li>VLC：视频播放器，可以部分替代PotPlayer&lt;/li>
&lt;li>Peek / Kazam：录屏软件&lt;/li>
&lt;li>Flameshot：截屏软件&lt;/li>
&lt;li>Gimp：图片编辑软件，堪比Photoshop&lt;/li>
&lt;li>Krfb / Xrdp：远程桌面的服务器&lt;/li>
&lt;li>DeaDBeeF：音乐播放器，对cue和utf的支持非常好，可以部分替代fb2k&lt;/li>
&lt;li>KDE Partition Manager：KDE版GParted，功能差不多而且界面美观～&lt;/li>
&lt;li>fzf / ripgrep：模糊搜索工具&lt;/li>
&lt;li>Golden Dict：强大的词典框架&lt;/li>
&lt;li>KGet / aria2：下载器&lt;/li>
&lt;li>youtube-dl：视频下载器（Python）&lt;/li>
&lt;li>&lt;a class="link" href="http://wps-community.org/" target="_blank" rel="noopener"
>WPS&lt;/a> / OnlyOffice：办公套装&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;!-- Reference Software List -->
&lt;!-- https://alim0x.gitbooks.io/awesome-linux-software-zh_cn/content -->
&lt;!-- KDE 全家桶 -->
&lt;!-- Deepin 全家桶 -->
&lt;!-- KDE snap全家桶 --></description></item><item><title>终端（Terminal）美化与扩展</title><link>https://zyxin.xyz/blog/2019-07/BeautifyTerminal/</link><pubDate>Sat, 13 Jul 2019 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2019-07/BeautifyTerminal/</guid><description>&lt;p>最近由于工作需要，和终端命令行打交道的时间越来越多了，最近便查了一下美化命令行的方法，记录在此以供查阅～另外还推荐一个网站&lt;a class="link" href="https://terminalsare.sexy/" target="_blank" rel="noopener"
>terminalsare.sexy&lt;/a>，提供了很多与terminal美化相关的软件。&lt;/p>
&lt;h2 id="命令提示符prompt美化">命令提示符（Prompt）美化&lt;/h2>
&lt;p>相信不少朋友也见过如下图所示美化过的命令提示符
&lt;img src="https://raw.github.com/b-ryan/powerline-shell/master/bash-powerline-screenshot.png"
loading="lazy"
alt="powerline-shell"
>这个效果的实现方式是通过安装名为&lt;strong>Powerline&lt;/strong>的扩展程序。Powerline是一套可拓展的状态栏提示工具，可以给各种Terminal Emulator和Vim等工具增加状态栏的提示，并且十分好用～&lt;/p>
&lt;p>Powerline有很多版本，有直接通过shell配置脚本实现的，也有通过独立程序进行显示的（如下列所示）。我选择的是原版powerline，安装方便，适用软件多，并且可以自行扩展。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/powerline/powerline" target="_blank" rel="noopener"
>&lt;strong>powerline&lt;/strong>&lt;/a>: 这应该是最初的也是最全的powerline，基于Python&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/b-ryan/powerline-shell" target="_blank" rel="noopener"
>&lt;strong>powerline-shell&lt;/strong>&lt;/a>: 这是针对美化shell的版本，同样基于Python，配置比上面的简单&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/justjanne/powerline-go" target="_blank" rel="noopener"
>&lt;strong>powerline-go&lt;/strong>&lt;/a>: 用go语言写的版本，运行更快&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/riobard/bash-powerline" target="_blank" rel="noopener"
>&lt;strong>bash-powerline&lt;/strong>&lt;/a>: 用bash编写的用于bash的powerline&lt;/li>
&lt;/ul>
&lt;p>原版powerline的安装非常简单，用&lt;code>pip&lt;/code>安装即可：&lt;code>(sudo) pip install powerline-status&lt;/code>。安装完以后&lt;a class="link" href="https://powerline.readthedocs.io/en/latest/usage.html#plugins" target="_blank" rel="noopener"
>根据官网的教程&lt;/a>更改对应的配置文件即可～我只对bash进行了美化，因为bash是最常用的shell。使用bash的话建议&lt;a class="link" href="https://powerline.readthedocs.io/en/latest/usage/shell-prompts.html#bash-prompt" target="_blank" rel="noopener"
>按照教程里的指示&lt;/a>，在命令行配置文件中开启daemon来提高加载速度。另外一个小技巧是，由于Python2的启动速度比Python3快，因此推荐用Python2来安装powerline。&lt;/p>
&lt;p>安装好powerline后下一步是自定义，这部分内容在powerline的文档里也有描述，不过它的文档写的不太好。。参考powerline安装目录下的配置文件（如果用系统pip安装的话位置是在&lt;code>/usr/local/lib/python2.7/dist-packages/powerline/config_files&lt;/code>下），在用户配置目录下&lt;code>~/.config/powerline&lt;/code>新建对应的配置文件，然后修改相应的条目即可自定义配置了～比较实用的一项修改是&lt;a class="link" href="https://github.com/powerline/powerline/issues/186#issuecomment-247810572" target="_blank" rel="noopener"
>将shell的默认theme改为&lt;code>default_leftonly&lt;/code>&lt;/a>，不增加这个改动的话不会有git状态的显示。。（并不知道是什么原理）&lt;/p>
&lt;p>如果使用原生Ubuntu或者VSCode内置terminal的话还可能会遇到提示符乱码的原因，这是由于powerline使用了非常规的符号，因此需要安装额外的字体。一般会选择安装&lt;a class="link" href="http://nerdfonts.com/" target="_blank" rel="noopener"
>NerdFont&lt;/a>，这是一系列打上符号补丁的字体，其中我个人比较喜欢的字体是&lt;code>DejaVu Mono Nerd&lt;/code>～这些字体还可以在&lt;a class="link" href="https://app.programmingfonts.org/" target="_blank" rel="noopener"
>programmingfonts&lt;/a>在线预览，挑选喜欢的后将Terminal默认字体更改即可。（注：ubuntu下的查看字体列表命令是&lt;code>fc-list&lt;/code>）&lt;/p>
&lt;h2 id="tmux安装及美化">tmux安装及美化&lt;/h2>
&lt;p>tmux是非常著名的Terminal Multiplexer，也就是终端多开程序。很多命令行模拟器其实已经支持多标签页了，如gnome terminal和Konsole，多开的功能其实也已经得到满足了。（顺带一题，ubuntu下新开terminal窗口的默认快捷键是&lt;kbd>Ctrl&lt;/kbd>+&lt;kbd>Alt&lt;/kbd>+T，新开标签页的默认快捷键是&lt;kbd>Ctrl&lt;/kbd>+&lt;kbd>Shift&lt;/kbd>+T。）。但还需要tmux是因为需要tmux的session管理功能，这个对远程访问的时候非常有用。有时希望在服务器远端跑一个训练，开上以后就不想管了，那这时如果使用ssh的话就得一直把远程的session开着，或者运行命令后移到后台，但这时停止程序就蛋疼了。另外如果想远程开几个terminal的话也很麻烦，要开好几个ssh的窗口。有了tmux就简单了，你可以用tmux多开然后一次性detach多个session，之后再attach回来进行管理，tmux支持多个程序显示在同一个terminal里，也就不用开很多个ssh了！总之用上tmux后感觉还是很爽的，只不过tmux有一定的学习成本。&lt;/p>
&lt;p>tmux安装也很简单，ubuntu下的话直接使用&lt;code>apt&lt;/code>安装即可。另外还可以安装&lt;a class="link" href="https://github.com/tmuxinator/tmuxinator" target="_blank" rel="noopener"
>tmuxinator&lt;/a>来简化tmux的一些流程。上面用到的powershell也是支持tmux的，可以美化tmux的状态栏。具体安装方法&lt;a class="link" href="https://powerline.readthedocs.io/en/latest/usage/other.html#tmux-statusline" target="_blank" rel="noopener"
>参见powerline文档&lt;/a>。另外tmux的操作方法可以去搜cheatsheet～这也有&lt;a class="link" href="https://hackernoon.com/a-gentle-introduction-to-tmux-8d784c404340" target="_blank" rel="noopener"
>一篇博文介绍了tmux的基本操作&lt;/a>，可以参考～&lt;/p>
&lt;h2 id="历史记录搜索">历史记录搜索&lt;/h2>
&lt;p>著名的fish有个颇受称赞的功能是历史命令自动补全（见下图），在zsh里面也有对应的插件可以实现这个功能（&lt;a class="link" href="https://github.com/zsh-users/zsh-autosuggestions" target="_blank" rel="noopener"
>zsh-autosuggestions&lt;/a>）。但是bash由于比较辣鸡，无法支持这样的功能，因此只能另寻它法了。。
&lt;img src="https://spin.atomicobject.com/wp-content/uploads/20170512131543/fish-history.gif"
loading="lazy"
alt="fish autosuggestion"
>&lt;/p>
&lt;p>比较有名的方法是使用一个模糊搜索的软件&lt;a class="link" href="https://github.com/junegunn/fzf" target="_blank" rel="noopener"
>&lt;strong>fzf&lt;/strong>&lt;/a>。这个软件提供文件、程序和命令历史的搜索，有点类似于windows下的Listary。如果配置在shell中的话可以在按下快捷键后出现一个搜索框，搜索历史命令。这个虽然没有fish的自动补全好用，但是也非常方便了～安装fzf推荐通过&lt;a class="link" href="https://github.com/junegunn/fzf#using-git" target="_blank" rel="noopener"
>文档中的方法使用git安装&lt;/a>。安装过程中会提示你是否绑定终端快捷键，选择yes后在终端按下&lt;kbd>Ctrl&lt;/kbd>+&lt;kbd>R&lt;/kbd>就可以弹出搜索框了，非常方便～如果直接运行fzf命令的话就会进入完整的搜索界面，可以搜索文件，具体的使用方法还是参考官方文档了～&lt;/p>
&lt;h2 id="powershell美化">Powershell美化&lt;/h2>
&lt;p>由于Powershell不是传统的sh体系，因此目前powerline还没有官方支持powershell。这里先mark几个博客，设置好了再更新上来～&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/JanDeDobbeleer/oh-my-posh" target="_blank" rel="noopener"
>https://github.com/JanDeDobbeleer/oh-my-posh&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://blog.walterlv.com/post/beautify-powershell-like-zsh.html#%E5%AE%89%E8%A3%85-oh-my-posh" target="_blank" rel="noopener"
>https://blog.walterlv.com/post/beautify-powershell-like-zsh.html#%E5%AE%89%E8%A3%85-oh-my-posh&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://gist.github.com/jchandra74/5b0c94385175c7a8d1cb39bc5157365e" target="_blank" rel="noopener"
>https://gist.github.com/jchandra74/5b0c94385175c7a8d1cb39bc5157365e&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://dev.to/myleftshoe/comment/8b58" target="_blank" rel="noopener"
>https://dev.to/myleftshoe/comment/8b58&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.reddit.com/r/archlinux/comments/45lkyj/is_new_always_better_urxvt_vs_xterm_tmux_vs/" target="_blank" rel="noopener"
>https://www.reddit.com/r/archlinux/comments/45lkyj/is_new_always_better_urxvt_vs_xterm_tmux_vs/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>矩阵代数 — Matrix Algebra</title><link>https://zyxin.xyz/blog/2019-06/MatrixAlgebra/</link><pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2019-06/MatrixAlgebra/</guid><description>&lt;p>在学习线性系统以及SLAM的过程中碰到了很多矩阵的求导与积分运算，但是几乎没有系统地学习过这些知识。矩阵可以构成环，因此也有很多运算性质和推广。最近大佬发给我一本《Matrix Cookbook》，非常系统地列举了进阶矩阵运算的法则，这里贴在博客上以供参考～&lt;/p>
&lt;h2 id="目录">目录&lt;/h2>
&lt;ol>
&lt;li>基础内容&lt;/li>
&lt;li>求导&lt;/li>
&lt;li>逆&lt;/li>
&lt;li>复矩阵&lt;/li>
&lt;li>求解与分解&lt;/li>
&lt;li>统计与概率&lt;/li>
&lt;li>多元概率分布&lt;/li>
&lt;li>高斯&lt;/li>
&lt;li>特殊矩阵&lt;/li>
&lt;li>函数与运算符&lt;/li>
&lt;/ol>
&lt;h2 id="来源">来源&lt;/h2>
&lt;p>这本书可以&lt;a class="link" href="http://www2.imm.dtu.dk/pubdb/views/publication_details.php?id=3274" target="_blank" rel="noopener"
>Technical University of Denmark资料网站下到&lt;/a>。如果链接失效了，&lt;a class="link" href="https://zyxin.xyz/blog/blog/static/doc/matrixcookbook.pdf" >可以直接从此处下载&lt;/a>。&lt;/p></description></item><item><title>转投Linux发行版</title><link>https://zyxin.xyz/blog/2019-04/LinuxDistroSelection/</link><pubDate>Fri, 26 Apr 2019 15:22:02 +0000</pubDate><guid>https://zyxin.xyz/blog/2019-04/LinuxDistroSelection/</guid><description>&lt;p>由于最近工作一直在使用ROS，因此也一直在用Ubuntu。之前为了稳定性使用的是Ubuntu 16.04 LTS，而这个版本默认的桌面环境是Unity，实在是不好使，它也颇为人诟病。后来尝试了Ubuntu 18.04 LTS安装ROS Melodic，发现ROS也挺稳定的，因此18.04也用了一段时间，但是最后还是觉得不太爽，于是最终还是决定好好体验一下各种Linux选一个自己顺手的。&lt;/p>
&lt;blockquote>
&lt;p>这篇博客里不会贴系统的截图，因为这些在网上都可以找到，而且桌面的好看与否很大程度上取决于个人的喜好和配置结果。最好的比较方法还是自己装一个系统尝试一下&lt;/p>
&lt;/blockquote>
&lt;p>至于如何尝试linux，我在Windows中使用的是Hyper-V。可以非常方便地安装各种镜像，动态分配资源，最方便的是vhdx硬盘格式可以直接mount到宿主机里。Hyper-V使用一些性能较差的Linux桌面环境时会比较卡，这个时候可以&lt;a class="link" href="https://docs.microsoft.com/en-us/windows-server/remote/remote-desktop-services/rds-remotefx-vgpu" target="_blank" rel="noopener"
>开启RemoteFX GPU（参考官方说明）&lt;/a>。注意在Win10 1809之后，Hyper-V管理器界面不提供RemoteFX的开关了，需要用Powershell命令手动开启。&lt;/p>
&lt;h2 id="linux-distro">Linux Distro&lt;/h2>
&lt;p>所谓的Linux发行版，对应的是一个专有的英文单词distro。个人理解，Linux Distro就是一套Linux Kernel加上外围一些必要的软件包。之前我一直不理解发行版的意思，直到学会了Python使用上Anaconda之后，才知道发行版指的就是核心程序+预装的全家桶，这个全家桶通常包含包管理器（Package manager，简称PM。如Ubuntu的apt、Anaconda的conda）、内置软件（如Linux桌面环境、Anaconda预装的Scipy）以及一套系统逻辑。&lt;/p>
&lt;p>Linux发行版中很重要的一点便是系统的PM，这个管理器还决定了系统的更新逻辑。而不同发行版之间最大的区别，在我看来就是PM（以及软件仓库repository），因此PM的特性与相性最终会决定我是否选择这套发行版。&lt;/p>
&lt;p>常见的桌面Linux发行版有如下这些，我可以大概描述一下他们的特点（以PM为线索）：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>apt&lt;/strong>: Debian、Ubuntu系
&lt;ul>
&lt;li>依赖树严格，能保证软件之间正确的依赖关系&lt;/li>
&lt;li>Debian和Ubuntu的软件库数量庞大，但是确实由于保守的包更新政策，它们的包比较老&lt;/li>
&lt;li>apt的命令行使用非常直观&lt;/li>
&lt;li>在国内，默认的仓库源下载很慢，但是国内有很多开源镜像可以使用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>pacman&lt;/strong>: Arch
&lt;ul>
&lt;li>滚动更新是Arch最大的特点&lt;/li>
&lt;li>pacman没有严格的依赖树，而是类似于快照的概念，更新软件时整个软件池都会进行变动（个人理解）&lt;/li>
&lt;li>pacman命令行参数是字母表，不便于记忆&lt;/li>
&lt;li>Arch的官方软件仓库中软件较少，但是Arch有庞大的AUR体系，因此能够尝试到很多小软件和新版本，不过也要承担小白鼠的风险&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>yum/dnf&lt;/strong>: Fedora、CentOS、Redhat等
&lt;ul>
&lt;li>使用方法和apt相似&lt;/li>
&lt;li>软件仓库中的数量没有Debian和Arch多&lt;/li>
&lt;li>包管理方便，中规中据，而且下载速度不慢&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>zypper&lt;/strong>: OpenSUSE
&lt;ul>
&lt;li>由于OpenSUSE是真的比较小众，因此我也没有去尝试，就不妄自评论了&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>emerge&lt;/strong>: Gentoo
&lt;ul>
&lt;li>同上，没尝试过
严格来说，上面的这些都是包分发器，而安装软件的是包安装器（dpkg,rpm等），不过前者才是我们最经常打交道的。关于这些PM以及其软件管理哲学的分析，可以&lt;a class="link" href="https://www.zhihu.com/question/40297380" target="_blank" rel="noopener"
>参见这个知乎问题&lt;/a>。而关于这些包管理器的一篇介绍可以&lt;a class="link" href="https://linux.cn/article-9931-1.html" target="_blank" rel="noopener"
>参见这篇博文&lt;/a>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Arch Linux的wiki上也有一篇&lt;a class="link" href="https://wiki.archlinux.org/index.php/Arch_compared_to_other_distributions" target="_blank" rel="noopener"
>关于发行版之间的对比&lt;/a>，这里我要吹一下Arch的wiki真的良心，还有中文版！
&lt;a class="link" href="https://distrowatch.com/" target="_blank" rel="noopener"
>DistroWatch&lt;/a>是一个收集了大量Linux distro的网站，可以在上面看一下流行度排名和一些评测
Linux各发行版的演化历史可以参见&lt;a class="link" href="https://commons.wikimedia.org/wiki/File:Linux_Distribution_Timeline.svg" target="_blank" rel="noopener"
>Wiki的历史图&lt;/a>或者&lt;a class="link" href="https://distrowatch.com/dwres.php?resource=family-tree" target="_blank" rel="noopener"
>DistroWatch的图表&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="桌面环境">桌面环境&lt;/h2>
&lt;p>桌面环境是最终选择哪一个发行版的决定者。选择Ubuntu、Arch等只能给你决定好大方向，而最后在众多系统中作出选择的标准之一便是桌面环境。常见的桌面环境有Gnome、KDE Plasma、XFCE、LXQt等。现在众多的发行版的主要区别其实也就是PM和桌面环境的区别：&lt;/p>
&lt;ul>
&lt;li>Ubuntu 16.04: Ubuntu + Unity&lt;/li>
&lt;li>Ubuntu 18.04: Ubuntu + Gnome&lt;/li>
&lt;li>KUbuntu: Ubuntu + KDE&lt;/li>
&lt;li>XUbuntu: Ubuntu + XFCE&lt;/li>
&lt;li>MX Linux: Debian + XFCE&lt;/li>
&lt;li>Linux Mint: Ubuntu + Cinammon/Gnome&lt;/li>
&lt;li>Manjaro: Arch + KDE&lt;/li>
&lt;li>Deepin: Debian + Deepin&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>而这些桌面环境的特点，个人感觉如下：&lt;/p>
&lt;ul>
&lt;li>Gnome(w/ gdm): 基于GTK开发，默认界面比较好看，但是灵活程度不够。虽然有Gnome Tweak，但是插件很少&lt;/li>
&lt;li>KDE Plasma(w/ sddm): 基于QT开发，非常灵活，而且Plasma5默认就非常好看！占用资源也比Gnome小。&lt;/li>
&lt;li>Unity(w/ lightdm): 别说了，换吧&lt;/li>
&lt;li>Xfce: 听人说很不错，但是我认为比较丑&lt;/li>
&lt;li>LXQt(w/ sddm): 适合低配环境，也不太好看&lt;/li>
&lt;/ul>
&lt;h2 id="个人选择">个人选择&lt;/h2>
&lt;p>&lt;strong>Arch&lt;/strong>?: 在我了解Linux distro的过程中，在各种论坛、知乎问题上都有人安利Arch linux。Arch虽好，而且可以体验更新的快感，但是我本身没有太多的时间去折腾系统，或者追寻潮流，因此还是更倾向于Debian体系。同时由于我有使用ROS的需求，因此Ubuntu还是我的第一选择。&lt;/p>
&lt;p>&lt;strong>商业主导 or 社区主导&lt;/strong>: 有人说Ubuntu由于是Canonical家的产品，会有商业倾向，服从公司利益。这个情况确实存在，但是就体验上来说和Arch、Fedora等等社区主导的系统并没有太多区别，因此这个并不会是决定我选择的因素。&lt;/p>
&lt;p>&lt;strong>Gnome or KDE&lt;/strong>: 相比于GTK，我更喜欢Qt这套框架。另外KDE也有别人上传的很多插件和桌面（在KDE store上)，非常棒，因此我最后选择的是KDE～&lt;/p>
&lt;p>综上所述，我最后决定使用KDE Neon作为平常使用的发行版，双系统安装Ubuntu 18.04作为开发系统。之后会写一篇博客来介绍KDE的折腾记录～&lt;/p></description></item><item><title>给Linux（Ubuntu 16.04/18.04）配置远程访问环境</title><link>https://zyxin.xyz/blog/2019-04/LinuxRemoteSetup/</link><pubDate>Tue, 02 Apr 2019 20:47:07 +0000</pubDate><guid>https://zyxin.xyz/blog/2019-04/LinuxRemoteSetup/</guid><description>&lt;p>年后给实验室装了一台小服务器，安装了Ubuntu系统，这篇博客记录一下给Ubuntu配置远程访问的设置过程。&lt;/p>
&lt;blockquote>
&lt;p>虽然服务器是一台GPU服务器，但是出于简便考虑没有在服务器上安装虚拟化环境，有需要安装LXD或者Docker的朋友可以参考这几篇博客：&lt;a class="link" href="https://blog.csdn.net/weixin_42749767/article/details/83720831" target="_blank" rel="noopener"
>实验室GPU服务器共享方案&lt;/a>、&lt;a class="link" href="https://feelncut.com/2018/05/03/145.html" target="_blank" rel="noopener"
>搭建多人共用的GPU服务器&lt;/a>、&lt;a class="link" href="https://zhuanlan.zhihu.com/p/25710517" target="_blank" rel="noopener"
>为实验室建立公用GPU服务器&lt;/a>、&lt;a class="link" href="https://shenxiaohai.me/2018/12/03/gpu-server-lab/" target="_blank" rel="noopener"
>搭建实验室公共GPU服务器&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="ssh设置">SSH设置&lt;/h2>
&lt;p>远程连接最方便并且最稳定的就是SSH了，安装好SSH之后就基本可以远程操作服务器。SSH的安装非常简单，Ubuntu下通过apt安装即可：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo apt install openssh-server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>安装完重启后，SSH服务就会自动运行了。客户端方面，Ubuntu默认提供SSH支持，而Windows在1809之后也内置了OpenSSH，在系统附加功能中打开开关后，通过cmd即可调用。如果系统版本较老则可以使用XShell。&lt;/p>
&lt;h3 id="sftp设置---利用rclone">SFTP设置 - 利用rclone&lt;/h3>
&lt;p>上面安装命令会顺带安装上SFTP客户端。SFTP可以看作加密的FTP协议，可以用来远程访问服务器的文件。SFTP现在已经受到广泛的支持，例如Android上的Solid Explorer就内置了SFTP访问功能。&lt;/p>
&lt;p>这里介绍一个可以把远程文件挂载到本地的软件——rclone。安装rclone可以从官网下载二进制文件直接拷贝安装，或者下载打包好的deb文件，也可以使用snap进行安装。安装完成之后使用&lt;code>rclone config&lt;/code>添加SFTP服务器，然后就可以&lt;code>rclone mount&lt;/code>进行挂载。此外还可以使用RcloneBrowser等GUI进行更加直接的操作。&lt;/p>
&lt;blockquote>
&lt;p>Tip: 如果你是在Ubuntu上安装RcloneBrowser的话，可以通过修改&lt;code>/usr/share/applications/rclone-browser.desktop&lt;/code>文件来修改图标。（原来的图标实在太丑了）&lt;/p>
&lt;/blockquote>
&lt;h2 id="远程桌面设置">远程桌面设置&lt;/h2>
&lt;p>远程桌面的设置就比较麻烦了，这里的远程桌面服务选择xrdp，关于xrdp，vnc等等服务的比较网上都有。由于最开始安装的是Gnome Ubuntu16.04，因此遇到了很多坑，最后配完远程桌面时显卡驱动崩了，因此最后换到了Ubuntu18.04。因此如果需要远程桌面的朋友可以考虑升级到Ubuntu18.04。&lt;/p>
&lt;p>为了使用上Gnome桌面，最初参考的是一篇&lt;a class="link" href="https://www.hiroom2.com/2016/05/24/ubuntu-16-04-remote-connect-to-gnome-classic-desktop-with-vnc-xrdp/" target="_blank" rel="noopener"
>在Ubuntu16.04上配置xrdp访问Unity桌面的博客&lt;/a>，最后安装完确实是可以完成访问的，并且如果碰到远程登陆之后提示需要新建color profile的话&lt;a class="link" href="http://c-nergy.be/blog/?p=10372" target="_blank" rel="noopener"
>可以通过这个博客解决&lt;/a>。但最后由于安装完xserver-xorg后显卡驱动崩了，换用了18.04。&lt;/p>
&lt;p>在18.04下安装xrdp就简单多了，xrdp版本较新，也不需要安装tigervnc。具体教程还是&lt;a class="link" href="https://www.hiroom2.com/2016/05/24/ubuntu-16-04-remote-connect-to-gnome-classic-desktop-with-vnc-xrdp/" target="_blank" rel="noopener"
>参考了这篇博客&lt;/a>，大概步骤就是&lt;/p>
&lt;ol>
&lt;li>安装&lt;code>xrdp&lt;/code>和&lt;code>xserver-xorg&lt;/code>。需要先安装的&lt;code>xserver-xorg&lt;/code>的原因参见&lt;a class="link" href="https://c-nergy.be/blog/?p=13390" target="_blank" rel="noopener"
>这篇博客&lt;/a>。
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">apt install xserver-xorg-core xsrever-xorg-input-all
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">apt install xrdp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>如果你安装了Nvidia驱动的话NV还提供定制版的&lt;code>nvidia-xserver-xorg&lt;/code>，也可以通过apt直接安装。安装NV驱动和安装xrdp最好连续进行，避免安装完其他东西之后回头来发现要重装（亲身教训= =）&lt;/p>
&lt;/blockquote>
&lt;ol start="2">
&lt;li>添加&lt;code>echo [session] &amp;gt; ~/.xsession&lt;/code>到&lt;code>/etc/xrdp/startwm.sh&lt;/code>文件里。这里的&lt;code>[session]&lt;/code>内容需要从&lt;code>/usr/share/xsessions&lt;/code>里的桌面环境文件中拷贝出来，例如如果想远程桌面环境运行Gnome3，那么就把&lt;code>[session]&lt;/code>替换成&lt;code>gnome-session --session=gnome&lt;/code>（这行命令就是从&lt;code>/usr/share/xsessions/gnome.desktop&lt;/code>文件中提取出来的）&lt;/li>
&lt;li>修复一些小问题。例如上文提到的color profile问题可以通过&lt;a class="link" href="http://c-nergy.be/blog/?p=12073" target="_blank" rel="noopener"
>这篇很详细的博客提到的方法进行解决&lt;/a>。&lt;/li>
&lt;/ol>
&lt;p>然后在使用xrdp的时候你可能会碰到一些问题，这里记录一些常见问题的解决方法&lt;/p>
&lt;ul>
&lt;li>远程用户在home路径下会挂在一个叫&lt;code>thinclient_drives&lt;/code>的文件夹: 在&lt;code>/etc/xrdp/sesman.ini&lt;/code>中的&lt;code>Chansrv&lt;/code>部分里将FuseMountName改为别的名字（例如&lt;code>.thinclient_drives&lt;/code>）。这个文件夹的作用是实现远程文件拷贝的功能。&lt;/li>
&lt;/ul>
&lt;h2 id="x11-forwarding">X11 Forwarding&lt;/h2>
&lt;p>X11转发是Linux的一种实现远程图形界面的方法，它基于X11窗口协议，类似于Windows对远程GDI的实现。设置好X11以后便可以在ssh中运行远程带有图形界面的程序了～它相比xrdp更好配置，但是使用范围没有xrdp广，因为它只支持程序级别的图形界面，而不是桌面级别的。其设置方法也很简单，在服务器端的&lt;code>/etc/ssh/sshd_config&lt;/code>中将&lt;code>X11Forwarding&lt;/code>选项设为yes即可。在客户端则取决于平台，在Linux平台由于系统界面就是基于X11的（Wayland除外），因此直接使用&lt;code>ssh -X&lt;/code>命令连接服务器就能支持X11转发，而在Windows上则需要额外安装X11服务器，著名的有Vcxsrv, X410等。这里推荐使用&lt;code>MobaXTerm&lt;/code>，这个SSH客户端自带X11服务器，开箱可用，并且性能不错！&lt;/p>
&lt;h2 id="静态ip">静态IP&lt;/h2>
&lt;p>如果想要稳定地连接服务器，还需要给服务器配置静态IP。由于我是在大学校园内，静态IP需要申请。我们的网管要求关闭SSH的远程root登陆，以及关闭不必要的服务，此外还推荐服务器用户使用rsakey登陆SSH。这些要求有利于保护服务器安全，因此也推荐在有需要的情况下完成这些操作。&lt;/p>
&lt;hr>
&lt;p>以上就是给Ubuntu服务器配置远程桌面的主要步骤，步骤不多但是比较花时间。文中提到的几个博客的网站有提供不少的Linux设置教程，可以供读者参考。&lt;/p>
&lt;blockquote>
&lt;p>其他参考阅读：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.cnblogs.com/nrm1/p/10219269.html" target="_blank" rel="noopener"
>含Nvidia驱动的远程环境配置&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="http://www.cnblogs.com/ilanni/p/4587171.html" target="_blank" rel="noopener"
>一些xrdp原理的解释&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Windows远程桌面设置</title><link>https://zyxin.xyz/blog/2019-01/WindowsRemoteDesktop/</link><pubDate>Mon, 28 Jan 2019 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2019-01/WindowsRemoteDesktop/</guid><description>&lt;p>搭了一台主机之后由于随身带的Surface性能不够，自然产生了远程桌面的需求。这也是便携办公的一种不错的解决方法：随身带着一个上网本，需要办公时远程连接到主机即可~Windows平台的远程桌面软件除了Windows自带的以外还有&lt;a class="link" href="https://chrome.google.com/webstore/detail/chrome-remote-desktop/gbchcmhmhahfdphkhkmpfmihenigjmpp" target="_blank" rel="noopener"
>Chrome远程桌面&lt;/a>、&lt;a class="link" href="https://www.teamviewer.com" target="_blank" rel="noopener"
>TeamViewer&lt;/a>等软件。不过Windows远程体验最好的还是系统内置的客户端~本文介绍一下Windows自带远程桌面的配置与使用。&lt;/p>
&lt;h2 id="远程桌面的使用">远程桌面的使用&lt;/h2>
&lt;p>先介绍一下远程桌面的使用，现在假设你已经有一台设置好的远程主机。Windows很早开始就有系统内置的远程桌面客户端，在开始菜单中搜索“Remote Desktop Connection”或者“远程桌面连接”即可。在弹出的窗口中，“计算机”一栏填写远程主机的IP地址或者域名。如果出现连接不上的情况可以先Ping一下远程主机检查网络问题。&lt;/p>
&lt;p>Windows远程桌面不仅支持Windows平台，还支持其他主流平台（MacOS）以及移动平台（iOS、Android）等等，在相应的引用商店搜索“Microsoft Remote Desktop”引用即可，连接方式也很简单，输入地址或域名，在必要的情况下输入用户名密码即可。连接上远程桌面后，系统分辨率和DPI会自动调整，你还可以在设置中将声卡、USB等设备投射到远程桌面上。&lt;/p>
&lt;h2 id="远程桌面服务的搭设">远程桌面服务的搭设&lt;/h2>
&lt;p>远程桌面的使用非常简单，但是服务器的搭建就没那么容易了。基本原理是主机需要向客户端开放远程桌面协议（Remote Desktop Protocal）所需的3389接口，并且在本地开启远程桌面服务，然后通过RDP进行连接。因此设置主要有两个步骤：&lt;/p>
&lt;ul>
&lt;li>打开服务：在Windows10中只需在设置-&amp;gt;系统-&amp;gt;远程桌面选项卡中开启远程连接的开关即可，而在早期Windows中可能需要通过本地策略管理器开启远程连接的服务。&lt;/li>
&lt;li>端口设置：在打开服务之后主机的3389端口就已经开放，但是要使得客户端能连接到主机还需要完成路由设置。如果你的主机是在IPv4局域网中，而你想通过外网远程连接这个主机，你需要在局域网网关上设置端口转发（NAT Forwarding），将外部的3389端口映射到主机的3389端口。为了方便端口转发，你可能还需要给主机设置静态局域网IP，以避免重新设置转发的必要~
在完成以上两步后就可以尝试通过客户端连接主机了~&lt;/li>
&lt;/ul>
&lt;h2 id="多用户远程桌面">多用户远程桌面&lt;/h2>
&lt;p>Windows个人版本系统默认只支持单一用户与单一会话，意思是用户A与用户B不能同时远程连接这个主机。多用户的支持名义上只有Windows Server才提供，但其实Windows内核是支持多用户的，只是被锁住了，因此就有相应的破解方法啦~&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/stascorp/rdpwrap" target="_blank" rel="noopener"
>Github上的开源工具RDPWrap&lt;/a>可以激活RDP的多用户多会话支持，使用也非常简单，下载Release压缩包之后运行&lt;code>install.bat&lt;/code>即可安装，其他文件的使用方法也有在Readme中有描述~&lt;/p>
&lt;hr>
&lt;p>以上便是Windows远程桌面的设置方法了~有两点小提醒：&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>3389端口曾经是远程攻击的重要缺口之一，虽然目前Windows的防御做的已经很好了，但如果不适用远程服务的时候还是把3389端口关闭比较保险。&lt;/li>
&lt;li>RDPWarp本身是不被微软承认的，虽然&lt;a class="link" href="https://github.com/stascorp/rdpwrap/issues/26" target="_blank" rel="noopener"
>貌似它本身没有违反Windows的使用条例&lt;/a>，但仍建议不要在商用服务器上使用。&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;blockquote>
&lt;h2 id="参考资料">参考资料：&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://docs.microsoft.com/en-us/windows-server/remote/remote-desktop-services/clients/windows" target="_blank" rel="noopener"
>微软官方说明&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Cython中的类型系统</title><link>https://zyxin.xyz/blog/2018-12/CythonTypes/</link><pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2018-12/CythonTypes/</guid><description>&lt;p>由于最近的几个项目都有接触到Cython的使用，也积累了一些Cython的经验，于是决定把&lt;img src="https://zyxin.xyz/blog/blog/https://zyxin.xyz/blog/2017-12/CythonIntro/"
loading="lazy"
alt="上次的介绍"
>续上（蜜汁发现刚好过了一年。。），将Cython的一些用法记录下来。这一些文章可以作为一些学习的参考，不过kick-start的话还是去看看&lt;a class="link" href="https://zyxin.xyz/blog/2017-12/CythonIntro/" >之前的博文&lt;/a>以及&lt;a class="link" href="http://docs.cython.org/en/latest/src/quickstart/index.html" target="_blank" rel="noopener"
>官方的例子&lt;/a>吧~&lt;/p>
&lt;h2 id="cython对cc内置类型的支持">Cython对C/C++内置类型的支持&lt;/h2>
&lt;p>Cython在类型设置上和C/C++是十分相似的，不仅默认支持基本C类型&lt;code>int&lt;/code>、&lt;code>float&lt;/code>、&lt;code>unsigned long&lt;/code>等等以及他们的指针类型，还支持C的&lt;code>struct&lt;/code>、&lt;code>union&lt;/code>、&lt;code>enum&lt;/code>以及C++的&lt;code>cppclass&lt;/code>（即C++中的类）。需要注意的是在Cython中，定义C/C++对象都需要使用cdef关键字，或者&lt;a class="link" href="https://cython.readthedocs.io/en/latest/src/userguide/early_binding_for_speed.html#early-binding-for-speed" target="_blank" rel="noopener"
>使用cpdef关键字定义一个Python封装过的对象&lt;/a>。另外Cython还通过&lt;code>ctypedef&lt;/code>支持C/C++形式的typedef。下面是一些定义变量的例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="nb">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="c1"># i,j,k是C中的int类型&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="nb">float&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">g&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">42&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">h&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">struct&lt;/span> &lt;span class="n">Grail&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># C形式的结构体&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">int&lt;/span> &lt;span class="n">age&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">float&lt;/span> &lt;span class="n">volume&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">Grail&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">gp&lt;/span> &lt;span class="c1"># 结构体指针，注意不是cdef struct Grail&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">enum&lt;/span> &lt;span class="n">CheeseState&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># C++形式的枚举类&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">hard&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">soft&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">runny&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">enum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># C形式的匿名枚举&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">tons_of_spam&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;ul>
&lt;li>&lt;code>size_t&lt;/code>和&lt;code>Py_ssize_t&lt;/code>也是受Cython语言支持的类型。如果想使用&lt;code>uint32_t&lt;/code>形式的类型，则需要添加&lt;code>from libc.stdint cimport uint32_t&lt;/code>形式的语句。&lt;/li>
&lt;li>这些变量的作用域定义与Python是相同的，但是cdef定义的对象是不能import到Python代码中的，而cpdef定义的对象则可以。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="cython对python内置类型的支持">Cython对Python内置类型的支持&lt;/h2>
&lt;p>尽管Cython兼容Python的语法，但是我们还可以通过cdef来使得Python对象具有静态类型，以提高运行效率。Cython在除了支持Python内置的&lt;code>list&lt;/code>、&lt;code>dict&lt;/code>、&lt;code>tuple&lt;/code>外，还支持直接声明Python的基本类型，这需要通过&lt;code>from cpython cimport int&lt;/code>形式的语句来实现。此外有一类特殊的类型是&lt;code>ctuple&lt;/code>，能够直接定义tuple中元素的类型与数量，有些类似于C# 7中的语法，例子如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="nb">dict&lt;/span> &lt;span class="n">sd&lt;/span> &lt;span class="c1"># 直接定义内置类型，实际是PyDict对象&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">cpython&lt;/span> &lt;span class="n">cimport&lt;/span> &lt;span class="nb">int&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">pyint&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">pyint&lt;/span> &lt;span class="n">big_a&lt;/span> &lt;span class="c1"># PyInt对象&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">libcpp&lt;/span> &lt;span class="n">cimport&lt;/span> &lt;span class="nb">bool&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">unsigned&lt;/span> &lt;span class="n">long&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">table&lt;/span> &lt;span class="c1"># ctuple对象&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="cython的类型映射">Cython的类型映射&lt;/h2>
&lt;p>在将Python的基本类型对象与C/C++的基本类型对象进行相互赋值的过程中，Cython会进行自动的类型转换，可识别的转换规则有：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>C types&lt;/th>
&lt;th>From Python types&lt;/th>
&lt;th>To Python types&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>[unsigned] char, [unsigned] short, int, long&lt;/td>
&lt;td>int, long&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>unsigned int, unsigned long, [unsigned] long long&lt;/td>
&lt;td>int, long&lt;/td>
&lt;td>long&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>float, double, long double&lt;/td>
&lt;td>int, long, float&lt;/td>
&lt;td>float&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>char*&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/td>
&lt;td>str/bytes&lt;/td>
&lt;td>str/bytes&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C array&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/td>
&lt;td>iterable&lt;/td>
&lt;td>list&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>struct&lt;/td>
&lt;td>union&lt;/td>
&lt;td>dict&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>如果自动类型转换不被支持、或者自动转换类型不是所需类型的话，还可以使用强制类型转换，语法是在变量前加&lt;code>&amp;lt;type-name&amp;gt;&lt;/code>，例如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">cpython.ref&lt;/span> &lt;span class="n">cimport&lt;/span> &lt;span class="n">PyObject&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">extern&lt;/span> &lt;span class="kn">from&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctypedef&lt;/span> &lt;span class="n">Py_ssize_t&lt;/span> &lt;span class="n">Py_intptr_t&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">python_string&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;foo&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">void&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="n">python_string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">Py_intptr_t&lt;/span> &lt;span class="n">adress_in_c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Py_intptr_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">ptr&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>如果使用&lt;code>&amp;lt;type-name?&amp;gt;&lt;/code>形式则会在转换时执行运行时检查&lt;/p>
&lt;/blockquote>
&lt;h2 id="cython中的模板">Cython中的模板&lt;/h2>
&lt;p>Cython还支持C++中的模板，语法是&lt;code>class_name[template_args]&lt;/code>，不过模板参数目前只支持类型参数，因此更像是C#中的泛型。对模板的支持不仅是可以声明模板类，还可以支持绑定已有C++的模板类，这也是Cython区别于Boost.Python、Pybind11等C++端绑定库的重要一点。由于后者在编译期无法了解Python代码的使用需求，因此只能在编译器展开模板（Instantiation），而Cython则可以通过&lt;code>.pxd&lt;/code>头文件保留模板的格式，在引用该库需要编译时再展开。&lt;/p>
&lt;p>模板的应用例子如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">libcpp.vector&lt;/span> &lt;span class="n">cimport&lt;/span> &lt;span class="n">vector&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="n">vector&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">vect&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cdef&lt;/span> &lt;span class="nb">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vect&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>&lt;strong>参考内容：&lt;/strong>
&lt;a class="link" href="https://cython.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener"
>Cython文档&lt;/a>
&lt;a class="link" href="http://cython.readthedocs.io/en/latest/src/userguide/language_basics.html" target="_blank" rel="noopener"
>Cython文档 - Language Basics&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Python2中转换成str，Python3中转换成bytes&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>char数组除外&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>My First Rig （Ryzen 2700 + GTX 1070 Ti）</title><link>https://zyxin.xyz/blog/2018-11/BrandNewRig/</link><pubDate>Fri, 09 Nov 2018 23:10:47 +0000</pubDate><guid>https://zyxin.xyz/blog/2018-11/BrandNewRig/</guid><description>&lt;p>自从小时候我爸往家里买了一台式机，我就一直梦想着哪天自己能按照自己的喜好组一个狂拽炫酷掉渣天的PC，这次这个梦想终于实现了&lt;del>一半（毕竟还是budget）&lt;/del>。激动地赶紧写下这篇博客记录一下整个组装的过程，组装好的桌面效果就如下图啦~&lt;/p>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2018-11/BrandNewRig/Desktop.jpg"
width="4032"
height="3024"
loading="lazy"
alt="桌面布置"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>
&lt;img src="https://zyxin.xyz/blog/blog/2018-11/BrandNewRig/Case_Inside1.jpg"
width="6000"
height="4000"
loading="lazy"
alt="机箱内部"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>
&lt;img src="https://zyxin.xyz/blog/blog/2018-11/BrandNewRig/Case_Inside2.jpg"
width="6000"
height="4000"
loading="lazy"
alt="信仰灯"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>&lt;/p>
&lt;h2 id="选件httpspcpartpickercombrcvntw">&lt;a class="link" href="https://pcpartpicker.com/b/rCvnTW" target="_blank" rel="noopener"
>选件&lt;/a>&lt;/h2>
&lt;p>选件三十天，装机一小时。其实装电脑搭系统本身很简单，但是之前挑选零件却是最耗时的。在考虑到性能、预算、兼容性、扩展性和外观等因素选择各种零件是个十分耗时的过程。在这里推荐&lt;a class="link" href="https://pcpartpicker.com" target="_blank" rel="noopener"
>PCPartPicker网站&lt;/a>，可以通过筛选来选择各部件，而且还可以进行价格追踪，最关键的一点是可以帮你进行兼容性检查，这就省了很多事以及避免犯错导致的损失。另外，选择部件不要过于听信贴吧论坛上的言论，例如水冷就不一定是好于风冷，关于这些选择可以先看看&lt;a class="link" href="https://www.zhihu.com/question/35911743" target="_blank" rel="noopener"
>知乎这篇帖子&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>关于装机部件的兼容性主要要考虑一下几点&lt;/p>
&lt;ol>
&lt;li>主板芯片是否与CPU兼容&lt;/li>
&lt;li>各部件的电源接口是否与供电的接口兼容&lt;/li>
&lt;li>主板是否为各部件提供了足够的插槽和槽位间隙&lt;/li>
&lt;li>各部件在安装之后是否会产生物理干涉或者走线困难&lt;/li>
&lt;li>主板的扩展接口是否与机箱以及各部件的扩展接口兼容（如机箱IO接头、水冷泵、LED接口等）&lt;/li>
&lt;li>机箱大小是否与主板兼容，机箱厚度是否满足CPU散热和GPU板卡的空间需要&lt;/li>
&lt;li>各部件尽量选择同一厂家，以减少驱动安装的难度&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h3 id="cpu">CPU&lt;/h3>
&lt;p>桌面CPU目前主流选择是Intel、AMD二选一。用了这么多年的英特尔了，终于有机会用上我大农企的CPU了！在Ryzen系列处理器发布以后，农企终于要翻身了，AMD Yes！于是CPU就在性价比远超蓝厂的2代Ryzen里面选了。综合考虑性能和价格后选择的是&lt;em>AMD Ryzen 2700&lt;/em>，相比一直纠结的2600X，8核终归是有用的&lt;del>而且还带信仰灯哈哈哈&lt;/del>。虽然有想过买AMD的APU系列，这样还能&lt;a class="link" href="https://www.youtube.com/watch?v=_rxFxdvO3fQ&amp;amp;t=480s" target="_blank" rel="noopener"
>通过黑科技让N卡用上FreeSync&lt;/a>然后省下一大笔显示器的钱，但是由于目前出的APU性能都比较差，最后还是放弃了。&lt;/p>
&lt;blockquote>
&lt;p>CPU性能的比较可以参考&lt;a class="link" href="http://www.mydrivers.com/zhuanti/tianti/cpu/" target="_blank" rel="noopener"
>某驱动之家的CPU天梯榜&lt;/a>和&lt;a class="link" href="http://topic.expreview.com/CPU/" target="_blank" rel="noopener"
>超能网的CPU天梯榜&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="gpu">GPU&lt;/h3>
&lt;p>GPU的选择与CPU相似，NVIDIA、AMD二选一（不得不说农企还是厉害的）。由于CUDA目前没有一个真正可用的AMD替代品，因此只能选择英伟达的显卡了。老黄新推出的RTX系列显卡性能比10系列提升不大，RTX技术又属于战未来系列，只有新的Turing架构里的TensorCore吸引我。RTX2080和GTX1080的定位超出了预算，而同定位的RTX2070与GTX1070(Ti)相比，前者贵出了100刀，但明显的提升其实只有显存从GDDR5变成GDDR6了，实在是不划算。因此最后选择的是1070Ti，有8G显存的N卡中最便宜的一款。最后剁手的是打折购买的&lt;em>Gigabyte GeForce GTX 1070 Ti Gaming 8G&lt;/em>。&lt;/p>
&lt;blockquote>
&lt;p>GPU性能的比较可以参考&lt;a class="link" href="http://www.mydrivers.com/zhuanti/tianti/gpu/" target="_blank" rel="noopener"
>某驱动之家的GPU天梯榜&lt;/a>和&lt;a class="link" href="http://topic.expreview.com/GPU/" target="_blank" rel="noopener"
>超能网的GPU天梯榜&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="cpugpu散热">CPU/GPU散热&lt;/h3>
&lt;p>选择高性能的CPU时还要考虑CPU的散热，由于2700采用钎焊导热，加上平常使用不打算超频，附带的散热器应该还是能压住CPU的。不过为了以后超频的需求，还是看了一下CPU风扇，性能比较好的就是塔式散热器和水冷散热了。塔式散热器体积比较大，而且不是很美观，有条件的还是考虑上一体式水冷吧，或者有条件还有经验的可以上&lt;a class="link" href="https://www.zhihu.com/question/58428123/answer/156957151" target="_blank" rel="noopener"
>分体式水冷&lt;/a>，但是这就要注意水冷液的选择以及漏液问题了。此外风扇的选择都还要考虑一个要素，就是噪声大小，这方面水冷就非常优势了。&lt;/p>
&lt;p>对于GPU散热，一般来说使用自带的风扇就足够了，因为游戏显卡的风扇一般都比较多，只要不选择公版的方案一般都比较给力。如果在CPU散热上选择分体式水冷的话就可以考虑把GPU加进水冷循环了~不过这个方案实在太麻烦，因此就不额外处理GPU的散热了。&lt;/p>
&lt;h3 id="主板">主板&lt;/h3>
&lt;p>选好CPU后就可以选择主板了，主板的选择就非常多了，有很多参数可以调整。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>CPU兼容&lt;/strong>：由于选择了A家的CPU，那么主板的主控芯片自然也选择A家的了，考虑到CPU是2代Ryzen而且性能不差，因此决定用AMD的新款性能级别主板芯片B450来配Ryzen。（根据&lt;a class="link" href="https://www.amd.com/en/products/chipsets-am4" target="_blank" rel="noopener"
>AMD官网&lt;/a>，A320是Mainstream，B450是Performance，X470是Enthusiast）。
&lt;blockquote>
&lt;p>关于AMD主板的选择，&lt;a class="link" href="http://www.tomshardware.com/forum/id-3502839/am4-motherboard-amd-ryzen-cpu-specs-comparison-list.html" target="_blank" rel="noopener"
>TomsHardware上有大佬贴出了一个总结表格&lt;/a>，非常实用，在选择时可以参考&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>&lt;strong>IO配置&lt;/strong>：由于这台主机应该会用很久，因此还是要考虑扩展性，IO口的数量就不能少了。
&lt;ul>
&lt;li>内部接口—DIMM：内存条插槽，有2个或者4个即可，没有必要上8个&lt;/li>
&lt;li>内部接口—PCIe x16：可以插显卡，一条即可，两条可以给之后双卡做扩展
&lt;blockquote>
&lt;p>这里考虑的双卡是做深度学习用，SLI/Crossfire的性价比非常低。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>内部接口—PCIe x1：插网卡、声卡或者IO卡，至少要一个。&lt;/li>
&lt;li>内部接口—SATA3：由于需要把以前积攒的资源都存到本地，因此硬盘接口也不能少，4个以上比较合适&lt;/li>
&lt;li>内部接口—M.2：最近的高性能固态都采用NVMe了，因此另外还需要M.2接口来插NVMe固态。&lt;/li>
&lt;li>外部接口—VGA/HDMI/DVI/DP：由于不用集显，因此可以不需要显示器接口&lt;/li>
&lt;li>外部接口—RJ45：通用的网线接口，这个是必须的&lt;/li>
&lt;li>外部接口—TRRS：音频接口，至少支持耳机和话筒。由于之后肯定是要外接音频设备的，因此这个就无所谓了，不过最好有个SPDI/F的数字输出口。&lt;/li>
&lt;li>外部接口—USB：这个是最主要的需求了，数量越多越好，标准越新越好，最好能支持最新的USB3.1 Gen2（其实最新的是USB3.2，但是太新了以至于目前还没有真正投产）。另外，在接口形式上，常用的Type-A肯定是需要的，以后可能会需要的Type-C也可以有。&lt;/li>
&lt;li>外部接口—Legacy：不少主板上面还带着PS/2、COM等给老设备的接口，这个已经完全可以淘汰了，没有需求。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>尺寸&lt;/strong>：在给定足够的IO需求以后，尺寸就小不了了，主板型号从EATX、ATX、mATX到ITX等，满足这么多接口需求的话至少也是ATX主板了。由于打算把主机放在桌子底下，查了一下ATX机箱的高度没有问题，因此就选择ATX了。&lt;/li>
&lt;li>&lt;strong>音频配置&lt;/strong>：主板一般会内置音频解码芯片，并且主流主板基本都采用的是Realtek的ALC887、ALC892、ALC1220这三款芯片。这个尽量能选择最强的ALC1220，输出能力强而且支持ASIO。&lt;/li>
&lt;li>&lt;strong>无线连接配置&lt;/strong>：近年的主板还有不少型号会带WiFi和蓝牙模块，这个其实对我非常有用，因为由于是租房住，网线很难牵，有WiFi支持的话就再好不过了，而且内置蓝牙还可以支持蓝牙键鼠和手柄，岂不美哉。&lt;/li>
&lt;li>&lt;strong>品牌&lt;/strong>：最后就是选择主板的品牌了，大厂在主板的做工、用料、稳定性以及BIOS功能设计上普遍比较好，因此可以优先选择华硕、技嘉和微星三大厂的板子。根据&lt;a class="link" href="https://pcpartpicker.com/forums/topic/5769-best-mobo-asus-vs-msi-vs-gigabyte-vs-asrock-" target="_blank" rel="noopener"
>网上的评价&lt;/a>，华硕的高端板子质量高，BIOS功能多，而技嘉的板子则比较实惠。另外的厂家还有华擎，它的板子设计美观，而且成本较低，也可以考虑。&lt;/li>
&lt;/ul>
&lt;p>在筛选掉不符合上面要求的主板后，最后买到的是&lt;em>Gigabyte B450 Aorus Pro WiFi&lt;/em>主板，刚好在Newegg上有打折，而且完美满足需求，&lt;del>而且还带雕牌信仰灯&lt;/del>。&lt;/p>
&lt;h3 id="内存">内存&lt;/h3>
&lt;p>内存的话就比较好选了，主要有三个参数：容量、频率和时序&lt;/p>
&lt;ul>
&lt;li>&lt;strong>容量&lt;/strong>：之前俺12G内存笔记本编译个LLVM都内存不够，因此至少要16G了，以后看需要甚至可以考虑上32G。&lt;/li>
&lt;li>&lt;strong>频率&lt;/strong>：频率决定了内存的性能，由于暂不打算内存超频，选择AMD支持的2666/3000MHz DDR4就刚好合适了。&lt;/li>
&lt;li>&lt;strong>时序&lt;/strong>：时序决定了内存的延迟，这个参数实际体验上影响不大，而且同款内存的C1时序一般都差不多，所以可以忽略。&lt;/li>
&lt;/ul>
&lt;p>最后选择的是RGB加持的&lt;em>Corsair Vengeance RGB 16GB (2 x 8GB) DDR4-3000&lt;/em>双通道内存，应该是可以完美配合之前选的主板的。&lt;/p>
&lt;h3 id="硬盘">硬盘&lt;/h3>
&lt;p>硬盘也是非常影响体验的一个部件，速度快的硬盘能加速开机、加速程序加载、加载文件拷贝，而对与资料存储来说则是选择一款稳定的硬盘比较关键。对于系统盘，我购买了一块西数NVMe黑盘来装系统，考虑到可能会装一些大型软件在系统盘，最后选择的容量是500G，&lt;a class="link" href="https://www.youtube.com/watch?v=alb6-zp52mA" target="_blank" rel="noopener"
>给出一定量的冗余空间有利于延长固态硬盘寿命&lt;/a>。由于之前刚好淘了一块Corsair的480G固态以及一块2T西数绿盘，刚好可以分别用作游戏存放盘和资料存放盘，就暂时没有额外购买硬盘了。之后根据资料存储的需要可能还会采购一块4T硬盘，在配上一块便宜的固态来用上AMD的StoreMI技术！&lt;/p>
&lt;blockquote>
&lt;p>需要指出的是，对于存储资料的硬盘，选择转速低、缓存小的机械硬盘比较好，这样比较稳定。&lt;/p>
&lt;/blockquote>
&lt;h3 id="声卡网卡等其他设备">声卡网卡等其他设备&lt;/h3>
&lt;p>在声卡和网卡上，由于主板已经满足了基本需求，因此之前考虑过的Creative SoundBlaster声卡和其他带WiFi的网卡就可以不用再买了，也省了两个PCIe的槽位。而光驱的话，由于后文提到购买的机箱没有5.25英尺舱位，决定之后购买USB光驱。&lt;/p>
&lt;h3 id="电源">电源&lt;/h3>
&lt;p>电源的考虑因素主要有三点：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>功率&lt;/strong>：选好所有内部组件之后就可以给整个系统算一个总TDP功率，然后让总功率处于电源的高效率负载区间就可以了。如果考虑到之后扩展的需求（如超频、加显卡）可以买更大功率的电源。根据PCPartPicker的计算，按照上面的配置装下来系统功率大概是294W，用它除以一般电源的高负载区间（50%~75%）再补一些裕量，这套配置下电源的功率大概是500W左右。&lt;/li>
&lt;li>&lt;strong>接口&lt;/strong>：电源由于要给主板、GPU、硬盘等设备进行供电，供电接口必须兼容，不过目前较新的电源都与主流设备兼容。电源的选择还有“模组”(Modular)、“半模组”(Semi-Modular)、“非模组”之分。模组的意思是电源接口上全是母口，可以自己选择是否插线以及插什么线，而半模组则是电源自带几根必要的供电线，其他由用户选择。我最后选择的是半模组电源，供电灵活并且便于走线。&lt;/li>
&lt;li>&lt;strong>效率&lt;/strong>：电源的效率就关乎省不省电了，可以根据&lt;a class="link" href="https://en.wikipedia.org/wiki/80_Plus" target="_blank" rel="noopener"
>80+标准&lt;/a>来进行选择。&lt;/li>
&lt;/ul>
&lt;p>最后我选择的是&lt;em>Corsair TXM Gold 550W 80+ Gold&lt;/em>电源，够用、省电。&lt;/p>
&lt;h3 id="机箱">机箱&lt;/h3>
&lt;p>在选好电子部件之后选择机箱就比较简单了，首先限定ATX尺寸，至少3个硬盘位，然后根据外观喜好和接口数量选择即可。仔细一点的话可以考虑机箱&lt;strong>对走线的支持&lt;/strong>、机箱的&lt;strong>5.25英尺舱位数量&lt;/strong>（用来放光驱等设备）、&lt;strong>机箱风扇位数量&lt;/strong>、&lt;strong>机箱对水冷冷排的支持&lt;/strong>以及&lt;strong>机箱风道设计&lt;/strong>等因素。由于带5.25英尺舱位的机箱普遍较丑，因此就没有买带光驱舱位的机箱。最后选择的是外观与内部设计兼具的&lt;em>NZXT H500&lt;/em>机箱。&lt;/p>
&lt;h3 id="机箱风扇">机箱风扇&lt;/h3>
&lt;p>由于目前没有高强度的散热需求，因此暂时就不购置机箱风扇了。&lt;/p>
&lt;blockquote>
&lt;p>整套设备的零件列表可以参见&lt;a class="link" href="https://pcpartpicker.com/b/rCvnTW" target="_blank" rel="noopener"
>我在PCPartPicker上的列表&lt;/a>~&lt;/p>
&lt;/blockquote>
&lt;h2 id="组装">组装&lt;/h2>
&lt;p>部件到手后就是引起极大舒适的组装环节啦~&lt;/p>
&lt;h3 id="硬件组装">硬件组装&lt;/h3>
&lt;p>硬件组装其实没有什么好说的，按部就班地将部件连接、固定，然后只要能开机就万事大吉了~安装之前注意&lt;a class="link" href="https://www.zhihu.com/question/19584885" target="_blank" rel="noopener"
>将手上的静电放一放&lt;/a>。（我在Amazon买了个防静电腕带，结果发现很难找地方接地，也没有必要）&lt;/p>
&lt;p>我的安装顺序如下：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>CPU&lt;/strong>：注意CPU上的方向标志要与主板对齐&lt;/li>
&lt;li>&lt;strong>CPU风扇&lt;/strong>：在CPU上涂上导热硅脂后就可以把风扇固定上去了&lt;/li>
&lt;li>&lt;strong>内存&lt;/strong>：双通道内存要注意插的槽位，不确定的话看一下说明书&lt;/li>
&lt;li>&lt;strong>主板&lt;/strong>：把CPU和内存安装好之后再固定主板会比较省事。由于机箱上的风扇会比较碍事，可以先把机箱风扇拆下来。&lt;/li>
&lt;li>&lt;strong>GPU&lt;/strong>：把侧面对应的挡板要卸下来&lt;/li>
&lt;li>&lt;strong>硬盘和SSD&lt;/strong>: 稍微留意一下安装的位置和方向，避免SATA线或者电源线不好插。另外根据&lt;a class="link" href="https://www.newegg.com/Product/SingleProductReview.aspx?reviewid=10048833" target="_blank" rel="noopener"
>&lt;strong>Newegg上的评论&lt;/strong>&lt;/a>，这款主板如果在M.2接口SSD上装系统，应安装在M2A插槽的SSD上。&lt;/li>
&lt;li>&lt;strong>电源&lt;/strong>：其实这里犯了个错，先将电源线插上之后再安电源会比较好操作。&lt;/li>
&lt;li>&lt;strong>电源线&lt;/strong>：要给CPU、主板、GPU、硬盘都供上电。&lt;/li>
&lt;li>&lt;strong>机箱风扇&lt;/strong>：&lt;a class="link" href="https://www.zhihu.com/question/26857719" target="_blank" rel="noopener"
>这里要考虑一下机箱的风道设计&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>安装完毕之后整理一下走线，和没有插上的接头，把拆下来的机箱部件再装回去就OK了~安装完毕后发现按电源键开不了机，后面经过老司机老王指路后换通道插了一下内存就可以了，成功开机之后再把内存插回最快的通道。&lt;/p>
&lt;h3 id="软件安装">软件安装&lt;/h3>
&lt;p>一台全新的主机是不带系统的，因此要先装系统啦~如果是安装Windows，那么在装之前先通过安装盘的&lt;a class="link" href="https://blog.csdn.net/u012757487/article/details/53181425" target="_blank" rel="noopener"
>Diskpart工具将硬盘分区表转换成GPT格式&lt;/a>以支持大容量硬盘，并且在BIOS中开启UEFI启动模式。关于UEFI与GPT好处可以参见&lt;a class="link" href="https://blog.csdn.net/yang2716210363/article/details/78581388" target="_blank" rel="noopener"
>这篇博文&lt;/a>。不过如果以后想安装Linux双系统的话，[使用UEFI就会有一些蛋疼了](https://zyxin.xyz/blog/2018-09/LinuxDualSystem/。之后从安装盘Boot，安装系统，初始化账号以及更新驱动，一切按部就班即可~&lt;/p>
&lt;blockquote>
&lt;p>关于Windows 10的激活：首先，有能力的话还是买正版或者教育版。推荐使用KMS服务激活，如果有学校或者企业的服务器最好，如果没法买正版的话可以使用其他的KMS服务器（如&lt;a class="link" href="https://03k.org/kms.html" target="_blank" rel="noopener"
>03k&lt;/a>）&lt;/p>
&lt;/blockquote>
&lt;p>更新完驱动以后回到BIOS调一下其他参数，例如内存的频率默认是设置在2133MHz的，调成我内存支持的3000MHz，还有Wake on LAN、Secure Boost等等设置都可以根据需求喜好调整。超频先不打算弄了，一方面电脑还没测试过，另一方面超频也耗电，目前没有什么需求。&lt;/p>
&lt;h2 id="测试">测试&lt;/h2>
&lt;p>装完系统之后就是对自己的电脑进行测试啦~看有没有达到自己预期的性能。&lt;/p>
&lt;h3 id="烤机">烤机&lt;/h3>
&lt;p>首先是稳定性测试，如果系统都不稳定那一切性能都是白瞎。烤机过程中一方面是观察是否出现卡死或者蓝屏，另一方面是观察硬件温度有没有超出预期。如果硬件温度太高则说明散热的设置有问题。&lt;/p>
&lt;p>CPU烤机测试可以通过AIDA64软件进行，烤机结果如下：&lt;/p>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2018-11/BrandNewRig/AIDA_Benchmark.png"
width="778"
height="594"
loading="lazy"
alt="AIDA64的CPU、内存、GPU压力测试结果"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="314px"
>&lt;/p>
&lt;p>而GPU烤机测试可以通过Furmark软件完成，这个软件就仅仅是不停地渲染，只要没有出现卡死就没问题了。&lt;/p>
&lt;h3 id="跑分软件">跑分软件&lt;/h3>
&lt;p>在完成基本的测试之后还可以进行其他性能的测试，如硬盘测试、网速测试等等。这里介绍一下常用的Benchmark软件，&lt;/p>
&lt;ul>
&lt;li>&lt;strong>CPU&lt;/strong>: CPUz, AIDA64, Cinebench&lt;/li>
&lt;li>&lt;strong>GPU&lt;/strong>: GPUz, Furmark, 3D Mark&lt;/li>
&lt;li>&lt;strong>硬盘&lt;/strong>: AS SSD Benchmark, CrystalDiskMark&lt;/li>
&lt;/ul>
&lt;p>其中3D Mark是一个比较常用的跑分软件，&lt;a class="link" href="https://www.youtube.com/watch?v=LNU2mlen3Ow" target="_blank" rel="noopener"
>测试内容&lt;/a>比较综合，可以较为全面地反应电脑性能。下图是我这套配置的跑分结果~&lt;/p>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2018-11/BrandNewRig/3DMark.png"
width="1384"
height="661"
loading="lazy"
alt="3DMark跑分"
class="gallery-image"
data-flex-grow="209"
data-flex-basis="502px"
>&lt;/p>
&lt;blockquote>
&lt;p>这里再贴几张硬盘跑分图，感受一下NVMe的速度~等以后有空余的硬盘，用上&lt;a class="link" href="https://www.reddit.com/r/Amd/comments/8g1qom/amd_storemi_vs_intel_smart_response_technology/" target="_blank" rel="noopener"
>AMD StoreMI&lt;/a>黑科技以后还能更快！~
&lt;img src="https://zyxin.xyz/blog/blog/2018-11/BrandNewRig/Drive_Benchmark.png"
width="1237"
height="391"
loading="lazy"
alt="从左到右分别是西数NVMe黑盘、海盗船SATA固态、西数5400转绿盘机械硬盘"
class="gallery-image"
data-flex-grow="316"
data-flex-basis="759px"
>
&lt;em>（从左到右分别是西数NVMe黑盘、海盗船SATA固态、西数5400转绿盘机械硬盘）&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;p>以上就是装机的全过程啦~硬件的评价可以参见&lt;a class="link" href="https://pcpartpicker.com/b/rCvnTW" target="_blank" rel="noopener"
>上文提到的我的帖子&lt;/a>~最后附上一张剁手全家福~&lt;/p>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2018-11/BrandNewRig/Parts.jpg"
width="4032"
height="3024"
loading="lazy"
alt="部件全家福"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;blockquote>
&lt;p>后记：没忍到黑五就把电脑搭上了，估计之后看到打折都要气死了。另外，对于AMD Ryzen主机的安装可以参考&lt;a class="link" href="https://www.pcworld.com/article/3180511/components-processors/7-amd-ryzen-tips-and-tricks-to-maximize-your-pcs-performance.html" target="_blank" rel="noopener"
>PCWorld上的一篇文章&lt;/a>。&lt;/p>
&lt;/blockquote></description></item><item><title>将Google Drive (File Stream)添加到文件管理器左侧空间</title><link>https://zyxin.xyz/blog/2018-11/AddGDriveToExplorer/</link><pubDate>Fri, 02 Nov 2018 20:10:49 +0000</pubDate><guid>https://zyxin.xyz/blog/2018-11/AddGDriveToExplorer/</guid><description>&lt;img src="https://zyxin.xyz/blog/2018-11/AddGDriveToExplorer/thumbnail.png" alt="Featured image of post 将Google Drive (File Stream)添加到文件管理器左侧空间" />&lt;p>在学校提供免费的Google Drive之后，我安装了Google Drive客户端的File Stream版本。Google Drive有两种客户端，一种是Backup and Sync（自动同步的文件夹），另一种是File Stream（虚拟硬盘）。前者与Onedrive的使用体验非常相似，安装之后在文件浏览器左侧直接会有同步文件夹的入口。而后者则是以虚拟硬盘的形式提供Google Drive的文件访问，让我想起了之前的meepo，可惜现在清华已经不提供meepo服务了。File Stream会在文件管理器中添加新的盘符，用来访问文件，但是却没有像Backup and Sync或者Dropbox那样把快捷入口添加到文件浏览器左侧。本文将分享一个将Google Drive添加到文件管理器根空间的方法，效果图如下～&lt;/p>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2018-11/AddGDriveToExplorer/result.png"
width="452"
height="840"
loading="lazy"
alt="原始盘符和新增入口"
class="gallery-image"
data-flex-grow="53"
data-flex-basis="129px"
>&lt;/p>
&lt;h2 id="reg文件导入注册表键值">Reg文件导入注册表键值&lt;/h2>
&lt;p>这个方法来源于&lt;a class="link" href="https://luke.digital/adding-google-drive-to-the-explorer-sidebar/" target="_blank" rel="noopener"
>一篇博客&lt;/a>，只需要将&lt;a class="link" href="https://github.com/svenkle/google-drive-add-to-explorer/blob/develop/Google%20Drive.reg" target="_blank" rel="noopener"
>一个注册表文件Google Drive.reg&lt;/a>导进注册表即可。不过这个文件是针对Google Drive Sync而不是Google Drive File Stream的，因此需要将里面的exe位置改到你的Drive FS安装的位置，并且还要修改它导向的文件夹路径（默认是&lt;code>G:\My Drive&lt;/code>）。与文件浏览器左侧快捷入口有关的注册表键值是&lt;code>HKCU\Software\Classes\CLSID\...\&lt;/code>底下的&lt;code>System.IsPinnedToNamespaceTree&lt;/code>选项，将这个设置为1即可将COM组件固定在文件浏览器左侧。如果需要将快捷入口去掉，双击运行上文Repo里面的&lt;a class="link" href="https://github.com/svenkle/google-drive-add-to-explorer/blob/develop/Remove%20Google%20Drive.reg" target="_blank" rel="noopener"
>Remove Google Drive.reg&lt;/a>删除注册表即可。&lt;/p>
&lt;h2 id="powershell自动脚本">Powershell自动脚本&lt;/h2>
&lt;p>为了省去Google Drive每次更新后手动更改路径的麻烦，我写了一个Powershell脚本，一键添加和删除快捷入口~在&lt;a class="link" href="https://gist.github.com/cmpute/be92e4dfd694696db0ec0c2c5713b45f" target="_blank" rel="noopener"
>Gist上可以下到&lt;/a>。使用十分简单，下载后打开命令行输入&lt;code>powershell.exe -noprofile -executionpolicy bypass -file &amp;lt;下载文件的位置&amp;gt;&lt;/code>即可将Google Drive添加到左侧快捷入口，运行&lt;code>powershell.exe -noprofile -executionpolicy bypass -file &amp;lt;下载文件的位置&amp;gt; remove&lt;/code>即可将快捷入口删除。&lt;/p>
&lt;blockquote>
&lt;p>提示：如果下载下来的脚本运行失败的话可能是文件编码问题导致的，请用VSCode等软件转换为UTF8(BOM)格式&lt;/p>
&lt;/blockquote></description></item><item><title>PowerShell快速上手（针对有C#经验者）</title><link>https://zyxin.xyz/blog/2018-11/PowerShellForCSharpProgrammer/</link><pubDate>Fri, 02 Nov 2018 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2018-11/PowerShellForCSharpProgrammer/</guid><description>&lt;p>PowerShell是微软一个非常棒的产品，终于改变了人们对Windows下命令行的一片鄙视。一直以来都很想学学PowerShell，这样我就不用使用Python作为手边的脚本语言了，对进行一些文件操作、系统操作而言PowerShell还是要比Python来的方便。另外由于有不少C#的经验，因此PowerShell能够调用.NET库的特性也能够充分利用起来，并且实际发现C#的经验让我学习PowerShell快了不少（当然使用bash、CMake这些脚本的经验应该也帮上忙了吧）。本文就是一篇针对有C#经验的用户的PowerShell上手教程，当然如果你有F#、IronPython等基于.NET的脚本经验那就更好了。&lt;/p>
&lt;blockquote>
&lt;p>Note: 后文中PowerShell简称PS。&lt;/p>
&lt;/blockquote>
&lt;h2 id="powershell脚本的运行方法">PowerShell脚本的运行方法&lt;/h2>
&lt;p>PowerShell本质是一个脚本环境/脚本语言。在PS中，语句从第一行开始依次执行，而不像普通程序一样会有一个显式的程序入口（Entry），并且PS的每一行命令（语句）都不用使用结尾标志（如C家族的;）。因此PS脚本的编写将会非常直观，想要输出&lt;code>Hello World&lt;/code>只需一行语句即可：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo &lt;/span>&lt;span class="s2">&amp;#34;Hello World&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行一段PS脚本有两种方式，一种是在PS交互命令行中直接将命令输入，例如你可以直接在PS命令行中输入&lt;code>35+2&lt;/code>，或者&lt;code>$env:Path.GetType()&lt;/code>等复杂语句；另一种则是将脚本写在&lt;code>.ps1&lt;/code>文件中，然后运行&lt;code>.ps1&lt;/code>文件即可。这与大部分脚本语言运行的方法是一致的。&lt;/p>
&lt;p>需要指出的是Windows下PS脚本运行是受到系统的限制的，默认系统配置下，如果再PowerShell窗口中直接运行&lt;code>.ps1&lt;/code>脚本，PS会提示&lt;em>File cannot be loaded because running scripts is disabled on this system.&lt;/em>。解决这个问题有两种方式&lt;/p>
&lt;ol>
&lt;li>将系统中Windows PowerShell执行策略改为“Bypass”，这个可以通过在PS中运行以下命令完成
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Set-ExecutionPolicy&lt;/span> &lt;span class="n">Bypass&lt;/span> &lt;span class="n">-Scope&lt;/span> &lt;span class="n">CurrentUser&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Set-ExecutionPolicy&lt;/span> &lt;span class="n">Bypass&lt;/span> &lt;span class="n">-Scope&lt;/span> &lt;span class="k">Process&lt;/span> &lt;span class="c"># 仅在当前PS进程中生效。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>使用&lt;code>powershell -noprofile -executionpolicy bypass -file &amp;lt;文件路径&amp;gt; [参数]&lt;/code>来运行脚本，这是用户友好的方法。由于该命令可以通过cmd或者PS执行，因此可以通过&lt;code>.bat&lt;/code>文件封装这个命令，以达到双击运行的效果。&lt;/li>
&lt;/ol>
&lt;h2 id="命令-or-参数-or-字符串">命令 or 参数 or 字符串？&lt;/h2>
&lt;p>PowerShell中变量名均以&lt;code>$&lt;/code>开头。与bash、CMake风格相似的是，PS中的内容如果不以&lt;code>$&lt;/code>或者&lt;code>-&lt;/code>开头则默认都是命令或者字符串，例如在&lt;code>echo Hello World&lt;/code>这样的语句中，&lt;code>echo&lt;/code>是命令，&lt;code>Hello&lt;/code>和&lt;code>World&lt;/code>都是命令的参数并且都是字符串类型。在PS中，命令/函数的调用有两种形式：&lt;/p>
&lt;ol>
&lt;li>命令形式：&lt;code>&amp;lt;命令&amp;gt; [参数1] .. [-参数名2 &amp;lt;参数2&amp;gt;] ..&lt;/code>，如&lt;code>Get-ChildItem C:\Windows\* -Include *.exe&lt;/code>。在这类形式中，参数默认都是字符串，在不含空格时都可以不打引号。这里的命令主要是PS内置的命令（cmdlet）或者别名（alias），通常是一个首字母大写的单词或者用短横连接的两个首字母大写单词。&lt;/li>
&lt;li>函数形式: &lt;code>[对象.]函数(参数1, 参数2, ..)&lt;/code>，如&lt;code>&amp;quot;abcd&amp;quot;.Endswith(&amp;quot;cd&amp;quot;)&lt;/code>。在这类形式中，参数需要通过引号来明确指定是字符串。通过这样的方法使用的是.NET的函数，写起来就和C#没什么区别。&lt;/li>
&lt;/ol>
&lt;p>另外，PowerShell支持管道，因此对于命令形式来说可以通过&lt;code>&amp;lt;命令1&amp;gt; | &amp;lt;命令2&amp;gt; | ..&lt;/code>的形式来进行链式调用并且传递参数，而函数形式就没法进行链式调用了。&lt;/p>
&lt;h2 id="net交互interop">.NET交互（Interop）&lt;/h2>
&lt;p>PowerShell本身是用C#编写的，并且其内部运行环境也是基于.NET的，因此PS与.NET交互十分简单。&lt;/p>
&lt;h3 id="powershell对象">PowerShell对象&lt;/h3>
&lt;p>PS中的对象均为.NET中的对象，因此PS变量可以直接当作.NET对象进行操作，例如下列语句：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="mf">123&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">ToString&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c"># 报错，因为123既不是变量也不是命令&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="p">([&lt;/span>&lt;span class="no">int&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="mf">123&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="py">ToString&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c"># 这里将字符串123转换成了System.Int32变量&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mf">123&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">Dir &lt;/span>&lt;span class="n">C:&lt;/span>&lt;span class="p">\).&lt;/span>&lt;span class="py">GetType&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="py">Name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Object&lt;/span>&lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">Get-Item&lt;/span> &lt;span class="n">HKCU&lt;/span>&lt;span class="err">:&lt;/span>&lt;span class="p">\&lt;/span>&lt;span class="n">Software&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="py">GetType&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="py">FullName&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Microsoft&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">Win32&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">RegistryKey&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>PS不仅能操作对象，还能够直接创建对象&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># PS中创建.NET对象&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">New-Object&lt;/span> &lt;span class="n">-TypeName&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">Version&lt;/span> &lt;span class="n">-ArgumentList&lt;/span> &lt;span class="s2">&amp;#34;1.2.3.4&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Major&lt;/span> &lt;span class="n">Minor&lt;/span> &lt;span class="n">Build&lt;/span> &lt;span class="n">Revision&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">-----&lt;/span> &lt;span class="p">-----&lt;/span> &lt;span class="p">-----&lt;/span> &lt;span class="p">--------&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mf">1&lt;/span> &lt;span class="mf">2&lt;/span> &lt;span class="mf">3&lt;/span> &lt;span class="mf">4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c"># PowerShell中的Object对象操作&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="nv">$var&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">New-Object&lt;/span> &lt;span class="n">object&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="nv">$var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">GetType&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="py">Name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">Object&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">Add-Member&lt;/span> &lt;span class="n">-InputObject&lt;/span> &lt;span class="nv">$var&lt;/span> &lt;span class="n">-Name&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="n">-Value&lt;/span> &lt;span class="mf">123&lt;/span> &lt;span class="n">-MemberType&lt;/span> &lt;span class="n">NoteProperty&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="nv">$var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">Value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mf">123&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过&lt;code>Add-Member&lt;/code>和&lt;code>Get-Member&lt;/code>命令，PS不仅能够完成.NET中的反射（Reflection），还能够完成类似匿名对象（Anonymous Object）的创建，这个十分有用！&lt;/p>
&lt;h3 id="powershell中操作net类">PowerShell中操作.NET类&lt;/h3>
&lt;p>在PS中可以直接调用.NET库中的类进行操作&lt;/p>
&lt;ol>
&lt;li>新建对象：&lt;code>New-Object -TypeName System.Version -ArgumentList &amp;quot;1.2.3.4&amp;quot;&lt;/code>&lt;/li>
&lt;li>强制转换：&lt;code>[int]&amp;quot;1234&amp;quot;&lt;/code>（等同于&lt;code>[System.Int32]&amp;quot;1234&amp;quot;&lt;/code>）&lt;/li>
&lt;li>调用静态函数： &lt;code>[System.DateTime]::Parse(&amp;quot;2012-10-13 23:42:55&amp;quot;)&lt;/code>
有了这些操作，PowerShell已经完全可以当一个C#脚本引擎了~&lt;/li>
&lt;/ol>
&lt;h2 id="操作符httpsdocsmicrosoftcompowershellmodulemicrosoftpowershellcoreaboutabout_operators">&lt;a class="link" href="https://docs.microsoft.com/powershell/module/microsoft.powershell.core/about/about_operators" target="_blank" rel="noopener"
>操作符&lt;/a>&lt;/h2>
&lt;p>在利用PS写逻辑流程时就会发现，除了加减乘除外，C#的很多关键字和操作符都不能直接使用。在PS中，这些操作符都变成了命令或者以&lt;code>-&lt;/code>开头的命令符了。下表列出了常用的操作符：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>PS操作符&lt;/th>
&lt;th>C#操作符&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="https://docs.microsoft.com/powershell/module/microsoft.powershell.core/about/about_comparison_operators" target="_blank" rel="noopener"
>&lt;strong>比较&lt;/strong>&lt;/a>&lt;/td>
&lt;td>&lt;code>-eq&lt;/code>&lt;/td>
&lt;td>&lt;code>==&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>比较&lt;/td>
&lt;td>&lt;code>-ne&lt;/code>&lt;/td>
&lt;td>&lt;code>!=&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>比较&lt;/td>
&lt;td>&lt;code>-gt&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>比较&lt;/td>
&lt;td>&lt;code>-ge&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;gt;=&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>比较&lt;/td>
&lt;td>&lt;code>-lt&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;lt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>比较&lt;/td>
&lt;td>&lt;code>-le&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;lt;=&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://docs.microsoft.com/powershell/module/microsoft.powershell.core/about/about_type_operators" target="_blank" rel="noopener"
>&lt;strong>类型&lt;/strong>&lt;/a>&lt;/td>
&lt;td>&lt;code>-is&lt;/code>&lt;/td>
&lt;td>&lt;code>is&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>类型&lt;/td>
&lt;td>&lt;code>-as&lt;/code>&lt;/td>
&lt;td>&lt;code>as&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://docs.microsoft.com/powershell/module/microsoft.powershell.core/about/about_logical_operators" target="_blank" rel="noopener"
>&lt;strong>逻辑&lt;/strong>&lt;/a>&lt;/td>
&lt;td>&lt;code>-and&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;amp;&amp;amp;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>逻辑&lt;/td>
&lt;td>&lt;code>-or&lt;/code>&lt;/td>
&lt;td>&lt;code>||&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>逻辑&lt;/td>
&lt;td>&lt;code>-xor&lt;/code>&lt;/td>
&lt;td>&lt;code>^&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>逻辑&lt;/td>
&lt;td>&lt;code>-not&lt;/code>&lt;/td>
&lt;td>&lt;code>!&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://docs.microsoft.com/powershell/module/microsoft.powershell.core/about/about_arithmetic_operators" target="_blank" rel="noopener"
>&lt;strong>运算&lt;/strong>&lt;/a>&lt;/td>
&lt;td>&lt;code>-band&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;amp;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>运算&lt;/td>
&lt;td>&lt;code>-bnot&lt;/code>&lt;/td>
&lt;td>&lt;code>~&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>运算&lt;/td>
&lt;td>&lt;code>-bor&lt;/code>&lt;/td>
&lt;td>&lt;code>|&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>运算&lt;/td>
&lt;td>&lt;code>-bxor&lt;/code>&lt;/td>
&lt;td>&lt;code>^&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>运算&lt;/td>
&lt;td>&lt;code>-shl&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;lt;&amp;lt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>运算&lt;/td>
&lt;td>&lt;code>-shr&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;gt;&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>运算&lt;/td>
&lt;td>&lt;code>-bxor&lt;/code>&lt;/td>
&lt;td>&lt;code>^&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>另外需要注意的是&lt;code>&amp;gt;&lt;/code>、&lt;code>&amp;gt;&amp;gt;&lt;/code>等等运算符在PS中是重定向运算符。&lt;/p>
&lt;/blockquote>
&lt;p>尽管名字不一样，但是这些操作符的用法还是一样的。另外PS中还定义了一些.NET中没有的操作符，这些操作符通常很实用，如：&lt;/p>
&lt;ul>
&lt;li>&lt;code>-contains&lt;/code>：返回集合包含元素&lt;/li>
&lt;li>&lt;code>-in&lt;/code>：返回元素是否被集合包含&lt;/li>
&lt;li>&lt;code>-like&lt;/code>: 返回字符串是否与通配式匹配（&lt;a class="link" href="https://en.wikipedia.org/wiki/Wildcard_character" target="_blank" rel="noopener"
>Wildcard Pattern&lt;/a>）&lt;/li>
&lt;li>&lt;code>-match&lt;/code>: 返回字符串是否与正则表达式匹配（&lt;a class="link" href="https://en.wikipedia.org/wiki/Regular_expression" target="_blank" rel="noopener"
>Regex&lt;/a>）&lt;/li>
&lt;li>&lt;code>-f&lt;/code>: 等价于&lt;code>String.Format()&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="powershell驱动httpsdocsmicrosoftcompowershellscriptinggetting-startedcookbooksmanaging-windows-powershell-drives">&lt;a class="link" href="https://docs.microsoft.com/powershell/scripting/getting-started/cookbooks/managing-windows-powershell-drives" target="_blank" rel="noopener"
>PowerShell“驱动”&lt;/a>&lt;/h2>
&lt;p>“驱动”（Drive）是PowerShell中很有意思的一个概念，PowerShell提供了一种统一的接口来管理层次信息系统，包括文件系统（FileSystem）、注册表（Registry）、证书（Certificate）、环境变量（Environment），甚至包括当前会话的变量（Variable）和函数（Function）。这些“Drive”支持统一的一套接口，这就非常的有趣了233。&lt;/p>
&lt;p>通过&lt;code>Get-PSDrive&lt;/code>命令我们可以获得当前PowerShell会话支持的驱动，在我的电脑上该命令的运行结果如下（省去部分内容）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Name Provider Root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">---- -------- ----
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Alias Alias
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">C FileSystem C:\
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Cert Certificate \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">D FileSystem D:\
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">E FileSystem E:\
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Env Environment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Function Function
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">G FileSystem G:\
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">HKCU Registry HKEY_CURRENT_USER
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">HKLM Registry HKEY_LOCAL_MACHINE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Variable Variable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">WSMan WSMan
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过这些驱动，&lt;code>ls env:\Path&lt;/code>就能够获取系统环境变量，&lt;code>HKCU:\SOFTWARE&lt;/code>就可以获取注册表键，十分方便。但是需要注意的是这些驱动获得的对象的类型是不同的，如文件对象会是&lt;code>System.IO.FileInfo&lt;/code>，而注册表键则是&lt;code>Microsoft.Win32.RegistryKey&lt;/code>。&lt;/p>
&lt;h3 id="驱动统一支持的命令接口">驱动统一支持的命令接口&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Cmdlet&lt;/th>
&lt;th>Alias&lt;/th>
&lt;th>用途&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Get-ChildItem&lt;/td>
&lt;td>dir, ls&lt;/td>
&lt;td>获取当前位置的所有子项&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Set-Location&lt;/td>
&lt;td>cd&lt;/td>
&lt;td>更改当前位置&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>New-Item&lt;/td>
&lt;td>md, mkdir&lt;/td>
&lt;td>在指定位置新建对象&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Get-Item&lt;/td>
&lt;td>&lt;/td>
&lt;td>获取该位置对应的对象&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Remove-Item&lt;/td>
&lt;td>del, rm&lt;/td>
&lt;td>删除指定位置的对象&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>New-ItemProperty&lt;/td>
&lt;td>&lt;/td>
&lt;td>新建对象的属性&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Get-ItemProperty&lt;/td>
&lt;td>&lt;/td>
&lt;td>获取对象的属性（如文件属性，注册表键）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Set-ItemProperty&lt;/td>
&lt;td>&lt;/td>
&lt;td>设置对象的属性&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Clear-ItemProperty&lt;/td>
&lt;td>&lt;/td>
&lt;td>删除对象的属性&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Test-Path&lt;/td>
&lt;td>&lt;/td>
&lt;td>判断指定位置是否存在对象&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;p>看完这些内容以后你就可以像写C#一样开始写PowerShell啦。更加详细的教程可以参见下方的参考资料~&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>参考资料&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://docs.microsoft.com/powershell/" target="_blank" rel="noopener"
>微软官方文档&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.pstips.net/powershell-online-tutorials" target="_blank" rel="noopener"
>PowerShell在线教程&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>利用Visual Studio Code搭建Latex编辑环境</title><link>https://zyxin.xyz/blog/2018-09/LatexSetup/</link><pubDate>Tue, 18 Sep 2018 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2018-09/LatexSetup/</guid><description>&lt;img src="https://zyxin.xyz/blog/2018-09/LatexSetup/workshop_screenshot.png" alt="Featured image of post 利用Visual Studio Code搭建Latex编辑环境" />&lt;p>由于没有足够的动力，之前一直没有学LaTeX。苍天饶过谁，这回有一门课强制使用LaTeX交作业，没办法只能装上LaTeX了。如果是在几年前大一大二的时候，我可能还忍不了MiKTeX难用的命令行和WinEdit丑陋的界面，但是现在有了VSCode，一切都变得easy and works like a charm。 本文就讲述如何利用VSCode搭建LaTeX的编辑环境。如果你还没有装VSCode的话就赶紧去官网下载吧~&lt;/p>
&lt;h2 id="miktex--lyx">MiKTeX + LyX&lt;/h2>
&lt;p>想要使用LaTeX，首先需要安装一个LaTeX发行版，也就是实现LaTeX功能的软件包。著名的发行版有&lt;a class="link" href="https://tug.org/texlive/" target="_blank" rel="noopener"
>TeX Live&lt;/a>、&lt;a class="link" href="http://miktex.org/" target="_blank" rel="noopener"
>MiKTeX&lt;/a>、&lt;a class="link" href="http://www.ctex.org/HomePage" target="_blank" rel="noopener"
>CTeX&lt;/a>等。我选择的是MiKTeX，原因有&lt;/p>
&lt;ol>
&lt;li>MiKTeX是老师推荐的发行版&lt;/li>
&lt;li>MiKTeX是LyX的默认后端&lt;/li>
&lt;li>MiKTeX体积不大而且安装简单&lt;/li>
&lt;/ol>
&lt;p>安装有多简单呢：直接从&lt;a class="link" href="https://miktex.org/download" target="_blank" rel="noopener"
>官网下载界面&lt;/a>下载对应安装包，双击安装即可。安装过程中的选项可以保持默认。MiKTeX里面有一些包含有Perl脚本，因此建议再给系统装上Perl的运行时。Perl的运行时也有不同的发行版，我选择的是&lt;a class="link" href="http://strawberryperl.com/" target="_blank" rel="noopener"
>Strawberry Perl&lt;/a>。两者都安装完毕后打开命令行，运行&lt;code>latexmk&lt;/code>测试MiKTeX是否安装正常。&lt;/p>
&lt;p>另外你还可以选择安装LyX，这是一个让你像使用Word一样编写tex的软件，由于我也还没怎么用过，就不详细介绍了。LyX安装包有两种，一种是包含了MiKTeX的安装包的，建议先单独安装MiKTeX，再使用独立安装包安装LyX，便于MikTeX的调试。&lt;/p>
&lt;h2 id="visual-studio-code-插件">Visual Studio Code 插件&lt;/h2>
&lt;p>VSCode原生只支持&lt;code>.tex&lt;/code>文件的高亮，如果想要利用VSCode完成TeX的整个编写流程（编写、预览、编译、发布）就需要安装额外的插件。我使用的是目前做多star的&lt;strong>LaTeX Workshop&lt;/strong>。安装上这个插件后，只要你的系统路径中装有MiKTeX，那么就直接使用了~&lt;/p>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2018-09/LatexSetup/workshop_screenshot.png"
width="2736"
height="1744"
loading="lazy"
alt="LaTeX Workshop 使用界面"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="376px"
>&lt;/p>
&lt;p>常用的操作可以通过左侧的TeX选项卡、左下角的TeX状态按钮或在编辑窗口右键来完成。并且LaTeX Workshop提供的预览功能支持实时更新，在你每次保存&lt;code>.tex&lt;/code>文件时它会自动刷新。另外，如果你安装了vscode-pdf插件的话，LaTeX Workshop会提示它已经包含了vscode-pdf的功能重复了，但我感觉如果纯看PDF的话还是用vscode-pdf比较稳定。&lt;/p>
&lt;h2 id="一些latex技巧">一些LaTeX技巧&lt;/h2>
&lt;p>虽然我也是LaTeX新手，但是从Word转换过来时还是有不少操作比较不直观，因此在这里提一些我用到的技巧：&lt;/p>
&lt;ul>
&lt;li>利用&lt;code>.pgf&lt;/code>格式的图片可以使得Matplotlib出的图与LaTeX无缝集成
&lt;blockquote>
&lt;p>在LaTeX中使用pgf格式图片需要引用&lt;code>pgfplots&lt;/code>库：&lt;code>\usepackage{pgfplots}&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>在LaTeX中打单边的括号可以使用&lt;code>\left$&lt;/code>与&lt;code>\right$&lt;/code>，其中&amp;quot;$&amp;ldquo;代表括号，如果只有单边的话另一边的&amp;rdquo;$&amp;ldquo;使用&amp;rdquo;.&amp;ldquo;替代
&lt;blockquote>
&lt;p>LaTeX中&lt;code>\left{ \right.&lt;/code>的效果等价于word中&lt;code>{ \close&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;blockquote>
&lt;p>我的其他博文: 关于Visual Studio Code的其他插件可以参考[VSCode插件推荐](https://zyxin.xyz/blog/2018-02/ToolVisualStudio/，关于Word中公式的输入技巧则可以参见&lt;a class="link" href="https://zyxin.xyz/blog/2017-08/WordMath/" >快速输入数学公式&lt;/a>。&lt;/p>
&lt;/blockquote></description></item><item><title>安装Windows与Linux（Ubuntu 16.04）双系统并搭建工作环境</title><link>https://zyxin.xyz/blog/2018-09/LinuxDualSystem/</link><pubDate>Sun, 16 Sep 2018 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2018-09/LinuxDualSystem/</guid><description>&lt;img src="https://zyxin.xyz/blog/2018-09/LinuxDualSystem/drive_manage.png" alt="Featured image of post 安装Windows与Linux（Ubuntu 16.04）双系统并搭建工作环境" />&lt;p>自己的笔记本已经用了快4年了，硬盘除了不小的问题，存资料不放心、玩游戏不给力，因此准备把这台机子变成一个工作专用的机器。另外由于刚来美帝，实验室没有配电脑，我需要一个Linux系统来干活，因此就琢磨着给自己电脑装个Ubuntu双系统。&lt;/p>
&lt;h2 id="ubuntu双系统的安装">Ubuntu双系统的安装&lt;/h2>
&lt;p>先说一下自己电脑的情况。联想Y430P，系统是从OEM版Win8一路升上来的，去年为了Hyper-V重装了Window 10教育版。也就是说这台电脑从到我手上以来未装过Windows以外的系统，因此装双系统需要有一定的调整。Ubuntu双系统的安装主要参照了&lt;a class="link" href="https://www.libinx.com/2017/five-steps-win10-ubuntu-dual-boot/" target="_blank" rel="noopener"
>另一篇博客&lt;/a>。&lt;/p>
&lt;h3 id="给ubuntu系统腾空间">给Ubuntu系统腾空间&lt;/h3>
&lt;p>由于之前系统所有硬盘位置都被分配好了，因此需要先给另一个系统足够的安装空间。重新分配空间在Windows下能够非常方便地通过磁盘管理进行解决。磁盘管理可在任务栏Windows图标右键菜单中打开。腾空间有几种方式：&lt;/p>
&lt;ol>
&lt;li>插入新的硬盘：如果你舍得花钱或者有闲置盘的话&lt;/li>
&lt;li>删除某一磁盘分区：删除分区不代表数据丢失，只是将磁盘一块区域变成未使用的状态&lt;/li>
&lt;li>压缩已有磁盘分区：在不想移动数据的情况下的选择&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2018-09/LinuxDualSystem/drive_manage.png"
width="760"
height="245"
loading="lazy"
alt="压缩分区和删除分区"
class="gallery-image"
data-flex-grow="310"
data-flex-basis="744px"
>&lt;/p>
&lt;p>由于我想让Ubuntu和Windows共用之前Windows独占的固态硬盘空间，因此我只能选择压缩分区（Windows装在C盘），并且由于这是Windows系统所在分区，因此还会降低压缩能力。为了最大化压缩出来的空间，首先将系统重启并且关掉所有能关掉的系统进程与服务，其次是关闭掉C盘的硬盘保护。实验证明，关闭掉硬盘保护后能够压缩的空间比关之前多了两倍！硬盘保护的开关在&lt;strong>系统面板-&amp;gt;更改设置-&amp;gt;系统保护&lt;/strong>选项卡中，在压缩完毕分区后可以再把硬盘保护打开。压缩完毕后磁盘中会多出一个“未分配”的区域，这便是之后Ubuntu安装的位置。&lt;/p>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2018-09/LinuxDualSystem/close_drive_protection.png"
width="1224"
height="679"
loading="lazy"
alt="磁盘保护的开关位置"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="432px"
>&lt;/p>
&lt;h3 id="制作启动盘">制作启动盘&lt;/h3>
&lt;p>如果你有现成的启动盘当然就可以跳过这一步了~这个步骤对于经常装机的同学来说肯定是so easy，过程说到底也就是从官网下一个ISO镜像然后刻录进光盘或者U盘。不过这里我倒是想推荐一个制作启动盘的软件——&lt;a class="link" href="https://rufus.akeo.ie/" target="_blank" rel="noopener"
>&lt;strong>Rufus&lt;/strong>&lt;/a>，制作流程十分直接，选择ISO后直接按照默认设置就能烧好一个启动盘~之前一直用的是UltraISO，但是完全就是大材小用，而且还收费，只能使用试用版，令强迫症相当不爽。&lt;/p>
&lt;h3 id="运行安装程序">运行安装程序&lt;/h3>
&lt;p>插入启动盘后重启进Boot Menu，选择从启动盘启动，然后就按照Linux的安装流程走了~需要解释的是在选择分区的那一步，如果没有什么特殊需要的话其实直接选择&amp;quot;Install Ubuntu alongside with Windows Boot Manage&amp;quot;（默认的第一个选项）就可以了，但如果想自己定义分区大小、挂载点和boot设置的话就选最后一条&amp;quot;Something else&amp;quot;，然后分区的设置可以参考&lt;a class="link" href="https://www.libinx.com/2017/five-steps-win10-ubuntu-dual-boot/" target="_blank" rel="noopener"
>之前提到的博文&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>需要指出的是，我参考这篇文章最后没有能用Windows Boot Manager来启动Ubuntu，还是只能使用Ubuntu附带的丑陋的GRUB，原因是我的Windows是UEFI安装，这个模式下Windows Boot Manager只能启动Windows系统（可以启动不同版本的）而不能启动Linux。具体解释可以参考&lt;a class="link" href="https://neosmart.net/wiki/easybcd/uefi/" target="_blank" rel="noopener"
>EasyBCD的官网说明&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>安装完毕以后可以将系统的更新源设置在国内的镜像库（如清华）上，可以使更新快一点。具体方法是进入&lt;code>系统设置-&amp;gt;软件和更新-&amp;gt;下载至&lt;/code>之中选择&lt;code>http://mirrors.tuna.tsinghua.edu.cn/ubuntu&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;h3 id="解决一些系统冲突">解决一些系统冲突&lt;/h3>
&lt;p>在安装完双系统后，如果没有什么意外的话就可以进入Ubuntu啦~但是我在进入后发现有两个问题，一个是时间错位，另一个是另外的系统分区（NTFS格式下的）无法打开。&lt;/p>
&lt;p>时间错位的现象是你在进入Ubuntu后再登录Windows，会发现Windows的时间被更改了，与实际时间错位了几个小时。这是由于Ubuntu与Windows的默认时区表示方式不同，导致Ubuntu会修改主板时间。解决方案可以参考&lt;a class="link" href="https://askubuntu.com/questions/169376/clock-time-is-off-on-dual-boot" target="_blank" rel="noopener"
>AskUbuntu上的问题&lt;/a>，我选择的方法是运行&lt;code>timedatectl set-local-rtc 1&lt;/code>。&lt;/p>
&lt;p>装系统之前的NTFS分区无法打开，并且会提示“Windows is hibernated, refused to mount”。其原因是Windows的快速启动阻止Ubuntu的访问，将Windows的快速启动功能关掉即可。&lt;a class="link" href="https://blog.csdn.net/ysy950803/article/details/52780863" target="_blank" rel="noopener"
>详情可参见CSDN贴&lt;/a>。&lt;/p>
&lt;h3 id="调整grub的设置">调整GRUB的设置&lt;/h3>
&lt;p>我这安装完双系统之后，默认启动的顺序是linux在前，而我想把Windows设为默认启动系统。这里就需要更改GRUB的配置文件，用sudo加vim或者gedit打开&lt;code>/etc/default/grub&lt;/code>, 更改里面的&lt;code>GRUB_DEFAULT&lt;/code>值为Windows在GRUB界面的顺序即可，保存后用&lt;code>sudo update-grub&lt;/code>覆盖已有配置即可完成更改。此外在GRUB设置中还有个&lt;code>GRUB_GFXMODE&lt;/code>选项，如果想更改GRUB界面的分辨率的话可以将其更改为需要的分辨率。GRUB支持的分辨率可以在GRUB界面按&lt;code>c&lt;/code>进入命令行，输入videoinfo命令查看。&lt;/p>
&lt;h2 id="ubuntu工作环境的配置">Ubuntu工作环境的配置&lt;/h2>
&lt;p>安装完系统之后就是一些软件以及环境的配置啦~&lt;/p>
&lt;h3 id="常用程序安装">常用程序安装&lt;/h3>
&lt;p>由于我很少使用Linux，因此在Ubuntu下常用的程序也很少，大概有这些:&lt;/p>
&lt;ul>
&lt;li>Firefox: 虽然Ubuntu自带，但是还是更新一下版本比较好&lt;/li>
&lt;li>Visual Studio Code: 没有Visual Studio，写代码只能用它了&lt;/li>
&lt;li>Anaconda: Python环境，系统自带的Python经常会被各种软件弄乱（如ROS），因此还是装个Anaconda。最好不用sudo安装，放在&lt;code>/home&lt;/code>底下就可以了。
&lt;blockquote>
&lt;p>如果今后在编译Python扩展相关的代码时要用Anaconda的python（如使用Anaconda编译pycaffe），那么在&lt;code>~/.bashrc&lt;/code>末尾加一行&lt;code>export LD_LIBRARY_PATH=$&amp;lt;Anaconda根目录&amp;gt;/lib:${LD_LIBRARY_PATH}&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>git: 这就不解释了&lt;/li>
&lt;li>GitKraken：一个非常好使的Git GUI&lt;/li>
&lt;li>CMake: 写跨平台代码时会用到&lt;/li>
&lt;li>aria2c: 快一点的下载器&lt;/li>
&lt;li>synaptic: 图形化deb包管理&lt;/li>
&lt;/ul>
&lt;p>这些程序的安装要么用&lt;code>sudo apt install&lt;/code>，要么从官网下载&lt;code>.deb&lt;/code>文件双击安装，非常简单~&lt;/p>
&lt;blockquote>
&lt;p>此外，还可以安装一个&lt;strong>中文输入法&lt;/strong>，&lt;a class="link" href="https://blog.csdn.net/ljheee/article/details/52966048" target="_blank" rel="noopener"
>使用ibus的话&lt;/a>会比较好看（&lt;a class="link" href="https://askubuntu.com/questions/1030418/how-to-change-text-entry-in-ubuntu-18-04" target="_blank" rel="noopener"
>Gnome中设置输入法参见这里&lt;/a>）。如果想安装GooglePinyin或者搜狗拼音的安装包，也可以在系统设置中添加中文语言支持，然后将输入法换成fcitx即可。&lt;/p>
&lt;/blockquote>
&lt;h3 id="ubuntu美化">Ubuntu美化&lt;/h3>
&lt;p>如果你忍受不了ubuntu默认的界面风格的话可以对Ubuntu进行美化。具体而言，效果明显的改进就是换主题和图标啦~&lt;/p>
&lt;ol>
&lt;li>安装Gnome桌面，具体命令代码如下：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo add-apt-repository ppa:gnome3-team/gnome3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt update &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> sudo apt install gnome-shell ubuntu-gnome-desktop
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>安装时如果提醒选择X Server的话选择&lt;code>gdm3&lt;/code>。安装完毕后在用户登陆界面中，用户名的右边按钮选择Gnome桌面登陆。另外，如果是安装的18.04应该是自带Gnome桌面了，安装就会简单不少。&lt;/p>
&lt;/blockquote>
&lt;ol start="2">
&lt;li>安装Tweak工具，这个在应用商店中可以找到。安装完毕后在Extension中打开User themes开关。&lt;/li>
&lt;li>安装主题和图标，我选择的是Arc-Darker主题和Papirus图标包。前者的安装方式是在&lt;a class="link" href="https://software.opensuse.org/download.html?project=home%3AHorst3180&amp;amp;package=arc-theme" target="_blank" rel="noopener"
>作者的OBS Repo&lt;/a>中下载&lt;code>.deb&lt;/code>文件直接安装，后者则是使用如下代码&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo add-apt-repository ppa:papirus/papirus
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get install papirus-icon-theme
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>安装完毕后在Tweak中选择主题和图标包即可&lt;/p>
&lt;blockquote>
&lt;p>其他美化方法可以参照知乎中的&lt;a class="link" href="https://www.zhihu.com/question/20509148/answer/44518012" target="_blank" rel="noopener"
>该回答&lt;/a>和&lt;a class="link" href="https://zhuanlan.zhihu.com/p/36200924" target="_blank" rel="noopener"
>该文章&lt;/a>。另外如果最开始就打算安装Gnome3的话可以考虑安装Gnome Ubuntu（最高版本是16.04.5）或者更新的Ubuntu（默认就是Gnome）。&lt;/p>
&lt;/blockquote>
&lt;h3 id="nvidia显卡驱动安装">NVIDIA显卡驱动安装&lt;/h3>
&lt;p>由于后面还是打算拿这个系统跑深度学习的，因此显卡还是要装的~首先是驱动安装。安装驱动有两种方式，一个是使用&lt;code>.run&lt;/code>文件，另一种则是使用apt install，后一种比较简单，在安装全新的系统时推荐使用后面一种。&lt;/p>
&lt;ol>
&lt;li>使用&lt;code>.run&lt;/code>文件安装&lt;/li>
&lt;/ol>
&lt;p>从官网下载&lt;code>.run&lt;/code>驱动，下载以后放到一个好找的目录下。之后打开终端，输入&lt;code>sudo service lightdm stop&lt;/code>关闭X Server的显示，然后按&lt;kbd>Ctrl&lt;/kbd>+&lt;kbd>Alt&lt;/kbd>+&lt;kbd>F1&lt;/kbd>进入tty模式。找到驱动文件对应的目录，输入如下命令开始安装驱动&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo chmod +x NVIDIA-Linux-x86_64-XXX.YY.run
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo ./NVIDIA-Linux-x86_64-XXX.YY.run
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>安装过程中的各种选项按需选择即可。安装完毕后再输入&lt;code>sudo service lightdm start&lt;/code>即可重新打开图形界面。&lt;/p>
&lt;ol start="2">
&lt;li>使用apt进行安装&lt;/li>
&lt;/ol>
&lt;p>打开命令行输入下列命令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo add-apt-repository ppa:graphics-drivers
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get install nvidia-XXX
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>安装完重启即可。安装结束时可能会提醒你关掉主板的Secure Boot，按照提示完成即可。&lt;/p>
&lt;h3 id="安装cuda">安装CUDA&lt;/h3>
&lt;blockquote>
&lt;p>CUDA的安装同样有两种方式，一种是使用.run，一种是使用.deb。后者是官方推荐的，而且相比之下deb文件不含驱动，很少有冲突，并且这样对CUDA的卸载和升级更加方便。如果网速比较好的话可以选择Online形式的deb包，这样使用起来就和一般repository差不多了，能自动升级，但是如果连接NVidia的网速不太行的话还是用Offline的deb包更方便。&lt;/p>
&lt;/blockquote>
&lt;p>用N卡做计算加速的话CUDA是必需的。从&lt;a class="link" href="https://developer.nvidia.com/cuda-downloads" target="_blank" rel="noopener"
>官网下载&lt;code>.deb&lt;/code>文件&lt;/a>，然后在终端运行如下命令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo dpkg -i &amp;lt;CUDA的.deb文件路径&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get install cuda
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>安装完成后修改环境变量。在终端输入&lt;code>sudo gedit ~/.bashrc&lt;/code>，然后在文件末尾添加如下几行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># CUDA environment&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">CUDA_HOME&lt;/span>&lt;span class="o">=&lt;/span>/usr/local/cuda
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">LD_LIBRARY_PATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">CUDA_HOME&lt;/span>&lt;span class="si">}&lt;/span>/lib64:&lt;span class="si">${&lt;/span>&lt;span class="nv">LD_LIBRARY_PATH&lt;/span>&lt;span class="si">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">PATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">CUDA_HOME&lt;/span>&lt;span class="si">}&lt;/span>/bin:&lt;span class="si">${&lt;/span>&lt;span class="nv">PATH&lt;/span>&lt;span class="si">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>注意Linux下PATH的分隔符是冒号&lt;code>:&lt;/code>而不是分号&lt;code>;&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>然后重启终端或者使用&lt;code>sudo ldconfig&lt;/code>命令使环境变量生效。验证是否安装成功可以通过编译官方的CUDA Samples完成&lt;/p>
&lt;h3 id="安装cudnn">安装CuDNN&lt;/h3>
&lt;blockquote>
&lt;p>这里采用的是&lt;code>.tar&lt;/code>压缩包安装方法，官网还提供&lt;code>.deb&lt;/code>安装文件，貌似可以CUDA+CuDNN一起安装&lt;/p>
&lt;/blockquote>
&lt;p>CuDNN是利用N卡给神经网络计算做加速的库，也是必需的。CuDNN的安装仅仅是把几个库文件拷到CUDA目录下就可以了。从&lt;a class="link" href="http://developer.nvidia.com/rdp/cudnn-download" target="_blank" rel="noopener"
>官网下载CuDNN库的&lt;code>.tgz&lt;/code>文件&lt;/a>，解压后打开终端进入到解压后的目录，然后运行如下命令即可&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo cp -P cuda/include/cudnn.h /usr/local/cuda/include
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo cp -P cuda/lib64/libcudnn* /usr/local/cuda/lib64
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo chmod a+r /usr/local/cuda/include/cudnn.h
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>题一下我这里遇到的问题。我在之后安装完tensorflow后发现Tensorflow仍然找不到CuDNN，排除了目录不正确的可能之后发现是libcudnn.so.6.0.20文件的权限设置不正确。不知道为什么压缩包里解压出来的这个文件的权限是&lt;code>-rwxr-xr-x&lt;/code>，与其他的.so文件不同。之后我用&lt;code>chmod&lt;/code>命令将权限改成正常的&lt;code>-rw-r--r--&lt;/code>后即可正常使用Tensorflow了。&lt;/p>
&lt;/blockquote>
&lt;h3 id="安装ros">安装ROS&lt;/h3>
&lt;p>ROS也是我今后工作中会常用到的框架。目前ROS进行LTS支持的版本是Kinetic，并且刚好Kinetic也是支持Ubuntu 16.04的版本，因此我们就安装Kinetic版本的ROS框架。依次执行如下命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo sh -c &lt;span class="s1">&amp;#39;echo &amp;#34;deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main&amp;#34; &amp;gt; /etc/apt/sources.list.d/ros-latest.list&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get install ros-kinetic-desktop-full
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo rosdep init
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rosdep update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get install python-rosinstall
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pip install trollius catkin-tools rospkg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后一行是为ros的Python开发提供支持，其中trollius是catkin-tools的依赖项。安装完之后可以在&lt;code>.bashrc&lt;/code>文件里添加环境设置，使得ros的命令能默认在终端里执行。在终端输入&lt;code>sudo gedit ~/.bashrc&lt;/code>，然后在文件末尾添加如下几行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># add ROS environment&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> /opt/ros/kinetic/setup.bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>ROS是否安装成功可以通过运行ROS示例来测试。&lt;/p>
&lt;blockquote>
&lt;p>若要使用TUNA镜像，可以将第一行命令中的&lt;code>http://packages.ros.org/ros/ubuntu&lt;/code>换成&lt;code>https://mirrors.tuna.tsinghua.edu.cn/ros/ubuntu/&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;p>整个安装到这就差不多结束了~Ubuntu的使用还是没有Windows那么友好的，不过在编程环境的配置方面还是能省不少事。以后买新电脑后甚至会考虑让这台机子常开Ubuntu当个服务器使了。&lt;/p></description></item><item><title>利器 - Visual Studio &amp; Visual Studio Code</title><link>https://zyxin.xyz/blog/2018-02/ToolVisualStudio/</link><pubDate>Fri, 02 Feb 2018 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2018-02/ToolVisualStudio/</guid><description>&lt;p>这两大软件是我平时开发的主力软件，因此也将其插件配置分享出来~&lt;/p>
&lt;h2 id="visual-studio">Visual Studio&lt;/h2>
&lt;p>VS由于功能已经足够强大了，完全不是很需要插件的存在。不过确实VS还是有不少美中不足的地方的，因此插件也还是会装的~&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=NikolaMSFT.InlineColorPicker" target="_blank" rel="noopener"
>&lt;strong>Inline Color Picker&lt;/strong>&lt;/a>：在代码中将颜色代码对应的颜色标记出来。（注：这个功能在VSCode中已经有部分支持了）&lt;/li>
&lt;li>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=WholeTomatoSoftware.VisualAssist" target="_blank" rel="noopener"
>&lt;strong>Visual Assists&lt;/strong>&lt;/a>：VA是个大名鼎鼎的VS插件，提供丰富的代码提示和代码重构功能。但是由于功能实在太强大，导致VS加载变慢很多，而它的功能只是锦上添花不要也罢，因此我一直都把它禁用了。&lt;/li>
&lt;li>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=SteveCadwallader.CodeMaid" target="_blank" rel="noopener"
>&lt;strong>CodeMaid&lt;/strong>&lt;/a>：提供丰富的代码整理功能。感觉用的并不多，因此也禁用着= =。&lt;/li>
&lt;li>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=MikeWard-AnnArbor.VSColorOutput" target="_blank" rel="noopener"
>&lt;strong>VSColorOutput&lt;/strong>&lt;/a>：将输出窗口的文字显示不同的颜色。很好奇这么常用的功能为什么VS没有实现。。
&lt;ul>
&lt;li>搜索时发现一个相似插件&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=NikolayBalakin.Outputenhancer" target="_blank" rel="noopener"
>&lt;strong>Output enhancer&lt;/strong>&lt;/a>，会试试这个好不好用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="visual-studio-code">Visual Studio Code&lt;/h2>
&lt;p>VSCode本身作为一个代码编辑器，可拓展的地方就有很多了。在编程语言和界面语言的支持上，基本每种语言都有对应的插件，因此在这里只列举语言支持之外的插件。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack" target="_blank" rel="noopener"
>&lt;strong>Remove Development Pack&lt;/strong>&lt;/a>：VSCode杀手功能！支持SSH到远程服务器写代码，也支持直接到docker和WSL里面写代码。远程连接十分方便，并且带宽需求很少。&lt;/li>
&lt;li>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=vector-of-bool.cmake-tools" target="_blank" rel="noopener"
>&lt;strong>CMake Tools&lt;/strong>&lt;/a>：提供CMake工程的支持，在状态栏添加快捷窗口，很方便。注意与&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=twxs.cmake" target="_blank" rel="noopener"
>&lt;strong>CMake&lt;/strong>&lt;/a>语言支持插件区分。有时候CMake Tools比较烦人，比如在写ROS package的时候，这时可以选择只装CMake语言插件。&lt;/li>
&lt;li>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=hdg.live-html-previewer" target="_blank" rel="noopener"
>&lt;strong>Live HTML Previewer&lt;/strong>&lt;/a>：提供HTML页面的即时预览，不支持JS和CSS的动态更新。如果需要非常即时的更新的话可以考虑使用&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=negokaz.live-server-preview" target="_blank" rel="noopener"
>&lt;strong>Live Server HTML&lt;/strong>&lt;/a>。&lt;/li>
&lt;li>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=cssho.vscode-svgviewer" target="_blank" rel="noopener"
>&lt;strong>SVG Viewer&lt;/strong>&lt;/a>：提供SVG文件的浏览。注意与&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=jock.svg" target="_blank" rel="noopener"
>&lt;strong>SVG&lt;/strong>&lt;/a>语言支持插件区分，后者好像更强大，但是我一般只是看图用。&lt;/li>
&lt;li>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=robertohuertasm.vscode-icons" target="_blank" rel="noopener"
>&lt;strong>vscode-icons&lt;/strong>&lt;/a>：VSCode上最老牌的图标包，图标很全！&lt;/li>
&lt;li>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=slevesque.vscode-hexdump" target="_blank" rel="noopener"
>&lt;strong>hexdump for VSCode&lt;/strong>&lt;/a>：将文件通过二进制形式查看，类似于Notepad++的&lt;strong>HEX-Editor&lt;/strong>插件。&lt;/li>
&lt;li>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=tomoki1207.pdf" target="_blank" rel="noopener"
>&lt;strong>vscode-pdf&lt;/strong>&lt;/a>：提供浏览PDF文件的支持，PDF打开速度不慢&lt;/li>
&lt;li>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=GrapeCity.gc-excelviewer" target="_blank" rel="noopener"
>&lt;strong>Excel Viewer&lt;/strong>&lt;/a>：浏览Excel和CSV数据非常方便！还附带筛选功能&lt;/li>
&lt;li>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=James-Yu.latex-workshop" target="_blank" rel="noopener"
>&lt;strong>Latex Workshop&lt;/strong>&lt;/a>：Latex配套工具，需要预先安装Latex发行版（如MikTex），提供编译、预览、实时更新等功能&lt;/li>
&lt;li>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced" target="_blank" rel="noopener"
>&lt;strong>Markdown Preview Enhanced&lt;/strong>&lt;/a>: 相比内置的Markdown预览提供更高性能的公式渲染。&lt;/li>
&lt;li>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree" target="_blank" rel="noopener"
>&lt;strong>TODO Tree&lt;/strong>&lt;/a>: 便于查看所有的TODO和FIXME。&lt;/li>
&lt;li>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=bierner.emojisense" target="_blank" rel="noopener"
>&lt;strong>:emojisense:&lt;/strong>&lt;/a>: 给Markdown添加emoji代码的提示，十分好用！&lt;/li>
&lt;li>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens" target="_blank" rel="noopener"
>&lt;strong>GitLens&lt;/strong>&lt;/a>: 提供每行、每文件的git history、git blame&lt;/li>
&lt;li>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph" target="_blank" rel="noopener"
>&lt;strong>Git Graph&lt;/strong>&lt;/a>: 在VSCode里直接打开git graph！直观查看git历史~&lt;/li>
&lt;/ul></description></item><item><title>利器 - VST &amp; DSP 插件</title><link>https://zyxin.xyz/blog/2018-02/ToolFXPlugins/</link><pubDate>Fri, 02 Feb 2018 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2018-02/ToolFXPlugins/</guid><description>&lt;h2 id="vst-插件">VST 插件&lt;/h2>
&lt;p>VST的全称是&lt;a class="link" href="http://en.wikipedia.org/wiki/Virtual_Studio_Technology" target="_blank" rel="noopener"
>Virtual Studio Technology&lt;/a>，指的是将音色合成器和效果器整合进音频编辑和录制软件的一种软件接口，而VST插件就指的是一些符合这个接口格式的合成器和效果器。很多软件都支持VST插件，如我用过的&lt;strong>FL Studio&lt;/strong>、&lt;strong>Adobe Audition&lt;/strong>、&lt;strong>Overture&lt;/strong>等，这些插件可以扩展音色、丰富音乐效果。&lt;/p>
&lt;h3 id="synth-音色合成器">Synth (音色合成器)&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="http://www.musiclab.com/products/" target="_blank" rel="noopener"
>&lt;strong>MusicLab Real系列&lt;/strong>&lt;/a>：MusicLab家的&lt;strong>RealGuitar&lt;/strong>、&lt;strong>RealLPC&lt;/strong>、&lt;strong>RealStrat&lt;/strong>三剑客是著名的吉他音色合成器，不仅音色醇正，而且支持和弦操作&lt;/li>
&lt;li>&lt;a class="link" href="https://www.roland.com/global/products/hq_orchestral/" target="_blank" rel="noopener"
>&lt;strong>HQ Orchestral&lt;/strong>&lt;/a>：罗兰三剑客&lt;strong>Hyper Canvas&lt;/strong>、&lt;strong>Super Quartet&lt;/strong>、&lt;strong>HQ Orchestra&lt;/strong>之一，体积很小但却能模拟出很精致的管弦乐音色&lt;/li>
&lt;li>&lt;a class="link" href="https://www.native-instruments.com/en/products/komplete/synths/massive/" target="_blank" rel="noopener"
>&lt;strong>Massive&lt;/strong>&lt;/a>：电子乐制作中很多大牌音乐人都有用到的合成器，同样是基于三波形合成，但是界面很友好&lt;/li>
&lt;li>&lt;a class="link" href="https://www.lennardigital.com/sylenth1/" target="_blank" rel="noopener"
>&lt;strong>Sylenth1&lt;/strong>&lt;/a>：体积精简的合成器，能仿真出很多音色&lt;/li>
&lt;/ul>
&lt;h3 id="sampler-采样器">Sampler (采样器)&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.native-instruments.com/en/products/komplete/samplers/kontakt-5/" target="_blank" rel="noopener"
>&lt;strong>Kontakt 5&lt;/strong>&lt;/a>：在软件推荐时也有提到Kontakt。Kontakt是一个音色采样加载器，可以加载很多实际采样出来的高清音质&lt;/li>
&lt;li>&lt;a class="link" href="http://www.ikmultimediachina.com/products/cat-view.php?C=family-sampletank" target="_blank" rel="noopener"
>&lt;strong>Sample Tank&lt;/strong>&lt;/a>：与Kontakt相似，同样是知名的采样加载器。但相比之下我更喜欢Kontakt的用户体验&lt;/li>
&lt;/ul>
&lt;h3 id="equalizer-均衡器">Equalizer (均衡器)&lt;/h3>
&lt;ul>
&lt;li>【&lt;strong>Fabfilter Pro-Q 2&lt;/strong>](&lt;a class="link" href="https://www.fabfilter.com/products/pro-q-2-equalizer-plug-in" target="_blank" rel="noopener"
>https://www.fabfilter.com/products/pro-q-2-equalizer-plug-in&lt;/a>)：这也是十分著名的均衡器了，界面美观，操作方便！&lt;/li>
&lt;/ul>
&lt;h2 id="dsp-插件">DSP 插件&lt;/h2>
&lt;p>DSP就是常说的Digital Signal Processing，由于对音频的操作其实就是数字信号处理，因此音频的特效插件也被称为DSP插件。这里主要推荐的是我在&lt;strong>Foobar2000&lt;/strong>中使用的音效插件。&lt;/p>
&lt;blockquote>
&lt;p>注意，音效并不能提高音质，反而常常会损失音质，因此慎用&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a class="link" href="http://wiki.hydrogenaud.io/index.php?title=Foobar2000:Components/Winamp_DSP_Bridge_%28foo_dsp_winamp%29" target="_blank" rel="noopener"
>&lt;strong>Winamp DSP Bridge&lt;/strong>&lt;/a>：让Winamp的DSP插件也能用在FB2K中的插件。Winamp有丰富的音效插件，这个插件就能让你在FB2K中享受Winamp的音效。&lt;/li>
&lt;li>&lt;strong>VST Bridge&lt;/strong>：同理，该插件可以将VST插件接入到FB2K中&lt;/li>
&lt;li>&lt;strong>DFX Audio Enhancer&lt;/strong>：功能比较单一的音效增强器，最有用的就是超重低音，但是会对音质有很大损失&lt;/li>
&lt;li>&lt;strong>Advanced Limiter&lt;/strong>：Foobar自带，防止削波（会产生刺耳的声音）。只要音质不是那么差几乎用不到&lt;/li>
&lt;li>&lt;a class="link" href="https://www.dolby.com/us/en/technologies/dolby-headphone.html" target="_blank" rel="noopener"
>&lt;strong>Dolby Headphone&lt;/strong>&lt;/a>：在双声道中模拟出5.1甚至7.1声道的效果。听歌一般也没有5.1吧。。可能只有看蓝光时有用。&lt;/li>
&lt;li>&lt;a class="link" href="https://www.dolby.com/us/en/technologies/dolby-pro-logic-ii.html" target="_blank" rel="noopener"
>&lt;strong>Dolby Pro Logic II&lt;/strong>&lt;/a>：将双声道变成5.1声道。但由于自己一直用耳机听所以没有用。&lt;/li>
&lt;li>&lt;a class="link" href="http://wiki.hydrogenaud.io/index.php?title=Foobar2000:Components/Soundtouch_%28foo_dsp_soundtouch%29" target="_blank" rel="noopener"
>&lt;strong>Soundtouch&lt;/strong>&lt;/a>：调节播放速度、声调等，很实用的插件。&lt;/li>
&lt;/ul></description></item><item><title>利器 - Windows</title><link>https://zyxin.xyz/blog/2018-02/ToolWindows/</link><pubDate>Thu, 01 Feb 2018 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2018-02/ToolWindows/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>说明&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>本文推荐 &lt;strong>Windows 10/11&lt;/strong> 下本人常用的软件。选择标准大概是&lt;strong>功能够用&lt;/strong>、&lt;strong>体积小&lt;/strong>、&lt;strong>文件污染少&lt;/strong>、&lt;strong>界面整洁&lt;/strong>，个人喜好仅供参考~&lt;/li>
&lt;li>除了软件推荐网站外(如&lt;a class="link" href="https://www.appinn.com/" target="_blank" rel="noopener"
>小众软件&lt;/a>、&lt;a class="link" href="https://www.iplaysoft.com/" target="_blank" rel="noopener"
>异次元软件&lt;/a>)，有很多其他的推荐列表，如Github上的&lt;a class="link" href="https://github.com/AmazingApps/Amazing-Windows-Apps" target="_blank" rel="noopener"
>Amazing-Windows-Apps&lt;/a>、&lt;a class="link" href="https://github.com/zhbhun/blog/blob/master/source/_drafts/system/Awesome-Window.md" target="_blank" rel="noopener"
>zhbhun博客&lt;/a>也很不错。&lt;/li>
&lt;li>软件安装可以选择去官网下载安装包，或者使用新的&lt;a class="link" href="https://github.com/microsoft/winget-cli" target="_blank" rel="noopener"
>Winget&lt;/a> + &lt;a class="link" href="https://winstall.app/" target="_blank" rel="noopener"
>Winstall&lt;/a>套装。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>标记说明：
&lt;ul>
&lt;li>Free: 有免费版 (freeware)&lt;/li>
&lt;li>Portable: 有免安装版本&lt;/li>
&lt;li>Open-source: 开源&lt;/li>
&lt;li>Replaceable: 虽然很优秀，但是有替代品或不常用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="通用">通用&lt;/h2>
&lt;h3 id="驱动">驱动&lt;/h3>
&lt;ul>
&lt;li>&lt;del>&lt;a class="link" href="https://drp.su/en" target="_blank" rel="noopener"
>&lt;strong>DriverPack&lt;/strong>&lt;/a> &lt;sup>Free&lt;/sup>&lt;/del>
&lt;ul>
&lt;li>驱动自动更新软件，界面不错，而且有一些额外功能&lt;/li>
&lt;li>在安装时需要手动取消捆绑安装，曾经比X大师和XX精灵干净点，现在已经半斤八两了。关于捆绑软件的问题&lt;a class="link" href="https://www.appinn.com/driverpack/" target="_blank" rel="noopener"
>参见AppInn&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://www.aida64.com/downloads" target="_blank" rel="noopener"
>&lt;strong>AIDA64&lt;/strong>&lt;/a>
&lt;ul>
&lt;li>硬件参数查看和烤机软件，比较全面。如果喜欢简洁一点的可以使用&lt;a class="link" href="https://cpuid.com/softwares/cpu-z.html" target="_blank" rel="noopener"
>&lt;strong>CPU-z&lt;/strong>&lt;/a>和&lt;a class="link" href="https://www.techpowerup.com/download/techpowerup-gpu-z/" target="_blank" rel="noopener"
>&lt;strong>GPU-z&lt;/strong>&lt;/a>&lt;/li>
&lt;li>不免费，不过用的情况也很少，一般是装机或者超频完用一下，因此试用版也够用了。如有需要可以上&lt;a class="link" href="http://cracksurl.com/aida64/" target="_blank" rel="noopener"
>CRACKsurl&lt;/a>找Keygen。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://www.hwinfo.com/download/" target="_blank" rel="noopener"
>&lt;strong>HWiNFO&lt;/strong>&lt;/a> &lt;sup>Free &amp;amp; Portable&lt;/sup>
&lt;ul>
&lt;li>另一款&lt;strong>CPU-z&lt;/strong>与&lt;strong>GPU-z&lt;/strong>的结合体，但是不如AIDA64稳定&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="压缩">压缩&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.rarlab.com/" target="_blank" rel="noopener"
>&lt;strong>WinRAR&lt;/strong>&lt;/a>
&lt;ul>
&lt;li>老牌压缩软件，压缩很方便。恢复记录和加密都很有用。&lt;/li>
&lt;li>现在有&lt;a class="link" href="http://www.winrar.com.cn/" target="_blank" rel="noopener"
>中文官网&lt;/a>了，不过看着不靠谱。&lt;/li>
&lt;li>由于WinRAR在解压时需要缓存空间，因此解压大文件时可将缓存位置设在同一盘符下。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://www.bandisoft.com/bandizip/" target="_blank" rel="noopener"
>&lt;strong>Bandizip&lt;/strong>&lt;/a> &lt;sup>Free&lt;/sup>
&lt;ul>
&lt;li>功能比较全面，界面有很友好的解压软件！完全可以替代&lt;strong>7-Zip&lt;/strong>。&lt;/li>
&lt;li>右键菜单可以进行压缩文件预览，还有自动解压的贴心功能（自动识别单个压缩根目录文件夹的情况）&lt;/li>
&lt;li>相比WinRAR由于没有恢复记录功能，因此较少使用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="http://imgburn.com/" target="_blank" rel="noopener"
>&lt;strong>ImgBurn&lt;/strong>&lt;/a> &lt;sup>Free&lt;/sup>
&lt;ul>
&lt;li>用来烧写和读取光盘镜像（ISO文件）的软件，提到镜像烧写软件除了UltraISO一般都会提到ImgBurn。简洁好用、功能充足。&lt;/li>
&lt;li>虽然不是压缩软件，但是由于&lt;code>.iso&lt;/code>文件经常被当作压缩文件使用，因此也放在此类。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://advanced-rar-repair.en.softonic.com/" target="_blank" rel="noopener"
>&lt;strong>Advanced Rar Repair&lt;/strong>&lt;/a> &lt;sup>Free &amp;amp; Portable&lt;/sup>
&lt;ul>
&lt;li>用来修复损坏的压缩包（包括没有恢复记录的）。成功率低，但聊胜于无啊！恢复一点是一点。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="输入法">输入法&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="http://qq.pinyin.cn/" target="_blank" rel="noopener"
>&lt;strong>QQ输入法&lt;/strong>&lt;/a> &lt;sup>Free&lt;/sup>
&lt;ul>
&lt;li>听起来很Low，但实际上用起来十分稳定，功能也足够丰富，哪怕试过别的输入法我也没换过。&lt;/li>
&lt;li>手机我也使用的QQ输入法，手机端的功能甚至更强大，但是词典库与电脑好象是独立的？&lt;/li>
&lt;li>输入法皮肤用的是&lt;a class="link" href="https://pan.baidu.com/s/1jJsiDZg" target="_blank" rel="noopener"
>北方栖姬&lt;/a>，有需要的可以点链接下载。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="文件整理">文件整理&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.ccleaner.com/defraggler" target="_blank" rel="noopener"
>&lt;strong>Defraggler&lt;/strong>&lt;/a> &lt;sup>Free&lt;/sup>
&lt;ul>
&lt;li>著名垃圾清理器&lt;strong>CCleaner&lt;/strong>的同门师弟，用来整理磁盘碎片，简便易用。
&lt;ul>
&lt;li>碎片整理对机械硬盘有一定加速效果，但据说固态硬盘不应使用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>听说有个能够进行优化碎片整理的软件&lt;a class="link" href="https://www.iobit.com/en/iobitsmartdefrag.php" target="_blank" rel="noopener"
>&lt;strong>Smart Defrag 5&lt;/strong>&lt;/a>，不过由于没用过，就不推荐了。&lt;/li>
&lt;li>Windows自带的碎片整理也是能用的，而且可以定期整理以降低一次运行的压力。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://jam-software.com/treesize_free/" target="_blank" rel="noopener"
>&lt;strong>TreeSize (Free)&lt;/strong>&lt;/a> &lt;sup>Portable&lt;/sup>
&lt;ul>
&lt;li>磁盘空间可视化软件，我用来清理垃圾。相比于傻瓜式垃圾清理软件，自己清理可以删除更多东西，同时也是重新审视文件布局的过程。&lt;/li>
&lt;li>TreeSize有免费版和专业版，免费版对我已经完全够用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="http://www.uderzo.it/main_products/space_sniffer/" target="_blank" rel="noopener"
>&lt;strong>Space Sniffer&lt;/strong>&lt;/a> &lt;sup>Portable&lt;/sup>
&lt;ul>
&lt;li>同样是空间可视化软件，但是该软件的可视化效果是二维呈现的，更为直观。&lt;/li>
&lt;li>由于二维绘制较为耗时，因此使用上不如&lt;strong>TreeSize&lt;/strong>速度快。不过保存扫描快照的功能使得我也很常用这个软件。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;del>&lt;a class="link" href="https://www.krksoft.com/" target="_blank" rel="noopener"
>&lt;strong>Directory Lister (Pro)&lt;/strong>&lt;/a>&lt;/del> &lt;sup>Replaceable&lt;/sup>
&lt;ul>
&lt;li>文件列表生成器，在备份和转移文件时挺有用。我会把这个软件用来整理音乐资源。&lt;/li>
&lt;li>软件有试用版和专业版，由于其实使用频率很低，因此试用版即够用。另外，这个软件的功能其实可以通过随便写个脚本就能解决，因此不那么推荐，仅供不时之需。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://www.chuyu.me/en/index.html" target="_blank" rel="noopener"
>&lt;strong>Dism++&lt;/strong>&lt;/a> &lt;sup>Free &amp;amp; Portable&lt;/sup>
&lt;ul>
&lt;li>是Windows内置工具Dism的升级版，功能强大。&lt;/li>
&lt;li>提供很多系统管理功能，不过我最常用的是磁盘清理，能够清理系统更新残留和安装包残留。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="http://www.thewindowsclub.com/10appsmanager-windows-10" target="_blank" rel="noopener"
>&lt;strong>10AppsManager&lt;/strong>&lt;/a> (10AM) &lt;sup>Free &amp;amp; Portable&lt;/sup>
&lt;ul>
&lt;li>功能很简单：卸载或重装Windows内置应用，强迫症福音&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://archive.codeplex.com/?p=hddguardian" target="_blank" rel="noopener"
>&lt;strong>HDD Guardian&lt;/strong>&lt;/a> &lt;sup>Open-sourced&lt;/sup>
&lt;ul>
&lt;li>用来查看监测硬盘信息，简洁小巧&lt;/li>
&lt;li>如果需要详细检查硬盘坏道的话还是需要其他软件，如&lt;a class="link" href="http://www.hdtune.com/download.html" target="_blank" rel="noopener"
>&lt;strong>HD Tune&lt;/strong>&lt;/a>，&lt;a class="link" href="http://hddscan.com/" target="_blank" rel="noopener"
>&lt;strong>HDD Scan&lt;/strong>&lt;/a>，&lt;a class="link" href="https://macrorit.com/partition-magic-manager/partition-expert-download.html" target="_blank" rel="noopener"
>&lt;strong>Macrorit Partition Expert&lt;/strong>&lt;/a>。其中第一个最专业，但是新版本不免费。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/chrdavis/SmartRename" target="_blank" rel="noopener"
>&lt;strong>SmartRename&lt;/strong>&lt;/a> &lt;sup>Open-sourced&lt;/sup>
&lt;ul>
&lt;li>用来批量重命名文件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="文件备份">文件备份&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/Yutaka-Sawada/MultiPar" target="_blank" rel="noopener"
>&lt;strong>MultiPar&lt;/strong>&lt;/a> &lt;sup>Free&lt;/sup>
&lt;ul>
&lt;li>生成对多个文件的冗余修复（即RAR恢复记录，除了RAR基本之有这个方法了&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;del>&lt;a class="link" href="https://www.duplicati.com/" target="_blank" rel="noopener"
>&lt;strong>Duplicati&lt;/strong>&lt;/a> &lt;sup>Open-sourced&lt;/sup>&lt;/del> &lt;sup>Replaceable&lt;/sup>
&lt;ul>
&lt;li>远程增量备份软件，支持加密和压缩&lt;/li>
&lt;li>更新太慢了，现在我使用的是Duplicacy&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://duplicacy.com/" target="_blank" rel="noopener"
>&lt;strong>Duplicacy&lt;/strong>&lt;/a> &lt;sup>*Free&lt;/sup>
&lt;ul>
&lt;li>稳定性比Duplicati好（Feature更新快）&lt;/li>
&lt;li>只有CLI的免费的，想要界面的话需要付费&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="浏览器">浏览器&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.google.com/chrome" target="_blank" rel="noopener"
>&lt;strong>Google Chrome&lt;/strong>&lt;/a> &lt;sup>Free&lt;/sup>
&lt;ul>
&lt;li>这个都不用推荐了，基本已经是装机必备品了。目前最好用的浏览器之一，重在快，以及插件极其丰富&lt;/li>
&lt;li>关于插件的推荐详见另一篇博文——&lt;a class="link" href="https://zyxin.xyz/blog/2018-02/ToolBrowser/" >浏览器插件&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://www.microsoft.com/zh-cn/windows/microsoft-edge" target="_blank" rel="noopener"
>&lt;strong>Microsoft Edge&lt;/strong>&lt;/a>
&lt;ul>
&lt;li>Windows10内置浏览器，尽管目前不是很好用，但速度快、更新快，而且有很多有创意的功能。&lt;/li>
&lt;li>相比于Chrome，使用Edge的一个理由是占用内存少。Chrome是出了名的内存吞噬者，而Edge就好很多。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="网络">网络&lt;/h2>
&lt;h3 id="下载上传">下载/上传&lt;/h3>
&lt;ul>
&lt;li>&lt;del>&lt;a class="link" href="https://www.internetdownloadmanager.com/" target="_blank" rel="noopener"
>&lt;strong>Internet Download Manager&lt;/strong> (IDM)&lt;/a>&lt;/del>&lt;sup>Replaceable&lt;/sup>
&lt;ul>
&lt;li>也是老牌文件下载器了，一直使用的原因就是快！非常快！另外，网站抓取的功能也很实用。&lt;/li>
&lt;li>不是免费软件，价格也不算贵，可以考虑入正支持支持。&lt;/li>
&lt;li>有浏览器支持，但不是很好用，一些需要认证或者Cookie的文件还是得用内置下载。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://www.freedownloadmanager.org/" target="_blank" rel="noopener"
>&lt;strong>Free Download Manager&lt;/strong> (FDM)&lt;/a> &lt;sup>Open-Sourced&lt;/sup>
&lt;ul>
&lt;li>顾名思义，是一个开源的文件下载器。据称速度能赶上IDM，实际用下来速度倒是不差，而且对浏览器的支持比IDM好。&lt;/li>
&lt;li>界面对高分屏不太友好，体验上感觉像是迅雷。但是比类似的&lt;strong>EagleGet&lt;/strong>要稳定。&lt;/li>
&lt;li>有一个基于著名下载工具&lt;strong>Aria2&lt;/strong>的下载器叫&lt;a class="link" href="https://github.com/persepolisdm/persepolis" target="_blank" rel="noopener"
>&lt;strong>Persepolis&lt;/strong>&lt;/a>，感觉没有这个用着方便，功能超出日常地强大了。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="http://z-o-o-m.eu/" target="_blank" rel="noopener"
>&lt;strong>FileUploader&lt;/strong>&lt;/a> &lt;sup>Free &amp;amp; Portable&lt;/sup>
&lt;ul>
&lt;li>支持很多很多网站的上传的客户端，但由于目前上传需求较少，因此使用频率较低。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;del>&lt;a class="link" href="https://www.speedpan.com/" target="_blank" rel="noopener"
>&lt;strong>SpeedPan&lt;/strong>&lt;/a> &lt;sup>Free &amp;amp; Portable&lt;/sup>&lt;/del> &lt;sup>Replaceable&lt;/sup>
&lt;ul>
&lt;li>良心软件！可以直接下载百度云而且不限速，还能搜索百度云资源&lt;/li>
&lt;li>已挂勿念，买个会员吧哈哈哈哈&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://rclone.org/" target="_blank" rel="noopener"
>&lt;strong>Rclone&lt;/strong>&lt;/a> &lt;sup>Portable &amp;amp; Open-sourced&lt;/sup>
&lt;ul>
&lt;li>支持各路网盘的文件同步（国内的除外），并且支持目录mounting（类似于虚拟硬盘）&lt;/li>
&lt;li>配合&lt;a class="link" href="https://github.com/mmozeiko/RcloneBrowser/releases" target="_blank" rel="noopener"
>&lt;strong>RcloneBrowser&lt;/strong>&lt;/a>使用更方便~&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="代理">代理&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/XX-net/XX-Net" target="_blank" rel="noopener"
>&lt;strong>XX-Net&lt;/strong>&lt;/a> &lt;sup>Open-Sourced &amp;amp; Portable&lt;/sup>
&lt;ul>
&lt;li>GoAgent的后继人，虽然速度不快，但应付日常使用完全足够了~重点是免费！hhh&lt;/li>
&lt;li>配合IPv6食用更佳&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://www.proxifier.com/" target="_blank" rel="noopener"
>&lt;strong>Proxifier&lt;/strong>&lt;/a>
&lt;ul>
&lt;li>可以强行将进程的HTTP请求重定向到指定代理地址。配合代理软件这样可以做到让一些程序强行走代理。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="远程协作">远程协作&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="https://mobaxterm.mobatek.net/" target="_blank" rel="noopener"
>&lt;strong>MobaXTerm&lt;/strong>&lt;/a>
&lt;ul>
&lt;li>功能极其完善的SSH客户端，比&lt;a class="link" href="https://www.netsarang.com/en/all-downloads/" target="_blank" rel="noopener"
>XShell&lt;/a>功能更全，整合性更好，秒杀Putty五条街&lt;/li>
&lt;li>自带X11服务器！！这是end of game级别的功能了！我配置成功的X11环境只有MobaXTerm。。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://www.teamviewer.com/zhCN/" target="_blank" rel="noopener"
>&lt;strong>TeamViewer&lt;/strong>&lt;/a> &lt;sup>Free&lt;/sup>
&lt;ul>
&lt;li>非常流畅的远程桌面客户端，跨平台支持很多系统，包括Windows，Linux甚至Android！&lt;/li>
&lt;li>连接十分方便，只要知道代码即可。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="社交">社交&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://im.qq.com/index.shtml" target="_blank" rel="noopener"
>&lt;strong>QQ&lt;/strong>&lt;/a> &lt;sup>Free&lt;/sup>
&lt;ul>
&lt;li>虽然很多人诟病QQ功能太花哨，但实际上我认为QQ能做到这么多功能的集成，并保证程序的流畅性已经实属出色。另外新版的QQ已经几乎没有广告的打扰了。&lt;/li>
&lt;li>微信我不装电脑板，因为它不清理缓存，很臃肿，而且体验差。偶尔需要使用时会选择&lt;a class="link" href="https://wx.qq.com/" target="_blank" rel="noopener"
>网页版&lt;/a>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://office.qq.com/" target="_blank" rel="noopener"
>&lt;strong>TIM&lt;/strong>&lt;/a> &lt;sup>Free&lt;/sup>
&lt;ul>
&lt;li>TIM的定位是“QQ办公简洁版”，TIM的流畅度还有待提升，但其进步值得期待。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;del>&lt;a class="link" href="https://slack.com" target="_blank" rel="noopener"
>&lt;strong>Slack&lt;/strong>&lt;/a> &lt;sup>Free&lt;/sup>&lt;/del> &lt;sup>Replaceable&lt;/sup>
&lt;ul>
&lt;li>适合团队合作使用的软件，目前团队里会使用这个软件进行资料分享和交流。&lt;/li>
&lt;li>每个群组都需要建Workspace才能用，并且需要单独登录，实在是很反人类&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://discord.com/" target="_blank" rel="noopener"
>&lt;strong>Discord&lt;/strong>&lt;/a> &lt;sup>Free&lt;/sup>
&lt;ul>
&lt;li>游戏语音功能非常流畅，视频功能也还可以&lt;/li>
&lt;li>虽然界面和Slack有点像，但是Discord可以私聊&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://zulip.com" target="_blank" rel="noopener"
>&lt;strong>Zulip&lt;/strong>&lt;/a> &lt;sup>Open-Sourced&lt;/sup>
&lt;ul>
&lt;li>支持话题分类的群组聊天软件，感觉这个在办公上会比Slack好用多了！&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="开发">开发&lt;/h2>
&lt;h3 id="环境">环境&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.anaconda.com/" target="_blank" rel="noopener"
>&lt;strong>Anaconda&lt;/strong>&lt;/a> &lt;sup>Open-Sourced&lt;/sup>
&lt;ul>
&lt;li>由于Python是现在越来越常见的一种语言，因此把它的环境也放在推荐里了。&lt;/li>
&lt;li>Anaconda是我认为最好用的&lt;strong>Python&lt;/strong>发行包，不仅有必要的科学运算库的整合，还整合了conda环境，提供二进制包管理和虚拟环境&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://git-scm.com/" target="_blank" rel="noopener"
>&lt;strong>Git&lt;/strong>&lt;/a> &lt;sup>Open-Sourced&lt;/sup>
&lt;ul>
&lt;li>Git环境大概是码农必备的吧~不过Git不仅仅可以用来管理代码，管理一些文档和论文也是很不错的！&lt;/li>
&lt;li>Git本身的GUI很难用，主要用命令行，GUI的话可以使用下面推荐的&lt;strong>GitKraken&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://www.gitkraken.com/" target="_blank" rel="noopener"
>&lt;strong>GitKraken&lt;/strong>&lt;/a> &lt;sup>Free&lt;/sup>
&lt;ul>
&lt;li>GitKraken是基于&lt;strong>Electron&lt;/strong>的Git客户端，跨平台且十分好用。唯一让我比较介意的是它自己更新时不会自动把旧版本删除。。&lt;/li>
&lt;li>GitKraken分为Free、Pro、Enterprise三种版本，免费已经完全够用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://cmake.org/" target="_blank" rel="noopener"
>&lt;strong>CMake&lt;/strong>&lt;/a> &lt;sup>Open-Sourced&lt;/sup>
&lt;ul>
&lt;li>CMake是现在非常流行的编译工具，大型的C++项目很多都会通过CMake编译，其他语言的工程也会有通过CMake来进行组织的。&lt;/li>
&lt;li>CMake自带的GUI也比较好用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="编辑器">编辑器&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="https://code.visualstudio.com/" target="_blank" rel="noopener"
>&lt;strong>Visual Studio Code&lt;/strong>&lt;/a> (VSCode) &lt;sup>Open-Sourced&lt;/sup>
&lt;ul>
&lt;li>好用到无话可说的代码编辑器！有此一个工具，其他代码相关软件都可以不用装了！可以替代&lt;strong>PyCharm&lt;/strong>、&lt;strong>Code Blocks&lt;/strong>、&lt;strong>MarkdownPad&lt;/strong>等等大部分工具&lt;/li>
&lt;li>VSCode的定位是介于文本编辑器和IDE之间的软件，但更偏重文本编辑。相似软件有&lt;strong>Atom&lt;/strong>、&lt;strong>Sublime Text&lt;/strong>，但现在都没有VSCode强大了！&lt;/li>
&lt;li>VSCode插件列表参见&lt;a class="link" href="https://zyxin.xyz/blog/2018-02/ToolVisualStudio/" >这篇博文&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://notepad-plus-plus.org/" target="_blank" rel="noopener"
>&lt;strong>NotePad++&lt;/strong>&lt;/a> &lt;sup>Free &amp;amp; Portable&lt;/sup>
&lt;ul>
&lt;li>重量级文本编辑器，轻量级代码编辑器。从名字来看它应该是作为Windows记事本的替代品，实际上我也是这么用的，打开文本快如闪电！&lt;/li>
&lt;li>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/464565089" target="_blank" rel="noopener"
>作者的政治立场有问题&lt;/a>，不过该用还是可以用的，只是我是不会用了&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://mh-nexus.de/en/hxd/" target="_blank" rel="noopener"
>&lt;strong>HxD&lt;/strong>&lt;/a> &lt;sup>Free&lt;/sup>
&lt;ul>
&lt;li>二进制内容的查看虽然VSCode也支持，但是还是专用的软件性能更好&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="ide">IDE&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.visualstudio.com/zh-hans/vs/" target="_blank" rel="noopener"
>&lt;strong>Microsoft Visual Studio&lt;/strong>&lt;/a>
&lt;ul>
&lt;li>最好用的IDE，没有之一。目前用作C#、C++、Python开发主力的IDE。&lt;/li>
&lt;li>有很多版本，Express版本是免费版，完全够用。&lt;/li>
&lt;li>通过&lt;a class="link" href="https://www.visualstudio.com/vs/msft-android-emulator/" target="_blank" rel="noopener"
>Visual Studio Android Emulator&lt;/a>等模拟器可以进行 跨平台开发。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://sourceforge.net/projects/orwelldevcpp/" target="_blank" rel="noopener"
>&lt;strong>Dev-C++&lt;/strong>&lt;/a> (DevCpp) &lt;sup>Free&lt;/sup>
&lt;ul>
&lt;li>默认使用GCC编译器的C/C++语言IDE，安装和使用都比较方便。不过我只拿DevCpp来刷OJ和写一些小的测试项目，大项目还是都上VS。&lt;/li>
&lt;li>与&lt;strong>Code Blocks&lt;/strong>很相似，不过我感觉虽然DevCpp不更新了，但它更简洁更快，而且主要是用习惯了。&lt;/li>
&lt;li>其实配置习惯以后DevCpp和Code Blocks都可以被VSCode替换掉。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://developer.android.com/studio/index.html" target="_blank" rel="noopener"
>&lt;strong>Android Studio&lt;/strong>&lt;/a> &lt;sup>Open-Sourced&lt;/sup>
&lt;ul>
&lt;li>最好用的Android开发环境，推荐它没有别的意思，只是因为它比Eclipse好用太多！= =&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://www.jetbrains.com" target="_blank" rel="noopener"
>&lt;strong>JetBrains&lt;/strong>&lt;/a> &lt;sup>Free&lt;/sup>
&lt;ul>
&lt;li>著名的IDE套装，Java版（IntelliJ），Python版（PyCharm），C++版（CLion）都是对应语言非常流行的IDE&lt;/li>
&lt;li>不足之处就是JetBrains套装都有点吃内存，跟Chrome一样&lt;/li>
&lt;li>学生不仅可以免费使用Edu版，而且好像可以申请Pro版！&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="开发辅助工具">开发辅助工具&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="http://sqlitebrowser.org/" target="_blank" rel="noopener"
>&lt;strong>DB Browser for SQLite&lt;/strong>&lt;/a> (DB4S) &lt;sup>Open-Sourced &amp;amp; Portable&lt;/sup>
&lt;ul>
&lt;li>SQLite开发时会用到这个工具，查看和查询数据库内容非常方便！&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://www.telerik.com/fiddler" target="_blank" rel="noopener"
>&lt;strong>Fiddler&lt;/strong>&lt;/a> &lt;sup>Free&lt;/sup>
&lt;ul>
&lt;li>HTTP抓包软件，也是业内知名了，做爬虫和第三方软件时很常用。比&lt;strong>Wireshark&lt;/strong>要简单很多。&lt;/li>
&lt;li>在设置好Proxy之后甚至可以做到安卓抓包&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://serialport.en.softonic.com/" target="_blank" rel="noopener"
>&lt;strong>Serial Port Utility&lt;/strong>&lt;/a> &lt;sup>Free&lt;/sup>
&lt;ul>
&lt;li>用过的界面最好看的串口调试助手，功能也比较齐全。用来辅助单片机开发&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;del>&lt;a class="link" href="http://www.regexbuddy.com/" target="_blank" rel="noopener"
>&lt;strong>RegexBuddy&lt;/strong>&lt;/a>&lt;/del> &lt;sup>Replaceable&lt;/sup>
&lt;ul>
&lt;li>正则表达式助手，能够解释正则表达式，并测试指定文本，适合学习和调试正则表达式&lt;/li>
&lt;li>由于是收费版，因此如果功能需求不多，可以考虑**Notepad++**的插件&lt;a class="link" href="http://nppregexhelper.sourceforge.net/" target="_blank" rel="noopener"
>&lt;strong>RegEx&lt;/strong>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://sourceforge.net/projects/regshot/" target="_blank" rel="noopener"
>&lt;strong>RegShot&lt;/strong>&lt;/a> &lt;sup>Free&lt;/sup>
&lt;ul>
&lt;li>注册表快照软件，现在很少用了。主要用它来监控软件安装和运行过程中修改的注册表内容，避免软件暗中捣鬼，也能在软件卸掉以后通过它来清空注册表&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="http://www.becyhome.de/becyicongrabber/description_eng.htm" target="_blank" rel="noopener"
>&lt;strong>BeCyIconGrabber&lt;/strong>&lt;/a> &lt;sup>Portable&lt;/sup>
&lt;ul>
&lt;li>功能很单一，就是提取exe、dll等文件中的图标资源，有时候能发挥大作用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;del>&lt;a class="link" href="https://cmder.net/" target="_blank" rel="noopener"
>&lt;strong>Cmder&lt;/strong>&lt;/a> &lt;sup>Open-Sourced&lt;/sup>&lt;/del> &lt;sup>Replaceable&lt;/sup>
&lt;ul>
&lt;li>非常好用的终端，可以用cmd、PowerShell、WSL bash等作后端&lt;/li>
&lt;li>在Windows上现在Windows Terminal更好用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/Microsoft/Terminal" target="_blank" rel="noopener"
>Windows Terminal&lt;/a> &lt;sup>Open-Sourced&lt;/sup>
&lt;ul>
&lt;li>由微软官方开发的现代终端，支持多后端&lt;/li>
&lt;li>UI设计比较现代，不过在一些性能上好像不如VSCode的终端&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="多媒体">多媒体&lt;/h2>
&lt;h3 id="播放器">播放器&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="http://www.foobar2000.org/" target="_blank" rel="noopener"
>&lt;strong>Foobar2000&lt;/strong>&lt;/a> (FB2K) &lt;sup>Free&lt;/sup>
&lt;ul>
&lt;li>功能最全的音乐播放器，由于提供插件和皮肤机制，可定制程度极高！&lt;/li>
&lt;li>关于FB2K的插件和DSP效果器的推荐还会有新的博文来介绍。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="http://potplayer.daum.net/?lang=zh_CN" target="_blank" rel="noopener"
>&lt;strong>PotPlayer&lt;/strong>&lt;/a> &lt;sup>Free&lt;/sup>
&lt;ul>
&lt;li>功能最全的视频播放器，同样有皮肤定制功能。视频播放的相关功能也很完备！&lt;/li>
&lt;li>PotPlayer还为平板电脑提供了触控支持，非常赞！&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;del>&lt;a class="link" href="https://github.com/AncientLysine/BiliLocal" target="_blank" rel="noopener"
>&lt;strong>Bililocal&lt;/strong>&lt;/a> &lt;sup>Open-Sourced &amp;amp; Portable&lt;/sup>&lt;/del> &lt;sup>Replaceable&lt;/sup>
&lt;ul>
&lt;li>在线搜索B站弹幕并与本地视频一起播放的软件，由于番剧我一般都是下载下来看，因此看番时我会选择这个。&lt;/li>
&lt;li>可以通过&lt;a class="link" href="https://danmu2ass.codeplex.com/" target="_blank" rel="noopener"
>&lt;strong>Danmu2Ass&lt;/strong>&lt;/a>与弹幕下载来结合，由于Bililocal作者很久不更新了，之后会尝试这个方案。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="http://www.irfanview.com/" target="_blank" rel="noopener"
>&lt;strong>IrfanView&lt;/strong>&lt;/a> &lt;sup>Free&lt;/sup>
&lt;ul>
&lt;li>功能最全的图片浏览器，提供完备的图像查看和转换功能和基本的图像处理功能。&lt;/li>
&lt;li>支持批处理，因此在整理图片时非常有用！&lt;/li>
&lt;li>对PDF和SVG虽然支持，但是体验不好，两者可以直接通过浏览器查看。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;del>&lt;a class="link" href="http://www.xiami.com/apps/mobile" target="_blank" rel="noopener"
>&lt;strong>虾米音乐&lt;/strong>&lt;/a>&lt;/del> &lt;sup>Replaceable&lt;/sup>
&lt;ul>
&lt;li>在几大流行在线音乐网站里面我选择了虾米，不是因为其软件很好用，而是因为用久了。另外虾米的日系歌曲也是比较全的，因此常用虾米。&lt;/li>
&lt;li>虾米的桌面客户端非常辣鸡：老版的应用久不更新，不支持高分屏，体验极差；新版的16年才出现，基于Electron但是很卡，功能也很少，不得不吐槽一下。&lt;/li>
&lt;li>虾米在2021关停了，RIP&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://www.last.fm/zh/about/trackmymusic#desktop-windows" target="_blank" rel="noopener"
>&lt;strong>Last.fm&lt;/strong>&lt;/a> (Scrobbler)
&lt;ul>
&lt;li>用了很久Last.fm，由于其实在线听歌的时间不多，很多都是听CD和硬盘里收藏的东西，因此会选择离线听歌。这时就用Last.fm来进行听歌记录。&lt;/li>
&lt;li>Last.fm比较强的一点其实是社交和推荐功能，但由于它本身不提供音乐，因此其他功能就用的比较少了。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/ciderapp/Cider" target="_blank" rel="noopener"
>&lt;strong>Cider&lt;/strong>&lt;/a>
&lt;ul>
&lt;li>第三方苹果音乐客户端，天下苦iTunes久矣！&lt;/li>
&lt;li>我感觉这个软件的UI比官方做的还好&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="媒体管理">媒体管理&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="http://exactaudiocopy.de/" target="_blank" rel="noopener"
>&lt;strong>Exact Audio Copy&lt;/strong>&lt;/a> &lt;sup>Free&lt;/sup>
&lt;ul>
&lt;li>抓CD必备软件，能够尽最大可能确保音质不在抓取过程中损失。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://www.mp3tag.de/en/" target="_blank" rel="noopener"
>&lt;strong>Mp3Tag&lt;/strong>&lt;/a> &lt;sup>Free&lt;/sup>
&lt;ul>
&lt;li>编辑音乐文件内置Tag信息的软件，功能完备，使用方便~唯一比较在意的是名字太土了- -，一直不改&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://molunerfinn.com/PicGo/" target="_blank" rel="noopener"
>&lt;strong>PicGo&lt;/strong>&lt;/a> &lt;sup>Open-Sourced&lt;/sup>
&lt;ul>
&lt;li>图片分享软件，相比&lt;strong>ShareX&lt;/strong>而言支持各种国内图床。这对在一些论坛发帖有需要~&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="媒体处理">媒体处理&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.adobe.com/creativecloud/catalog/desktop.html" target="_blank" rel="noopener"
>&lt;strong>Adobe 套装&lt;/strong>&lt;/a>
&lt;ul>
&lt;li>大名鼎鼎，毋须介绍，媒体处理还是以Adobe家的工具最好用啊&lt;/li>
&lt;li>我常用的产品有：
&lt;ul>
&lt;li>&lt;strong>Photoshop&lt;/strong>: 图像处理。有一个开源的替代品是&lt;a class="link" href="https://www.gimp.org/" target="_blank" rel="noopener"
>&lt;strong>GIMP&lt;/strong>&lt;/a>，但还是没有Photoshop好用。&lt;/li>
&lt;li>&lt;strong>Audition&lt;/strong>: 音频处理。包括去噪、裁剪、混合等等。部分功能可以用&lt;strong>Reaper&lt;/strong>来完成&lt;/li>
&lt;li>&lt;strong>Lightroom&lt;/strong>: 照片后期。做修图是非常方便的！
&lt;ul>
&lt;li>针对图像处理有一套Adobe插件叫&lt;a class="link" href="https://www.google.com/nikcollection/" target="_blank" rel="noopener"
>&lt;strong>Nik Collection&lt;/strong>&lt;/a>，配合Lightroom后调色十分方便。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Premiere Pro&lt;/strong>: 视频剪辑。做一些简单的特效是没问题的&lt;/li>
&lt;li>&lt;strong>After Effects&lt;/strong>: 视频特效软件，复杂特效很多通过After Effects完成&lt;/li>
&lt;li>&lt;strong>Media Encoder&lt;/strong>: 视频转码软件。虽然很专业，但是感觉支持的格式还没有&lt;strong>格式工厂&lt;/strong>多。。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Adobe家的资源基本都可以在&lt;a class="link" href="http://www.lookae.com/" target="_blank" rel="noopener"
>LookAE&lt;/a>上找到。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://vectormagic.com/" target="_blank" rel="noopener"
>&lt;strong>Vector Magic&lt;/strong>&lt;/a> &lt;sup>Portable&lt;/sup>
&lt;ul>
&lt;li>很强大的位图转矢量图软件，可以定义颜色数，定义平滑程度等等，效果很好。还能导出成Illustrator格式&lt;/li>
&lt;li>对提取图标、提取素材非常有用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://obsproject.com/download" target="_blank" rel="noopener"
>&lt;strong>Open Broadcaster&lt;/strong>&lt;/a> &lt;sup>Open-Sourced&lt;/sup>
&lt;ul>
&lt;li>开源的直播软件，&lt;del>不过我没有用过就是了&lt;/del>&lt;/li>
&lt;li>有一个类似软件&lt;strong>XSplit Broadcaster&lt;/strong>，也木有用过&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://www.microsoft.com/en-us/research/product/computational-photography-applications/image-composite-editor/" target="_blank" rel="noopener"
>&lt;strong>Image Composite Editor&lt;/strong>&lt;/a> (ICE)&lt;sup>Free&lt;/sup>
&lt;ul>
&lt;li>全景照片合成软件，我软出品的系列精品~&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://www.audacityteam.org/" target="_blank" rel="noopener"
>&lt;strong>Audacity&lt;/strong>&lt;/a> &lt;sup>Open-Sourced&lt;/sup>
&lt;ul>
&lt;li>单轨音频编辑软件，有点类似以前的&lt;strong>GoldWave&lt;/strong>，重在开源&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://handbrake.fr/" target="_blank" rel="noopener"
>&lt;strong>HandBrake&lt;/strong>&lt;/a> &lt;sup>Open-Sourced&lt;/sup>
&lt;ul>
&lt;li>功能比较齐全的视频格式转码软件，可以替代&lt;a class="link" href="https://macroplant.com/adapter" target="_blank" rel="noopener"
>&lt;strong>Adapter&lt;/strong>&lt;/a>和&lt;a class="link" href="http://www.glorylogic.com/video-converter.html" target="_blank" rel="noopener"
>&lt;strong>500th Video Converter&lt;/strong>&lt;/a>。（不过界面还是Adapter最友好。）&lt;/li>
&lt;li>和Adapter都支持SRT格式字幕嵌入&lt;/li>
&lt;li>需要更专业选项的话可以考虑&lt;a class="link" href="https://maruko.appinn.me/index.html" target="_blank" rel="noopener"
>&lt;strong>小丸工具箱&lt;/strong>&lt;/a>，转码+压制的专业工具，十分良心但是最近不怎么更新了。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="编曲">编曲&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.image-line.com/flstudio/" target="_blank" rel="noopener"
>&lt;strong>FL Studio&lt;/strong>&lt;/a>
&lt;ul>
&lt;li>&lt;a class="link" href="https://en.wikipedia.org/wiki/Digital_audio_workstation" target="_blank" rel="noopener"
>DAW&lt;/a>软件也是种类繁多，百家争鸣，但我最喜欢的还是FL，因为作为初学者，这个上手最简单~~&lt;/li>
&lt;li>以前常用的是FL11，现在的新版本FL12用户操作友好了很多&lt;/li>
&lt;li>FL的插件和&lt;strong>VST&lt;/strong>插件也会在其他博文中进行介绍&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://www.reaper.fm/" target="_blank" rel="noopener"
>&lt;strong>Reaper&lt;/strong>&lt;/a>
&lt;ul>
&lt;li>Reaper是一个介于编曲与音频编辑之间的软件，也是被很多人推荐的软件。可以将音频、视频和MIDI衔接在一起并进行Mastering&lt;/li>
&lt;li>有60天适用期，而且好象是按照使用时间算的？非常人性！&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://www.native-instruments.com/zh/products/komplete/samplers/kontakt-5/" target="_blank" rel="noopener"
>&lt;strong>Kontakt&lt;/strong>&lt;/a>
&lt;ul>
&lt;li>Kontakt是一个通用的音色库，可以通过加载音色文件来加载很多音色，然后连接到DAW中。如果在编曲时想混入乐器或者自然声，用Kontakt是很有用的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="系统增强">系统增强&lt;/h2>
&lt;h3 id="文件同步">文件同步&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="https://onedrive.live.com" target="_blank" rel="noopener"
>&lt;strong>OneDrive&lt;/strong>&lt;/a>
&lt;ul>
&lt;li>Windows亲儿子，系统集成度高。尽管空间不大，但是常用文件的同步十分好用&lt;/li>
&lt;li>其他可选软件有&lt;strong>Google Drive&lt;/strong>，&lt;strong>七牛云&lt;/strong>等等，但由于集成优势，我还是选择OneDrive！另外Google Drive要翻墙也是硬伤。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://support.google.com/drive/answer/7329379" target="_blank" rel="noopener"
>&lt;strong>GoogleDriveFS&lt;/strong>&lt;/a>
&lt;ul>
&lt;li>Google Drive Stream可以添加虚拟盘符，在能翻墙的情况下还是很好用的&lt;/li>
&lt;li>如果你有美帝高校的账号，可能就会附带Google Drive的空间，使用起来就很舒服了&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="文件管理">文件管理&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="http://www.listary.com/" target="_blank" rel="noopener"
>&lt;strong>Listary&lt;/strong>&lt;/a> &lt;sup>Free&lt;/sup>
&lt;ul>
&lt;li>好评如潮的工具，用来进行文件索引和快速访问，还可以将文件选取对话框定位到打开的文件夹。&lt;/li>
&lt;li>还可以绑定快捷键，作为一个自动化工具使用。&lt;/li>
&lt;li>可以看作另一个著名工具&lt;a class="link" href="http://www.voidtools.com/" target="_blank" rel="noopener"
>&lt;strong>Everything&lt;/strong>&lt;/a>的升级版&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://www.chuyu.me/en/index.html" target="_blank" rel="noopener"
>&lt;strong>Dism++&lt;/strong>&lt;/a> &lt;sup>Free &amp;amp; Portable&lt;/sup>
&lt;ul>
&lt;li>同样也是很有名的工具，用来对系统进行垃圾清理以及启动项管理。&lt;/li>
&lt;li>体积小、功能多的良心软件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="http://implbits.com/products/hashtab/" target="_blank" rel="noopener"
>&lt;strong>HashTab&lt;/strong>&lt;/a> &lt;sup>Free&lt;/sup>
&lt;ul>
&lt;li>能在文件属性界面中添加一个选项卡显示文件的Hash值，小巧实用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://www.aomeitech.com/aomei-partition-assistant.html" target="_blank" rel="noopener"
>&lt;strong>Aomei Partition Manager&lt;/strong>&lt;/a> &lt;sup>Free&lt;/sup>
&lt;ul>
&lt;li>功能强大的分区管理软件，甚至可以通过内置WinPE来压缩系统盘的空间&lt;/li>
&lt;li>针对NTFS文件系统，如果有装Linux双系统的话可能会在对应硬盘上破坏掉Linux的分区&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="截图">截图&lt;/h3>
&lt;blockquote>
&lt;p>基本的截图工具Windows是有内置的，叫Snipping Tool，在Win10 1809后有Snip &amp;amp; Sketch，可以在通知中心直接调出。另外也可以通过系统快捷方式来完成简单的截图，&lt;kbd>Win&lt;/kbd>+&lt;kbd>Shift&lt;/kbd>+&lt;kbd>S&lt;/kbd>选框截图，(&lt;kbd>Ctrl&lt;/kbd>+)&lt;kbd>PrtScn&lt;/kbd>全屏截图，&lt;kbd>Alt&lt;/kbd>+&lt;kbd>PrtScn&lt;/kbd>截取当前窗口。
然后录屏功能的话Windows的Game Console可以直接录像，按&lt;kbd>Win&lt;/kbd>+&lt;kbd>G&lt;/kbd>可以调出&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a class="link" href="https://zh.snipaste.com/" target="_blank" rel="noopener"
>&lt;strong>Snipaste&lt;/strong>&lt;/a> &lt;sup>Free &amp;amp; Portable&lt;/sup>
&lt;ul>
&lt;li>强大的截图软件，除了截图应有的功能外它还可以把剪贴板中的内容固定在屏幕上，这个意外有用的功能也是它名字的由来。&lt;/li>
&lt;li>&lt;a class="link" href="https://www.v2ex.com/t/295433" target="_blank" rel="noopener"
>V2EX上有个作者自己写的功能介绍&lt;/a>，功能十分贴心。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="http://www.softpedia.com/get/Multimedia/Graphic/Graphic-Others/TakeColor.shtml" target="_blank" rel="noopener"
>&lt;strong>TakeColor&lt;/strong>&lt;/a> &lt;sup>Free &amp;amp; Portable&lt;/sup>
&lt;ul>
&lt;li>功能十分单纯的软件，用来屏幕&lt;strong>实时&lt;/strong>取色，有时候想动态地分析图像的颜色就可以用这个软件了。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/ShareX/ShareX" target="_blank" rel="noopener"
>&lt;strong>ShareX&lt;/strong>&lt;/a> &lt;sup>Open-sourced &amp;amp; Portable&lt;/sup>
&lt;ul>
&lt;li>屏幕截图+屏幕录像+集成上传，非常使用。还有额外的一些小工具，例如计算Hash，编码转换等等&lt;/li>
&lt;li>可以替代&lt;a class="link" href="http://ngwin.com/picpick" target="_blank" rel="noopener"
>&lt;strong>PicPick&lt;/strong>&lt;/a>、&lt;a class="link" href="https://www.bandicam.com/" target="_blank" rel="noopener"
>&lt;strong>Bandicam&lt;/strong>&lt;/a>、&lt;a class="link" href="http://www.slavasoft.com/hashcalc/" target="_blank" rel="noopener"
>&lt;strong>HashCalc&lt;/strong>&lt;/a>等工具，并且最棒的是开源！&lt;/li>
&lt;li>录屏如果要求不高的话，通常还是使用系统自带的&lt;code>Win+G&lt;/code>打开XBox工具进行录制。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://www.bandisoft.com/honeycam/" target="_blank" rel="noopener"
>&lt;strong>Honeycam&lt;/strong>&lt;/a> &lt;sup>Free&lt;/sup>
&lt;ul>
&lt;li>有录屏、录屏+转换GIF、图片转GIF等功能。&lt;del>虽然不直接支持视频转GIF，但是用播放器+录屏就可以了&lt;/del>&lt;/li>
&lt;li>GIF的质量和色域可以调整，这个非常实用&lt;/li>
&lt;li>免费版有水印，但是水印非常小&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="文件浏览器">文件浏览器&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.windows10.pro/rightmenumgr-download/" target="_blank" rel="noopener"
>&lt;strong>RightMenuMgr&lt;/strong>&lt;/a> &lt;sup>Free&lt;/sup>
&lt;ul>
&lt;li>国人开发的右键菜单管理软件，功能基本够用，不过很久没有更新了&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;!-- 其他待测软件：
https://github.com/AmrEldib/WindowsContextMenuCustomizations
https://github.com/Ehryk/ContextMenuTools
https://github.com/Fleex255/ContextIcons -->
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.lopesoft.com/index.php/en/filemenutools" target="_blank" rel="noopener"
>&lt;strong>FileMenu Tools&lt;/strong>&lt;/a>
&lt;ul>
&lt;li>不仅支持右键菜单管理，而且支持添加自定义命令。美中不足的是软件收费。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://www.microsoft.com/en-us/p/quicklook/9nv4bs3l1h4s" target="_blank" rel="noopener"
>&lt;strong>QuickLook&lt;/strong>&lt;/a> &lt;sup>Open-sourced&lt;/sup>
&lt;ul>
&lt;li>支持多种文件的预览，在文件浏览器中选中文件按空格即可。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="手势">手势&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="http://www.yingdev.com/projects/wgestures" target="_blank" rel="noopener"
>&lt;strong>WGesture&lt;/strong>&lt;/a> &lt;sup>Open-sourced&lt;/sup>
&lt;ul>
&lt;li>通过鼠标手势的方式支持很多小功能，很强大&lt;/li>
&lt;li>支持通过中键、右键、侧键来触发&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="http://gesturesign.win/" target="_blank" rel="noopener"
>&lt;strong>GestureSign&lt;/strong>&lt;/a> &lt;sup>Open-sourced&lt;/sup>
&lt;ul>
&lt;li>从&lt;strong>WGesture&lt;/strong>衍生而来，支持触屏手势&lt;/li>
&lt;li>基于UWP，可以从Microsoft Store下载&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="http://sao.gpbeta.com/" target="_blank" rel="noopener"
>&lt;strong>SAOUtils&lt;/strong>&lt;/a>
&lt;ul>
&lt;li>刀剑神域风格的系统启动器，通过鼠标下拉触发，界面仿的太到位了！功能也是很强大，不过最近没有更新了&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="任务栏">任务栏&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="https://entropy6.com/xmeters/" target="_blank" rel="noopener"
>&lt;strong>XMeters&lt;/strong>&lt;/a> &lt;sup>Free&lt;/sup>
&lt;ul>
&lt;li>能够在任务栏美观地显示CPU、内存、硬盘和网络使用情况，不错的小工具&lt;/li>
&lt;li>另一款软件&lt;a class="link" href="http://www.cfos.de/zh-cn/cfosspeed/cfosspeed.htm" target="_blank" rel="noopener"
>&lt;strong>cFosSpeed&lt;/strong>&lt;/a>除了网速显示外还能够降低网络延迟，但没用过也就不推荐了。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://twinkletray.com/" target="_blank" rel="noopener"
>&lt;strong>TwinkleTray&lt;/strong>&lt;/a> &lt;sup>Open-sourced&lt;/sup>
&lt;ul>
&lt;li>在任务栏中添加按钮，可以自由调节每个显示器的亮度&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://eartrumpet.app/" target="_blank" rel="noopener"
>&lt;strong>EarTrumpet&lt;/strong>&lt;/a> &lt;sup>Open-sourced&lt;/sup>
&lt;ul>
&lt;li>在任务栏中添加按钮，可以很方便地选择音频输出，并且调节每个应用的音量&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="美化">美化&lt;/h3>
&lt;ul>
&lt;li>[&lt;strong>TranslucentTB&lt;/strong>]
&lt;ul>
&lt;li>让任务栏变得透明&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="生产力">生产力&lt;/h2>
&lt;h3 id="文档处理">文档处理&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.office.com" target="_blank" rel="noopener"
>&lt;strong>Microsoft Office&lt;/strong>&lt;/a>
&lt;ul>
&lt;li>这个也不用介绍了吧。。。虽然有&lt;a class="link" href="www.wps.cn" >&lt;strong>WPS&lt;/strong>&lt;/a>、&lt;a class="link" href="https://www.libreoffice.org" target="_blank" rel="noopener"
>&lt;strong>Libre Office&lt;/strong>&lt;/a>、&lt;a class="link" href="https://docs.google.com" target="_blank" rel="noopener"
>&lt;strong>Google Docs&lt;/strong>&lt;/a>等替代品，但终究还是Office好用啊！&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://www.onenote.com" target="_blank" rel="noopener"
>&lt;strong>Microsoft OneNote&lt;/strong>&lt;/a>
&lt;ul>
&lt;li>记录文档、做笔记的不二选择！配合微信公众号和Chrome插件，使用起来非常好使！&lt;/li>
&lt;li>另外，对于Surface用户来说Onenote就更棒了，直接手写笔记，和用真正的本子记录没有什么区别&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="http://www.lyx.org/" target="_blank" rel="noopener"
>&lt;strong>LyX&lt;/strong>&lt;/a> &lt;sup>Open-Sourced&lt;/sup>
&lt;ul>
&lt;li>被很多人安利过&lt;strong>LaTeX&lt;/strong>，但是限于学习成本高，且没有真正的使用需求，还没怎么学会LaTex的使用。而LyX就是介于Word和LaTex中间的一款软件了，它能够通过可视化界面编辑LaTeX，可以作为过渡期的替代品。&lt;/li>
&lt;li>安装比较麻烦，有很多依赖项&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://www.foxitsoftware.cn/" target="_blank" rel="noopener"
>&lt;strong>Phantom PDF&lt;/strong>&lt;/a> (福昕阅读器)
&lt;ul>
&lt;li>十分强大的PDF编辑器，功能完备，速度和使用体验都比Adobe自家的要好！另外，它使用的Ribbon界面设计也很讨喜&lt;/li>
&lt;li>福昕阅读器的运行速度也不错，高清位图和复杂矢量图都能较快地打开。（目前测试下来，&lt;strong>PDF.js&lt;/strong>是打开PDF速度最快的）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://www.drawboard.com/" target="_blank" rel="noopener"
>&lt;strong>Drawboard PDF&lt;/strong>&lt;/a>
&lt;ul>
&lt;li>Surface必备软件，用这个软件在PDF上做笔记是最方便的，配合Onenote使用后上课根本不用带书和笔！&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://www.myscript.com/nebo/" target="_blank" rel="noopener"
>&lt;strong>Nebo&lt;/strong>&lt;/a>
&lt;ul>
&lt;li>Surface必备软件，这个在整理功能上没有Onenote强大，但是纯文字识别来说非常有用！能够快速识别手写图表、公式，这方面用得比Onenote顺手&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://www.grammarly.com/native/windows" target="_blank" rel="noopener"
>&lt;strong>Grammarly&lt;/strong>&lt;/a>
&lt;ul>
&lt;li>语法纠错软件，免费版的功能已经很不错了，能改掉很多低级错误，在英文写作时很有用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="http://www.pdfshaper.com/" target="_blank" rel="noopener"
>&lt;strong>PDF Shaper&lt;/strong>&lt;/a> &lt;sup>Free&lt;/sup>
&lt;ul>
&lt;li>提供一些基本的PDF处理功能，在这方面远不如Phantom PDF，不过最有用的是他的解密功能。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="数学">数学&lt;/h3>
&lt;ul>
&lt;li>&lt;del>&lt;a class="link" href="http://www.jihehuaban.com.cn/" target="_blank" rel="noopener"
>&lt;strong>SketchPad&lt;/strong>&lt;/a> (几何画板)&lt;/del> &lt;sup>Replaceable&lt;/sup>
&lt;ul>
&lt;li>中学时代就非常喜欢的数学软件，不仅对学习几何很有帮助，能绘制函数图像也非常有用。&lt;/li>
&lt;li>使用界面简洁简单，标注的字母和公式我认为也比下面提到的GeoGebra好看。&lt;/li>
&lt;li>有一些特别的功能，比如绘制分形和绘制波形来发声等等，目前发现其他类似软件能实现的。但这些都不是常用功能，大部分功能还是可以通过GeoGebra实现的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://www.geogebra.org/" target="_blank" rel="noopener"
>&lt;strong>GeoGebra&lt;/strong>&lt;/a> &lt;sup>Free&lt;/sup>
&lt;ul>
&lt;li>能绘制动态约束的几何图形，能绘制函数图像，对数学学习很有帮助&lt;/li>
&lt;li>性能上比几何画板差，容易卡，界面对高分屏也不友好&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="展示">展示&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="https://prezi.com/" target="_blank" rel="noopener"
>&lt;strong>Prezi&lt;/strong>&lt;/a>
&lt;ul>
&lt;li>也是挺有名的展示软件了吧，内容动画不多，但是章节之间是通过旋转和缩放进行过渡的。使用简单，效果酷炫&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://sway.com/" target="_blank" rel="noopener"
>&lt;strong>Sway&lt;/strong>&lt;/a>
&lt;ul>
&lt;li>这是我目前最欣赏的展示软件，没有花里胡哨的功能，重视内容，将其他过渡都交给软件处理。做Slides就跟写文章一样直接。&lt;/li>
&lt;li>有&lt;a class="link" href="https://www.microsoft.com/store/apps/9wzdncrd2g0j" target="_blank" rel="noopener"
>Windows商店版本&lt;/a>，展示内容随微软帐户同步，很方便。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="http://code52.org/carnac/" target="_blank" rel="noopener"
>&lt;strong>carnac&lt;/strong>&lt;/a> &lt;sup>Open-sourced &amp;amp; Portable&lt;/sup>
&lt;ul>
&lt;li>用来在屏幕上显示按键操作的软件，小巧美观&lt;/li>
&lt;li>有一个功能更加强大的&lt;a class="link" href="https://brookhong.github.io/2014/04/28/keycast-on-windows.html" target="_blank" rel="noopener"
>&lt;strong>KeyCastOW&lt;/strong>&lt;/a>，但是需要自行编译&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="文献管理">文献管理&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.mendeley.com/" target="_blank" rel="noopener"
>&lt;strong>Mendeley&lt;/strong>&lt;/a> &lt;sup>Free&lt;/sup>
&lt;ul>
&lt;li>文献管理也是需求很大的一类软件，最常用的应该就是&lt;a class="link" href="http://endnote.com/" target="_blank" rel="noopener"
>&lt;strong>Endnote&lt;/strong>&lt;/a>了，但由于Endnote很臃肿，并且管理需要有Library这个概念，我很不喜欢，我更倾向于Mendeley的轻量级管理方式。&lt;/li>
&lt;li>Mendeley有两个很突出的特点：可以导入PDF、有文献推荐系统，这两点就是我选择Mendeley的关键原因。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="http://cluster.cis.drexel.edu/~cchen/citespace/" target="_blank" rel="noopener"
>&lt;strong>Citespace&lt;/strong>&lt;/a> &lt;sup>Portable&lt;/sup>
&lt;ul>
&lt;li>Prof. Chen 编写的文献关系可视化软件，可以结合&lt;strong>Web of Science&lt;/strong>生成文献关系图，便于文献的追溯，在刚接触科研的时候很有用~&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="杂项">杂项&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://voxel.codeplex.com/" target="_blank" rel="noopener"
>&lt;strong>MagicVoxel&lt;/strong>&lt;/a> &lt;sup>Open-sourced &amp;amp; Portable&lt;/sup>
&lt;ul>
&lt;li>3D像素艺术软件，很有趣。可以在三维中创造类似于平面的像素艺术作品，使用也很方便，性能也不错&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://calibre-ebook.com/" target="_blank" rel="noopener"
>&lt;strong>Calibre&lt;/strong>&lt;/a> &lt;sup>Open-sourced &amp;amp; Portable&lt;/sup>
&lt;ul>
&lt;li>著名电子书管理软件，支持txt、epub、mobi等格式~我在用Kindle的时候会用上它&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://ntlea.codeplex.com/" target="_blank" rel="noopener"
>&lt;strong>NTLeas&lt;/strong>&lt;/a> &lt;sup>Open-sourced&lt;/sup>
&lt;ul>
&lt;li>软件(主要是游戏)转区软件，是Windows曾经自带的Applocale的升级版，能解决日文游戏或其他国家游戏的乱码问题。&lt;/li>
&lt;li>除了解决乱码问题外还可以解决锁区问题，&lt;del>如CM3D就必备NTLeas&lt;/del>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://rufus.akeo.ie/" target="_blank" rel="noopener"
>&lt;strong>Rufus&lt;/strong>&lt;/a> &lt;sup>Free &amp;amp; Portable&lt;/sup>
&lt;ul>
&lt;li>在U盘上制作系统安装盘的利器，简洁好用，重要的是不像&lt;strong>UltraISO&lt;/strong>一样收费&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://www.microsoft.com/store/apps/9nblggh63sw0" target="_blank" rel="noopener"
>&lt;strong>微软必应词典&lt;/strong>&lt;/a> &lt;sup>Free&lt;/sup>
&lt;ul>
&lt;li>这个离线字典对付日常的英语翻译完全没问题了，但如果要丰富的词义还有多语言支持就力不从心了。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;del>&lt;a class="link" href="https://sourceforge.net/projects/xming/" target="_blank" rel="noopener"
>&lt;strong>Xming&lt;/strong>&lt;/a>&lt;/del> &lt;sup>Free&lt;/sup>
&lt;ul>
&lt;li>在Windows上运行的X Server，可以让WSL支持图形界面。不过这玩意很久没更新了，只能用来尝试玩玩。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="待办清单">待办清单&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="https://trello.com" target="_blank" rel="noopener"
>&lt;strong>Trello&lt;/strong>&lt;/a> &lt;sup>free&lt;/sup>
&lt;ul>
&lt;li>不仅能很好地管理任务列表，还能与他人共享列表，并且支持附件和Markdown。&lt;/li>
&lt;li>国内的替代产品是&lt;strong>Worktile&lt;/strong>，但我还是喜欢Trello的交互方式，拖拽十分方便。&lt;/li>
&lt;li>UWP版本虽然是网页套壳，但是也勉强够用了(Trello好像不是很重视UWP的样子)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://www.wunderlist.com" target="_blank" rel="noopener"
>&lt;strong>Wunderlist&lt;/strong>&lt;/a> &lt;sup>free&lt;/sup>
&lt;ul>
&lt;li>中文名是&lt;em>奇妙清单&lt;/em>，也是很有名的清单软件了。&lt;/li>
&lt;li>独特之处是跨平台性好，电脑配合手机上的Microsoft Desktop使用十分顺畅。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="游戏">游戏&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/huanghongxun/hmcl" target="_blank" rel="noopener"
>&lt;strong>HMCL&lt;/strong>&lt;/a> &lt;sup>Open-Sourced &amp;amp; Portable&lt;/sup>
&lt;ul>
&lt;li>著名的Minecraft启动器，一键整合Forge、LiteLoader，功能还在不断完善！~&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://terramap.codeplex.com/" target="_blank" rel="noopener"
>&lt;strong>Terramap&lt;/strong>&lt;/a> &lt;sup>Open-Sourced &amp;amp; Portable&lt;/sup>
&lt;ul>
&lt;li>游戏&lt;strong>Terraria&lt;/strong>的地图浏览器，有了这个之后就能省下很多游戏时间=v=&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://reshade.me/" target="_blank" rel="noopener"
>&lt;em>&lt;strong>ReShade&lt;/strong>&lt;/em>&lt;/a> &lt;sup>Open-Sourced &amp;amp; Portable&lt;/sup>
&lt;ul>
&lt;li>注入游戏里面可以动态修改渲染，&lt;del>我暂时也没用过&lt;/del>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/Kaldaien/FAR" target="_blank" rel="noopener"
>&lt;strong>Fix Automata Resolution&lt;/strong>&lt;/a> (FAR) &lt;sup>Open-Sourced&lt;/sup>
&lt;ul>
&lt;li>修复NieR:Automata的锁帧问题，提高游戏体验，玩这个游戏的话必备~&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="不在此推荐的好软件">不在此推荐的好软件&lt;/h2>
&lt;h3 id="键盘操作">键盘操作&lt;/h3>
&lt;p>有一些软件虽然口碑极好，但是我遵循着使用Windows就应该便于鼠标操作的原则，感觉不适合我而没去使用。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>AutoHotKey&lt;/strong>&lt;/li>
&lt;li>&lt;strong>TotalCommander&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h3 id="win10内置">Win10内置&lt;/h3>
&lt;p>由于Windows 10足够强大，能够被系统功能代替的程序也不在考虑范围内。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Wox&lt;/strong>: 可以被Cortana代替&lt;/li>
&lt;li>&lt;strong>猎豹WIFI&lt;/strong>: 可以被系统自带WIFI功能代替&lt;/li>
&lt;li>&lt;a class="link" href="http://www.ntrun.com/" target="_blank" rel="noopener"
>&lt;strong>nTrun&lt;/strong>&lt;/a>: 核心功能和系统快捷方式区别不大&lt;/li>
&lt;li>&lt;a class="link" href="https://www.stardock.com/products/start10/" target="_blank" rel="noopener"
>&lt;strong>Start10&lt;/strong>&lt;/a>: 习惯了Windows Metro磁贴的使用方式后其实觉得磁贴是非常好用的&lt;/li>
&lt;li>&lt;a class="link" href="http://clipdiary.com/" target="_blank" rel="noopener"
>&lt;strong>ClipDiary&lt;/strong>&lt;/a>、&lt;a class="link" href="https://ditto-cp.sourceforge.io/" target="_blank" rel="noopener"
>&lt;strong>Ditto&lt;/strong>&lt;/a>：Win10 1809更新后系统自带剪贴板历史和同步了！通过&lt;kbd>Win&lt;/kbd>+&lt;kbd>V&lt;/kbd>即可调出~&lt;/li>
&lt;li>&lt;a class="link" href="https://www.netsarang.com/en/xshell/" target="_blank" rel="noopener"
>&lt;strong>XShell&lt;/strong>&lt;/a>: Win10 1709更新后已经添加OpenSSH支持，只需在系统可选功能中添加功能即可。&lt;/li>
&lt;/ul>
&lt;p>另外，Windows还有一些官方工具，但是没有包括在系统内的，叫&lt;a class="link" href="https://docs.microsoft.com/en-us/windows/powertoys/" target="_blank" rel="noopener"
>PowerToys&lt;/a>。这个工具箱里有很多实用的功能，如文件批量重命名、窗口布局、程序Launcher等等。不知道为什么微软没有直接发布到系统商店里= =。&lt;/p>
&lt;!-- 未体验过的 --></description></item><item><title>利器 - 浏览器插件</title><link>https://zyxin.xyz/blog/2018-02/ToolBrowser/</link><pubDate>Thu, 01 Feb 2018 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2018-02/ToolBrowser/</guid><description>&lt;h2 id="chromefirefox-插件">Chrome/Firefox 插件&lt;/h2>
&lt;p>Chrome/Firefox如此强大离不开它的插件生态，他们的插件成千上万，经常有新的冒出来，这里我就记录一些我常用的吧~&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://chrome.google.com/webstore/detail/lgllffgicojgllpmdbemgglaponefajn" target="_blank" rel="noopener"
>&lt;strong>ActiveX for Chrome&lt;/strong>&lt;/a> (网银助手)：介绍说是可以在Chrome中启用ActiveX控件，但实际上为了避免失败重新支付，我一般还是会用Edge打开支付页面。&lt;/li>
&lt;li>&lt;a class="link" href="https://chrome.google.com/webstore/detail/gighmmpiobklfepjocnamgkkbiglidom" target="_blank" rel="noopener"
>&lt;strong>AdBlock&lt;/strong>&lt;/a>：大名鼎鼎的广告屏蔽软件，效果拔群。不过为了一些站点的发展，还请把必要的站点加进白名单。&lt;/li>
&lt;li>&lt;a class="link" href="https://chrome.google.com/webstore/detail/lcibdonokophlabplhpmmmjjbgohgcok" target="_blank" rel="noopener"
>&lt;strong>Adkill and Media Downloader&lt;/strong>&lt;/a>：去视频广告+媒体下载+盗链图片显示，效果没有想象中那么好&lt;/li>
&lt;li>&lt;a class="link" href="https://chrome.google.com/webstore/detail/calkaljlpglgogjfcidhlmmlgjnpmnmf" target="_blank" rel="noopener"
>&lt;strong>Anything to QRcode&lt;/strong>&lt;/a>：将网页地址或网页文字内容转换为二维码，非常实用！如果你需要向别人发送电脑链接或者文字，不用打开微信客户端，只需这么扫描一下即可。&lt;/li>
&lt;li>&lt;del>&lt;a class="link" href="https://chrome.google.com/webstore/detail/djkfdjpoelphhdclfjhnffmnlnoknfnd" target="_blank" rel="noopener"
>&lt;strong>Awesome Autocomplete for Github&lt;/strong>&lt;/a>：为Github搜索框提供自动提示，提示内容包括仓库和用户等&lt;/del>&lt;/li>
&lt;li>&lt;a class="link" href="https://chrome.google.com/webstore/detail/better-history/obciceimmggglbmelaidpjlmodcebijb" target="_blank" rel="noopener"
>&lt;strong>Better History&lt;/strong>&lt;/a>：友好的历史记录管理器，自带的确实不怎么好用&lt;/li>
&lt;li>&lt;a class="link" href="https://chrome.google.com/webstore/detail/mciiogijehkdemklbdcbfkefimifhecn" target="_blank" rel="noopener"
>&lt;strong>Chrono&lt;/strong>&lt;/a>：Chrome下载管理器，很好用，自带的下载器蛋疼的不行。&lt;/li>
&lt;li>&lt;a class="link" href="https://chrome.google.com/webstore/detail/eimadpbcbfnmbkopoojfekhnkhdbieeh" target="_blank" rel="noopener"
>&lt;strong>DarkReader&lt;/strong>&lt;/a>：自动生成自适应的夜间模式，效果非常好！不过开启时会影响网页加载速度&lt;/li>
&lt;li>&lt;a class="link" href="https://chrome.google.com/webstore/detail/fngmhnnpilhplaeedifhccceomclgfbg" target="_blank" rel="noopener"
>&lt;strong>EditThisCookie&lt;/strong>&lt;/a>：修改网站的Cookie，不仅对开发有用，而且对一些网站的限制也可以通过这个打破！&lt;/li>
&lt;li>&lt;a class="link" href="https://chrome.google.com/webstore/detail/okadibdjfemgnhjiembecghcbfknbfhg" target="_blank" rel="noopener"
>&lt;strong>Enhanced Steam&lt;/strong>&lt;/a>：增强Steam商店页面，可以显示价格趋势，关怀剁手党&lt;/li>
&lt;li>&lt;a class="link" href="https://chrome.google.com/webstore/detail/anlikcnbgdeidpacdbdljnabclhahhmd" target="_blank" rel="noopener"
>&lt;strong>Github Plus&lt;/strong>&lt;/a>：在Github仓库中显示文件大小&lt;/li>
&lt;li>&lt;a class="link" href="https://chrome.google.com/webstore/detail/epooeampfghdkampjnocabjniefmnkab" target="_blank" rel="noopener"
>&lt;strong>Github Stars Manager&lt;/strong>&lt;/a>：给Github Star增加标签，非常实用！！还在改进中，比较大的一个缺点就是性能比较差，加载慢！&lt;/li>
&lt;li>&lt;a class="link" href="https://chrome.google.com/webstore/detail/iblijlcdoidgdpfknkckljiocdbnlagk" target="_blank" rel="noopener"
>&lt;strong>goo.gl URL Shortener&lt;/strong>&lt;/a>：通过goo.gl服务压缩当前地址，这个需要连接Google服务，因此需要梯子。&lt;/li>
&lt;li>&lt;a class="link" href="https://chrome.google.com/webstore/detail/ldipcbpaocekfooobnbcddclnhejkcpn" target="_blank" rel="noopener"
>&lt;strong>Google Scholar&lt;/strong>&lt;/a>：功能很简单，就是小型的文献搜索按钮。但由于搜索文献的需求很大，因此能提高不少效率。&lt;/li>
&lt;li>&lt;a class="link" href="https://chrome.google.com/webstore/detail/neebplgakaahbhdphmkckjjcegoiijjo" target="_blank" rel="noopener"
>&lt;strong>Keepa&lt;/strong>&lt;/a>：亚马逊价格追踪器，专克价格虚标！&lt;/li>
&lt;li>&lt;a class="link" href="https://chrome.google.com/webstore/detail/dagcmkpagjlhakfdhnbomgmjdpkdklff" target="_blank" rel="noopener"
>&lt;strong>Mendeley Importer&lt;/strong>&lt;/a>：配合Mendeley使用，可以在网页内导入文献信息&lt;/li>
&lt;li>&lt;a class="link" href="https://chrome.google.com/webstore/detail/ofgjggbjanlhbgaemjbkiegeebmccifi" target="_blank" rel="noopener"
>&lt;strong>Neater Bookmarks&lt;/strong>&lt;/a>：弹出式的小型书签管理器，搜索框非常好用因此经常使用它&lt;/li>
&lt;li>&lt;a class="link" href="https://chrome.google.com/webstore/detail/bkhaagjahfmjljalopjnoealnfndnagc" target="_blank" rel="noopener"
>&lt;strong>Octotree&lt;/strong>&lt;/a>：为Github仓库页面添加代码树，用于文件导航，也是很实用的功能&lt;/li>
&lt;li>&lt;a class="link" href="https://chrome.google.com/webstore/detail/gojbdfnpnhogfdgjbigejoaolejmgdhk" target="_blank" rel="noopener"
>&lt;strong>OneNote Web Clipper&lt;/strong>&lt;/a>：提供将网页直接存到OneNote中的功能，对我十分有用的功能&lt;/li>
&lt;li>&lt;a class="link" href="https://chrome.google.com/webstore/detail/molncoemjfmpgdkbdlbjmhlcgniigdnf" target="_blank" rel="noopener"
>&lt;strong>Project Naptha&lt;/strong>&lt;/a>：对网页中所有图片提供OCR支持，可以直接选择图片中的文字（仅限英文）。实际使用效果差强人意，因此使用频率很低&lt;/li>
&lt;li>&lt;a class="link" href="https://chrome.google.com/webstore/detail/padekgcemlokbadohgkifijomclgjgif" target="_blank" rel="noopener"
>&lt;strong>Proxy SwitchyOmega&lt;/strong>&lt;/a>：经常用梯子的人对这个插件应该很熟悉了，能够方便地切换代理设置&lt;/li>
&lt;li>&lt;a class="link" href="https://chrome.google.com/webstore/detail/bohapeiooecafommnlaiccilacgmkaoc" target="_blank" rel="noopener"
>&lt;strong>Sad Panda&lt;/strong>&lt;/a>：如果上不去N站可以通过这个插件解决&lt;/li>
&lt;li>&lt;a class="link" href="https://chrome.google.com/webstore/detail/kniehgiejgnnpgojkdhhjbgbllnfkfdk" target="_blank" rel="noopener"
>&lt;strong>SimpleExtManager&lt;/strong>&lt;/a>：这个插件很关键！这个插件能够便捷地启用和停止其他插件，加速Chrome的运行速度&lt;/li>
&lt;li>&lt;a class="link" href="https://chrome.google.com/webstore/detail/dhdgffkkebhmkfjojejmpbldmpobfkfo" target="_blank" rel="noopener"
>&lt;strong>Tampermonkey&lt;/strong>&lt;/a>：Userscript（又称油猴脚本）的加载器，油猴脚本的使用会在下一节介绍&lt;/li>
&lt;li>&lt;a class="link" href="https://chrome.google.com/webstore/detail/klbibkeccnjlkjkiokjodocebajanakg" target="_blank" rel="noopener"
>&lt;strong>The Great Suspender&lt;/strong>&lt;/a>：将长时间不活动的标签页暂时挂起（实际上是转到内置的暂停页面），这个插件能够有效避免Chrome对内存的消耗。但是另一方面可能会导致正在编辑的窗口被取消，造成数据损失，因此使用时需小心&lt;/li>
&lt;li>&lt;a class="link" href="https://chrome.google.com/webstore/detail/hddnkoipeenegfoeaoibdmnaalmgkpip" target="_blank" rel="noopener"
>&lt;strong>Toby&lt;/strong>&lt;/a>:可以将标签页暂存到它的库中，当打开新标签页时可以通过Toby快速访问。有点像临时书签的感觉。另外，这个功能在Edge中已经内置实现了。&lt;/li>
&lt;li>&lt;a class="link" href="https://chrome.google.com/webstore/detail/pdnfnkhpgegpcingjbfihlkjeighnddk" target="_blank" rel="noopener"
>&lt;strong>Unblock Youku&lt;/strong>&lt;/a>：这是从国外翻回国内的梯子&lt;/li>
&lt;li>&lt;a class="link" href="https://chrome.google.com/webstore/detail/pemhgklkefakciniebenbfclihhmmfcd" target="_blank" rel="noopener"
>&lt;strong>Visual Ping&lt;/strong>&lt;/a>：定期检查页面的变化，并在产生变化时发出提醒。由于我对这个需求很少，因此基本是一直禁用着的。&lt;/li>
&lt;li>&lt;a class="link" href="https://chrome.google.com/webstore/detail/gppongmhjkpfnbhagpmjfkannfbllamg" target="_blank" rel="noopener"
>&lt;strong>Wappalyzer&lt;/strong>&lt;/a>：分析网站使用的框架，对开发者有一定帮助&lt;/li>
&lt;li>&lt;a class="link" href="https://chrome.google.com/webstore/detail/kojgbciegmddffhelhohhmgbkelfpojg" target="_blank" rel="noopener"
>&lt;strong>Xiamini&lt;/strong>&lt;/a> (虾米你)：虾米页面功能拓展&lt;/li>
&lt;li>&lt;a class="link" href="https://chrome.google.com/webstore/detail/kpbnombpnpcffllnianjibmpadjolanh" target="_blank" rel="noopener"
>&lt;strong>哔哩哔哩助手&lt;/strong>&lt;/a>：B站页面功能扩展&lt;/li>
&lt;/ul>
&lt;h2 id="userscript">Userscript&lt;/h2>
&lt;p>用户脚本（Userscript、油猴脚本）指的是修改网页内容的脚本。相比用户脚本，浏览器拓展能够调用浏览器的API对浏览器进行操作，但另一方面体积却更加臃肿。用户脚本主要用于页面内容的修改，更注重内容的操作，不限于某一种浏览器。但由于用户脚本非常多，没有审核机制，因此没有鉴别能力的话慎用。&lt;/p>
&lt;p>用户脚本最开始的管理网站是&lt;a class="link" href="http://userscript.org" target="_blank" rel="noopener"
>userscript.org&lt;/a>，但是它挂掉了。现在更好使的是&lt;a class="link" href="https://greasyfork.org/zh-CN" target="_blank" rel="noopener"
>GreaseFork&lt;/a>。下载之后需要加载进浏览器的插件中，其中&lt;a class="link" href="https://tampermonkey.net/" target="_blank" rel="noopener"
>&lt;strong>Tampermonkey&lt;/strong>&lt;/a>是支持浏览器最多的加载器，其他加载器可以参见GreaseFork的首页。&lt;/p>
&lt;p>下面有一些我常用的用户脚本，介绍就直接去页面里面看吧。更多的用户脚本可以去&lt;a class="link" href="https://www.zhihu.com/question/21174406" target="_blank" rel="noopener"
>知乎&lt;/a>或者别的地方搜索~&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://greasyfork.org/scripts/25270-%E5%9F%8E%E9%80%9A%E7%BD%91%E7%9B%98%E6%98%BE%E7%A4%BA%E6%AD%A3%E7%A1%AE%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80" target="_blank" rel="noopener"
>&lt;strong>城通网盘、皮皮盘、牛盘显示正确下载地址&lt;/strong>&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://greasyfork.org/scripts/28003-%E7%90%89%E7%92%83%E7%A5%9E%E7%A4%BE%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5%E7%94%9F%E6%88%90" target="_blank" rel="noopener"
>&lt;strong>琉璃神社下载链接生成&lt;/strong>&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://greasyfork.org/scripts/496-%E7%99%BE%E5%BA%A6%E4%BA%91%E6%8F%92%E4%BB%B6-apikey" target="_blank" rel="noopener"
>&lt;strong>百度云插件+APIKey&lt;/strong>&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://greasyfork.org/scripts/31921-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B" target="_blank" rel="noopener"
>&lt;strong>百度网盘直接下载助手&lt;/strong>&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://greasyfork.org/scripts/19889-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%99%BE%E5%BA%A6%E4%BA%91%E5%88%86%E4%BA%AB%E5%AF%86%E7%A0%81" target="_blank" rel="noopener"
>&lt;strong>自定义百度云分享密码&lt;/strong>&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/kkHAIKE/fake115" target="_blank" rel="noopener"
>&lt;strong>Fake115&lt;/strong>&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Python - 如何调用系统命令或外部程序</title><link>https://zyxin.xyz/blog/2017-12/PythonCall/</link><pubDate>Thu, 14 Dec 2017 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2017-12/PythonCall/</guid><description>&lt;p>我经常会碰到拿别人的代码过来用却发现不是Python写的代码的情况。这个时候，如果你想调用他的代码，要么自己费力地把他的和自己的代码翻译成同一种语言，要么利用语言特性直接调用（如Lua直接调用C函数），但其实最简便的办法是通过外部程序调用的方式调用他的程序，只要传入相关参数即可~本文就讲一下在Python下调用外部函数或者命令的几种方法~&lt;/p>
&lt;h2 id="ossystem">os.system&lt;/h2>
&lt;p>这个函数和C语言中的&lt;code>system()&lt;/code>函数是类似的。这个函数比较简单，但是只能调用系统命令，无法直接调用外部函数，也无法获取运行的返回值或者输出流什么的，简便但不够灵活。&lt;/p>
&lt;h2 id="osspawn">os.spawn*&lt;/h2>
&lt;p>Python中&lt;code>os&lt;/code>模块&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>自带的函数&lt;code>spawn*&lt;/code>是我最早接触到可以调用外部程序的函数，根据&lt;code>*&lt;/code>的不同具体一共有八个函数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">spawnl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mode&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">spawnle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mode&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">spawnlp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mode&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">spawnlpe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mode&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">spawnv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mode&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">spawnve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mode&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">spawnvp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mode&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">spawnvpe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mode&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>不同字母代表的含义其实通过函数定义即可看出，具体分别是：&lt;/p>
&lt;ul>
&lt;li>&lt;code>l&lt;/code>和&lt;code>v&lt;/code>的区别在于调用的参数是直接传入的还是通过列表对象进行传入的，从函数定义即可看出。&lt;/li>
&lt;li>&lt;code>p&lt;/code>代表外部程序的文件本体将从系统&lt;code>PATH&lt;/code>中进行寻找，只需输入文件名即可&lt;/li>
&lt;li>&lt;code>e&lt;/code>代表所调用的程序的环境变量可以通过&lt;code>env&lt;/code>参数来指定&lt;/li>
&lt;/ul>
&lt;p>mode代表调用函数的线程模式，有如下几种：&lt;/p>
&lt;ul>
&lt;li>&lt;code>os.P_NOWAIT&lt;/code>: 调用外部程序后函数本身不会等待，将会立即返回，代码继续执行&lt;/li>
&lt;li>&lt;code>os.P_WAIT&lt;/code>: 调用外部程序后函数等待程序执行结束才会返回继续&lt;/li>
&lt;li>&lt;code>os.P_DETACH&lt;/code>: 与&lt;code>os.P_NOWAIT&lt;/code>相似，但是新的线程会脱离所调用的控制台（也就是说新的程序将不会通过当前的控制台来输出）&lt;/li>
&lt;li>&lt;code>os.P_OVERLAY&lt;/code>: 当前线程将会被替换成新的线程，这意味着&lt;code>spawn*&lt;/code>函数将一直不返回&lt;/li>
&lt;/ul>
&lt;h2 id="subprocess">subprocess&lt;/h2>
&lt;p>&lt;code>subprocess&lt;/code>模块&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>据Python官方文档所说，是用来替代以下这些函数的：&lt;/p>
&lt;ul>
&lt;li>&lt;code>os.system&lt;/code>&lt;/li>
&lt;li>&lt;code>os.spawn*&lt;/code>&lt;/li>
&lt;li>&lt;code>os.popen*&lt;/code>&lt;/li>
&lt;li>&lt;code>popen2.*&lt;/code>&lt;/li>
&lt;li>&lt;code>commands.*&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>subprocess常用的函数或对象有这么几个：&lt;code>call&lt;/code>, &lt;code>check_*&lt;/code>, &lt;code>Popen&lt;/code>。下面介绍一下它们的用法。&lt;/p>
&lt;ul>
&lt;li>&lt;code>call&lt;/code>: 调用程序，等待到程序执行完成后返回程序的返回值&lt;/li>
&lt;li>&lt;code>check_call&lt;/code>: 调用程序，等待到程序执行完成后，若返回值为0则函数返回，若返回值不为0则抛出&lt;code>CalledProcessError&lt;/code>异常&lt;/li>
&lt;li>&lt;code>check_output&lt;/code>: 调用程序，将程序的输出字符串以&lt;code>bytes&lt;/code>形式返回&lt;/li>
&lt;li>&lt;code>Popen&lt;/code>: 参数与&lt;code>call&lt;/code>相同，新建&lt;code>Popen&lt;/code>对象即会调用程序，并且将新线程的相关操作封装在了&lt;code>Popen&lt;/code>对象内，包括检查状态，等待等等。&lt;/li>
&lt;/ul>
&lt;p>这些函数或类对象的调用方法与在Shell中直接调用十分相似，并且除了指定参数之外还可以通过&lt;code>stdin&lt;/code>, &lt;code>stdout&lt;/code>, &lt;code>stderr&lt;/code>等参数来指定新进程的输入输出，还可以通过指定&lt;code>shell&lt;/code>参数来让，命令通过Shell进行调用，以利用Shell的一些功能。&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a class="link" href="https://docs.python.org/2/library/os.html#os.spawnl" target="_blank" rel="noopener"
>os.spawn文档&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>&lt;a class="link" href="https://docs.python.org/2/library/os.html#os.spawnl" target="_blank" rel="noopener"
>subprocess文档&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Cython - 入门简介</title><link>https://zyxin.xyz/blog/2017-12/CythonIntro/</link><pubDate>Tue, 05 Dec 2017 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2017-12/CythonIntro/</guid><description>&lt;h2 id="python--cc">Python &amp;amp; C/C++&lt;/h2>
&lt;p>近来用Python用的越来越多，对这种十分灵活的动态语言的哲学也有了较深的理解。虽然Python有不少缺点，如没有强类型，GIL全局锁，没有编译因此效率底下，但正因为其动态性，它非常适合写软件的Prototype。因此一种典型而高效的工作流程是&lt;strong>先用Python调用各种轮子，快速实现软件原型，然后再优化代码，将稳定的部分用C++或其他编译语言进行重写，变成一个供调用的库&lt;/strong>。&lt;/p>
&lt;p>在这个过程中就难免碰到Python与C++相互调用的问题，尤其体现在：&lt;/p>
&lt;ol>
&lt;li>在原型开发阶段，如何将现有的C++库封装成Python能够方便调用的库，避免重造轮子&lt;/li>
&lt;li>当原型开发结束后，如何将Python代码高效地转换成其他语言的代码&lt;/li>
&lt;/ol>
&lt;p>能够完成Python与C/C++相互操作的方式有很多，可以参见&lt;a class="link" href="https://zhuanlan.zhihu.com/p/20150641" target="_blank" rel="noopener"
>知乎的这篇专栏&lt;/a>，但是本文介绍的Cython却鲜有详细或通俗的中文资料。Cython是个易用的Python扩展，在Anaconda等发行包里面都自带了，可以用Python的语法写出Python的C语言扩展。因此我选择这一款扩展库学习，之后也会把相关的学习经验写下来~&lt;/p>
&lt;h2 id="安装与基本使用">安装与基本使用&lt;/h2>
&lt;blockquote>
&lt;p>后文中的环境都是在 Windows10 + Visual Studio 2017 下&lt;/p>
&lt;/blockquote>
&lt;p>Cython在流行的Python发行版本中都有被包含，包括&lt;a class="link" href="http://docs.continuum.io/anaconda/" target="_blank" rel="noopener"
>Anaconda&lt;/a>、&lt;a class="link" href="https://enthought.com/products/canopy/" target="_blank" rel="noopener"
>Canopy&lt;/a>、&lt;a class="link" href="http://www.pythonxy.com/" target="_blank" rel="noopener"
>Pythonxy&lt;/a>和&lt;a class="link" href="http://sagemath.org" target="_blank" rel="noopener"
>Sage&lt;/a>等。如果使用普通的Python的话可以使用pip安装：&lt;code>pip install Cython&lt;/code>。&lt;/p>
&lt;h3 id="简单运行cython代码">简单运行Cython代码&lt;/h3>
&lt;p>从语言层面来说，Cython是一种拓展的Python，其文件的扩展名为&lt;code>.pyx&lt;/code>。这种类型的文件通过编译之后可以变成供Python直接调用的动态链接库（Linux/Mac下是&lt;code>.so&lt;/code>，Windows下是&lt;code>.pyd&lt;/code>）。根据官方文档，主要如下几编译方式：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>(推荐)&lt;/strong> 通过&lt;code>setup.py&lt;/code>中调用&lt;code>Cython.Build&lt;/code>进行编译&lt;/li>
&lt;li>使用&lt;code>pyximport&lt;/code>调用&lt;code>.pyx&lt;/code>文件，这种方法&lt;code>.pyx&lt;/code>文件相当于普通的&lt;code>.py&lt;/code>文件&lt;/li>
&lt;li>在命令行使用&lt;code>cython&lt;/code>命令从&lt;code>.pyx&lt;/code>文件生成&lt;code>.c&lt;/code>文件，再使用外部编译器将&lt;code>.c&lt;/code>文件编译成Python可用的库&lt;/li>
&lt;li>使用&lt;code>Jupyter Notebook&lt;/code>或者&lt;code>Sage Notebook&lt;/code>直接运行Cython代码&lt;/li>
&lt;/ol>
&lt;p>这上面四种方法里&lt;strong>最简单的是第三种方法&lt;/strong>。运行&lt;code>cythonize -i &amp;lt;.pyx File&amp;gt;&lt;/code>即可编译&lt;code>.pyx&lt;/code>成二进制库，并保存在与&lt;code>.pyx&lt;/code>文件相同的目录下。&lt;code>cythonize&lt;/code>命令有其他的参数，可以通过命令行查看。这个命令也可以通过&lt;code>python -m Cython.Build.Cythonize -i &amp;lt;.pyx File&amp;gt;&lt;/code>来完成。&lt;/p>
&lt;p>不过推荐使用的是第一种方法，原理也就是通过指定&lt;code>distutils&lt;/code>或者&lt;code>setuptools&lt;/code>库中的&lt;code>ext_modules&lt;/code>参数来编译Cython代码。以&lt;a class="link" href="http://docs.cython.org/en/latest/src/quickstart/build.html#building-a-cython-module-using-distutils" target="_blank" rel="noopener"
>官方示例&lt;/a>为例，它的&lt;code>setup.py&lt;/code>文件如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">distutils.core&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">setup&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">Cython.Build&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">cythonize&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">setup&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;Hello world app&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ext_modules&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cythonize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;hello.pyx&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中&lt;code>hello.pyx&lt;/code>的代码为&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">say_hello_to&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Hello &lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2">!&amp;#34;&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>编辑保存之后直接运行&lt;code>python setup.py build_ext --inplace&lt;/code>即可进行编译。其中&lt;code>--inplace&lt;/code>参数可以让对应的链接库生成在源代码所在的目录。&lt;/p>
&lt;p>编译中可能遇到的问题有&lt;/p>
&lt;ul>
&lt;li>&lt;code>error: command 'cl.exe' failed: No such file or directory&lt;/code>: 这说明在环境中没有找到C编译器。由于我电脑中安装了Visual Studio，我的解决方法是根据平台使用VS的&lt;strong>x86 Native Command Prompt&lt;/strong>或&lt;strong>x64 Native Command Prompt&lt;/strong>来运行编译命令。此外还可以选择通过&lt;code>python setup.py build_ext --inplace --compiler=mingw32&lt;/code>使用Anaconda内置的MinGW32编译器，不过这种情况下还可能会遇到&lt;a class="link" href="https://stackoverflow.com/questions/24683305/python-cant-install-packages-typeerror-unorderable-types-nonetype-str" target="_blank" rel="noopener"
>内置MinGW32的问题&lt;/a>，具体的解决方法在链接里。&lt;/li>
&lt;/ul>
&lt;p>编译之后直接通过&lt;code>import hello&lt;/code>或&lt;code>from hello import say_hello_to&lt;/code>即可调用这个编译好的库。&lt;/p>
&lt;h3 id="复杂cython工程的setuppy">复杂Cython工程的setup.py&lt;/h3>
&lt;p>如果的Cython工程中有很多&lt;code>.pyx&lt;/code>文件，甚至有很多&lt;code>.cpp&lt;/code>文件需要编译，那么这时候最好使用&lt;code>setup.py&lt;/code>进行编译，并使用&lt;code>Cython.Build.cythonize&lt;/code>模块。具体编写方式如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">distutils.core&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">setup&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">distutils.extension&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Extension&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">Cython.Build&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">cythonize&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">extensions&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Extension&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Module Name&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;file1.pyx&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;file2.cpp&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">include_dirs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">libraries&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">library_dirs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">]),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Extension&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Module 2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">setup&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;XXX&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ext_modules&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cythonize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">extensions&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后的&lt;code>setup&lt;/code>部分还有另一种写法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">setup&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;XXX&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ext_modules&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">extensions&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cmdclass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;build_ext&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Cython&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Build&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">build_ext&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样的写法可以让安装整个库的时候一起执行掉Cython代码的编译和安装。此外，如果要在编译&lt;code>.pyx&lt;/code>和&lt;code>.cpp&lt;/code>时指定语言或者编译参数，在&lt;code>Extension&lt;/code>类的构造函数中添加合适的参数即可。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>本文介绍了Cython的安装与初步使用，看完以后就已经可以动手试试写Cython代码啦~Cython语言的特性也有不少，掌握其中的一小部分就能大大提高你的Python代码的运行效率！这些内容将会在之后的文章中讲述~&lt;/p>
&lt;blockquote>
&lt;p>Cython的完整介绍可以参考&lt;a class="link" href="http://cython.org/" target="_blank" rel="noopener"
>Cython官网&lt;/a>
Cython代码的编译还有其他方法，参见&lt;a class="link" href="http://docs.cython.org/en/latest/src/reference/compilation.html" target="_blank" rel="noopener"
>Cython文档的编译部分&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>Windows10下配置Keras + CNTK (GPU) + Tensorflow (GPU)</title><link>https://zyxin.xyz/blog/2017-09/InstallCNTKKeras/</link><pubDate>Thu, 21 Sep 2017 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2017-09/InstallCNTKKeras/</guid><description>&lt;blockquote>
&lt;p>本文安装时的各软件版本为&lt;/p>
&lt;ul>
&lt;li>Windows 10.0.15063&lt;/li>
&lt;li>Visual Studio 2017 (VS15.2)&lt;/li>
&lt;li>Anaconda3 4.3.25&lt;/li>
&lt;li>CNTK 2.2&lt;/li>
&lt;li>Tensorflow 1.4&lt;/li>
&lt;li>Keras 2.0.6&lt;/li>
&lt;li>NVIDIA Geforce Notebook Driver 376.54&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>配这一波环境又让我对微软爸爸的信仰值飙升一大截！特此记录一下安装过程，虽然步骤十分简单没有什么好写的（笑，但是本着能不再踩的坑就不要再踩的原则，还是记录下来吧~&lt;/p>
&lt;h2 id="安装-cntk">安装 CNTK&lt;/h2>
&lt;p>不得不说我还是非常喜欢CNTK的，不仅因为它是微软爸爸的产品，能在Windows亲儿子上运行，而且性能很不错（关于性能的比较可以参见&lt;a class="link" href="https://github.com/zer0n/deepframeworks/blob/master/README.md" target="_blank" rel="noopener"
>Github一篇评测&lt;/a>、&lt;a class="link" href="https://arxiv.org/abs/1608.07249v7" target="_blank" rel="noopener"
>一篇老文&lt;/a>和&lt;a class="link" href="http://www.datasciencecentral.com/profiles/blogs/search-for-the-fastest-deep-learning-framework-supported-by-keras" target="_blank" rel="noopener"
>一篇新文&lt;/a>），最重要的是它是所有深度学习库里面唯一提供&lt;strong>Pre-built Installation&lt;/strong>的！！不知道多少人在编译Caffe和Tensorflow时被N卡驱动和CUDA、MKL等等安装坑过。。。占空间就罢了，还经常各种报错！而Windows下安装CNTK，由于已经编译好了，就不会碰到这种问题！所以当我得知几个月前Keras已经支持CNTK后端的时候，我立马准备在自己的电脑上装一份了！省的天天跟别人抢服务器= =&lt;/p>
&lt;p>安装流程可以参考&lt;a class="link" href="https://docs.microsoft.com/en-us/cognitive-toolkit/Setup-Windows-Binary-Script" target="_blank" rel="noopener"
>官方教程&lt;/a>。首先就是下载CNTK，我当然是选择下载编译后的包啦，直接进入&lt;a class="link" href="https://github.com/Microsoft/CNTK/releases" target="_blank" rel="noopener"
>CNTK的Release页&lt;/a>找到你需要的版本就可以~（不得再次感叹一声预编译版本好全。。连UWP都有）当然你如果不怕像Linux一样折腾= =那么你可以直接下载源码去编译。&lt;/p>
&lt;p>下载后解压。注意，解压后的位置直接就是之后CNTK运行的位置，因此后文解压到的目录就称作“CNTK目录”了。然后cd进&lt;code>&amp;lt;CNTK目录&amp;gt;\Scripts\install\windows&lt;/code>运行&lt;code>install.bat&lt;/code>即可安装。为了避免cmd把路径识别成两个参数，请把压缩包解压到一个&lt;strong>不含空格的路径&lt;/strong>中。&lt;/p>
&lt;p>如果之前已经装了Anaconda，就可以通过&lt;code>AnacondaBasePath&lt;/code>参数指定Anaconda的位置避免重复安装。这里如果你anaconda的安装位置有空格的话batchfile就会同样因为路径问题用不了了，只能上Powershell直接运行ps1脚本。用管理员模式打开Powershell，先在环境变量中添加ps1的模块位置&lt;code>$Env:PSModulePath=$Env:PSModulePath+&amp;quot;;&amp;lt;CNTK目录&amp;gt;\Scripts\install\windows\ps\Modules&amp;quot;&lt;/code>，然后运行&lt;code>ps/install.ps1 -AnacondaBasePath &amp;quot;&amp;lt;Anaconda安装目录&amp;gt;&amp;quot;&lt;/code>，即可安装。如果遇到&lt;code>无法加载文件，因为在此系统中禁止执行脚本。&lt;/code>的报错，可以运行&lt;code>Set-ExecutionPolicy Bypass&lt;/code>命令（不区分大小写），在运行完脚本后运行&lt;code>Set-Execution Restricted&lt;/code>设置回来。&lt;/p>
&lt;p>此外还可以通过&lt;code>PyVersion&lt;/code>参数来设置conda环境的Python版本，默认的版本是3.5。安装完成后Anaconda中会添加&lt;code>cntk-pyxx&lt;/code>的环境，后两位是你指定的Python版本，后文就用默认的&lt;code>cntk-py35&lt;/code>来表示。&lt;/p>
&lt;p>安装完成后运行&lt;code>&amp;lt;CNTK目录&amp;gt;\Scripts\cntkpy35.bat&lt;/code>设置环境变量，然后会进入&lt;code>cntk-py35&lt;/code>环境。再cd到&lt;code>&amp;lt;CNTK目录&amp;gt;\Tutorials\HelloWorld-LogisticRegression&lt;/code>，运行&lt;code>cntk configFile=lr_bs.cntk makeMode=false command=Train&lt;/code>即可验证安装。&lt;/p>
&lt;h2 id="安装-keras">安装 Keras&lt;/h2>
&lt;p>安装CNTK后安装Keras就很简单了。首先运行&lt;code>activate cntk-py35&lt;/code>进入环境，然后运行&lt;code>pip install keras&lt;/code>即可。&lt;/p>
&lt;p>然后是把Keras后端切换成CNTK，&lt;a class="link" href="https://keras.io/backend/" target="_blank" rel="noopener"
>Keras文档&lt;/a>有对应的说明，只需将&lt;code>%USERPROFILE%\.keras\keras.json&lt;/code>中的&lt;code>backend&lt;/code>值改为&lt;code>cntk&lt;/code>。&lt;/p>
&lt;p>初步测试Keras只需测试&lt;code>import keras&lt;/code>能否成功即可。进一步的测试可以通过运行&lt;a class="link" href="https://github.com/fchollet/keras/blob/master/examples/README.md" target="_blank" rel="noopener"
>Keras的样例脚本&lt;/a>来完成。运行结果如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">(cntk-py35) C:\Users\Jacob&amp;gt;python C:\Users\Jacob\Downloads\mnist_mlp.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Using CNTK backend
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Selected GPU[0] GeForce GTX 850M as the process wide default device.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000 train samples
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">10000 test samples
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_________________________________________________________________
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Layer (type) Output Shape Param #
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">=================================================================
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dense_1 (Dense) (None, 512) 401920
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_________________________________________________________________
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dropout_1 (Dropout) (None, 512) 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_________________________________________________________________
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dense_2 (Dense) (None, 512) 262656
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_________________________________________________________________
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dropout_2 (Dropout) (None, 512) 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_________________________________________________________________
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dense_3 (Dense) (None, 10) 5130
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">=================================================================
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Total params: 669,706
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Trainable params: 669,706
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Non-trainable params: 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_________________________________________________________________
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Train on 60000 samples, validate on 10000 samples
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 1/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">D:\Program Files\Anaconda3\envs\cntk-py35\lib\site-packages\cntk\core.py:361: UserWarning: your data is of type &amp;#34;float64&amp;#34;, but your input variable (uid &amp;#34;Input75&amp;#34;) expects &amp;#34;&amp;lt;class &amp;#39;numpy.float32&amp;#39;&amp;gt;&amp;#34;. Please convert your data beforehand to speed up training.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (sample.dtype, var.uid, str(var.dtype)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 4s - loss: 0.2464 - acc: 0.9248 - val_loss: 0.1097 - val_acc: 0.9653
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 2/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.1035 - acc: 0.9681 - val_loss: 0.0843 - val_acc: 0.9744
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 3/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.0742 - acc: 0.9776 - val_loss: 0.0872 - val_acc: 0.9764
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 4/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.0607 - acc: 0.9822 - val_loss: 0.0688 - val_acc: 0.9804
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 5/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.0502 - acc: 0.9851 - val_loss: 0.0863 - val_acc: 0.9781
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 6/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.0424 - acc: 0.9874 - val_loss: 0.0828 - val_acc: 0.9801
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 7/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.0369 - acc: 0.9890 - val_loss: 0.0758 - val_acc: 0.9812
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 8/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.0367 - acc: 0.9895 - val_loss: 0.0840 - val_acc: 0.9825
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 9/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.0338 - acc: 0.9903 - val_loss: 0.1029 - val_acc: 0.9782
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 10/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.0313 - acc: 0.9912 - val_loss: 0.0837 - val_acc: 0.9827
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 11/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.0273 - acc: 0.9919 - val_loss: 0.1013 - val_acc: 0.9808
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 12/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.0277 - acc: 0.9925 - val_loss: 0.0921 - val_acc: 0.9827
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 13/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.0252 - acc: 0.9931 - val_loss: 0.0900 - val_acc: 0.9832
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 14/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.0268 - acc: 0.9931 - val_loss: 0.1035 - val_acc: 0.9830
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 15/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.0233 - acc: 0.9940 - val_loss: 0.1280 - val_acc: 0.9797
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 16/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.0243 - acc: 0.9942 - val_loss: 0.0998 - val_acc: 0.9830
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 17/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.0222 - acc: 0.9942 - val_loss: 0.1011 - val_acc: 0.9849
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 18/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.0205 - acc: 0.9946 - val_loss: 0.1111 - val_acc: 0.9830
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 19/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.0201 - acc: 0.9951 - val_loss: 0.1302 - val_acc: 0.9801
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 20/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 3s - loss: 0.0206 - acc: 0.9952 - val_loss: 0.1181 - val_acc: 0.9827
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Test loss: 0.11807218486
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Test accuracy: 0.9827
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="安装-tensorflow">安装 Tensorflow&lt;/h2>
&lt;p>Tensorflow虽然没有提供安装即可用的安装包，但是它可以通过&lt;code>pip&lt;/code>和&lt;code>conda&lt;/code>来安装，也是非常方便的，直接&lt;code>pip install tensorflow-gpu&lt;/code>即可。如果想避免CNTK和Tensorflow相互影响，可以专门为Tensorflow也开一个环境。&lt;/p>
&lt;p>Tensorflow的GPU版本需要CUDA和CuDNN的支持，这个是pip无法安装的。独立安装CUDA和CuDNN需要从NVIDIA官网注册下载，也是很麻烦，但而由于CNTK里面是带这两个东西的，因此只需要把PATH设置到CNTK下面即可，非常方便！具体方式是在环境变量&lt;code>PYTHONPATH&lt;/code>中添加&lt;code>&amp;lt;CNTK目录&amp;gt;\cntk&lt;/code>，如果原本没有&lt;code>PYTHONPATH&lt;/code>这个变量就新建一个。&lt;/p>
&lt;p>这样，Tensorflow也很快就安装完成了，修改Keras的后端跑一个测试结果如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">(tf-py35) C:\Users\Jacob&amp;gt;python C:\Users\Jacob\Downloads\mnist_mlp.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Using TensorFlow backend.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000 train samples
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">10000 test samples
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_________________________________________________________________
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Layer (type) Output Shape Param #
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">=================================================================
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dense_1 (Dense) (None, 512) 401920
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_________________________________________________________________
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dropout_1 (Dropout) (None, 512) 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_________________________________________________________________
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dense_2 (Dense) (None, 512) 262656
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_________________________________________________________________
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dropout_2 (Dropout) (None, 512) 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_________________________________________________________________
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dense_3 (Dense) (None, 10) 5130
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">=================================================================
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Total params: 669,706
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Trainable params: 669,706
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Non-trainable params: 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_________________________________________________________________
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Train on 60000 samples, validate on 10000 samples
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 1/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2017-11-19 11:17:30.732744: I C:\tf_jenkins\home\workspace\rel-win\M\windows-gpu\PY\35\tensorflow\core\platform\cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX AVX2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2017-11-19 11:17:31.701106: I C:\tf_jenkins\home\workspace\rel-win\M\windows-gpu\PY\35\tensorflow\core\common_runtime\gpu\gpu_device.cc:1030] Found device 0 with properties:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">name: GeForce GTX 850M major: 5 minor: 0 memoryClockRate(GHz): 0.8625
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pciBusID: 0000:01:00.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">totalMemory: 2.00GiB freeMemory: 1.65GiB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2017-11-19 11:17:31.701257: I C:\tf_jenkins\home\workspace\rel-win\M\windows-gpu\PY\35\tensorflow\core\common_runtime\gpu\gpu_device.cc:1120] Creating TensorFlow device (/device:GPU:0) -&amp;gt; (device: 0, name: GeForce GTX 850M, pci bus id: 0000:01:00.0, compute capability: 5.0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 122s 2ms/step - loss: 0.2460 - acc: 0.9233 - val_loss: 0.1317 - val_acc: 0.9590
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 2/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 6s 96us/step - loss: 0.1023 - acc: 0.9698 - val_loss: 0.0881 - val_acc: 0.9745
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 3/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 6s 95us/step - loss: 0.0762 - acc: 0.9768 - val_loss: 0.0823 - val_acc: 0.9744
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 4/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 5s 91us/step - loss: 0.0612 - acc: 0.9811 - val_loss: 0.0812 - val_acc: 0.9761
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 5/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 6s 98us/step - loss: 0.0514 - acc: 0.9845 - val_loss: 0.0734 - val_acc: 0.9813
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 6/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 6s 102us/step - loss: 0.0454 - acc: 0.9866 - val_loss: 0.0783 - val_acc: 0.9818
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 7/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 6s 93us/step - loss: 0.0388 - acc: 0.9884 - val_loss: 0.0871 - val_acc: 0.9797
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 8/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 6s 95us/step - loss: 0.0354 - acc: 0.9896 - val_loss: 0.0918 - val_acc: 0.9813
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 9/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 6s 96us/step - loss: 0.0330 - acc: 0.9906 - val_loss: 0.0859 - val_acc: 0.9800
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 10/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 6s 103us/step - loss: 0.0308 - acc: 0.9915 - val_loss: 0.0898 - val_acc: 0.9812
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 11/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 5s 89us/step - loss: 0.0261 - acc: 0.9924 - val_loss: 0.0975 - val_acc: 0.9824
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 12/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 6s 103us/step - loss: 0.0266 - acc: 0.9925 - val_loss: 0.0906 - val_acc: 0.9848
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 13/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 6s 102us/step - loss: 0.0248 - acc: 0.9934 - val_loss: 0.0907 - val_acc: 0.9834
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 14/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 6s 96us/step - loss: 0.0224 - acc: 0.9939 - val_loss: 0.1088 - val_acc: 0.9811
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 15/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 6s 97us/step - loss: 0.0217 - acc: 0.9938 - val_loss: 0.0973 - val_acc: 0.9818
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 16/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 6s 97us/step - loss: 0.0202 - acc: 0.9946 - val_loss: 0.1075 - val_acc: 0.9819
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 17/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 6s 99us/step - loss: 0.0197 - acc: 0.9947 - val_loss: 0.1218 - val_acc: 0.9815
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 18/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 6s 96us/step - loss: 0.0208 - acc: 0.9945 - val_loss: 0.1131 - val_acc: 0.9832
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 19/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 6s 93us/step - loss: 0.0190 - acc: 0.9949 - val_loss: 0.1285 - val_acc: 0.9805
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Epoch 20/20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60000/60000 [==============================] - 6s 94us/step - loss: 0.0185 - acc: 0.9955 - val_loss: 0.1153 - val_acc: 0.9833
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Test loss: 0.115294696707
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Test accuracy: 0.9833
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;em>（可以看出Tensorflow比CNTK要慢不少）&lt;/em>&lt;/p></description></item><item><title>C/C++中的特殊宏</title><link>https://zyxin.xyz/blog/2017-09/SpecialMacrosInCpp/</link><pubDate>Wed, 20 Sep 2017 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2017-09/SpecialMacrosInCpp/</guid><description>&lt;p>在阅读VTK和QT的源码时，遇到了类似于Python中特殊变量形式的宏，如&lt;code>__LINE__&lt;/code>和&lt;code>__FILE__&lt;/code>，这两个宏的用途是作为函数参数返回调用行数和文件名。一时惊奇，原来C里面也有这个内置宏，而且貌似在各大库的Debug模块中都经常被用到。此外也碰到了变长的宏的用法，于是查了一下标准中对宏的描述，做一下笔记，对宏代码很有帮助~&lt;/p>
&lt;blockquote>
&lt;p>文中点击标题的角标即可转到GCC文档对应页面。&lt;/p>
&lt;/blockquote>
&lt;h2 id="stringizing1-字符串化">Stringizing&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> (字符串化)&lt;/h2>
&lt;p>在宏定义中可以将传入的参数原封不动地&lt;strong>变成字符串常量插入代码中&lt;/strong>，使用的方法是利用&lt;code>#&lt;/code>运算符。例如下面的宏&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define WARN_IF(EXPR) \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">do { if (EXPR) \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"> fprintf (stderr, &amp;#34;Warning: &amp;#34; #EXPR &amp;#34;\n&amp;#34;); } \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">while (0)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="n">WARN_IF&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中&lt;code>#EXPR&lt;/code>便是字符串化的参数，在编译时会变成&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">do&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fprintf&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Warning: &amp;#34;&lt;/span> &lt;span class="s">&amp;#34;x == 0&amp;#34;&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>会输出&lt;code>Warning: x == 0&lt;/code>。这一特性可以使得使用宏定义的时候同时输出参数名字或者表达式，便于进行记录。此时若&lt;code>x&lt;/code>本身也是宏的话在&lt;code>#EXPR&lt;/code>中不会展开。如果想让宏&lt;code>x&lt;/code>在&lt;code>#EXPR&lt;/code>中也展开的话，需要再用另一个宏把这个宏包起来即可。&lt;/p>
&lt;h2 id="concatenation2-符号连接">Concatenation&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> (符号连接)&lt;/h2>
&lt;p>有时候向宏内传入的参数不完全是你想要的参数，或者希望通过一个参数展开成多个变量的时候，就可以使用符号连接的宏，使用方法是利用&lt;code>##&lt;/code>运算符。例如假设有一个储存命名函数的结构体&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">command&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用下面的宏可以简洁方便地定义多个结构体&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define COMMAND(NAME) { #NAME, NAME ## _command }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">command&lt;/span> &lt;span class="n">commands&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">COMMAND&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">quit&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">COMMAND&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">help&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中&lt;code>NAME ## _command&lt;/code>的作用就是在&lt;code>NAME&lt;/code>展开后在末尾加上&lt;code>_command&lt;/code>，避免直接连接会导致宏无法被识别的现象。展开后得到&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">command&lt;/span> &lt;span class="n">commands&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="s">&amp;#34;quit&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">quit_command&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="s">&amp;#34;help&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">help_command&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="variadic-macros3-可变参数的">Variadic Macros&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> (可变参数的)&lt;/h2>
&lt;p>可变参数的用法与普通代码中的可变参数用法是一致的，即通过对最后一个参数进行特殊声明来让这个宏可以接受变长的参数。举例如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define eprintf(…) fprintf (stderr, __VA_ARGS__)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define eprintf(args…) fprintf (stderr, args)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这两个宏的展开效果是一样的，如果在代码中插入&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">eprintf&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%s:%d: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">input_file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lineno&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>则会展开成&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">fprintf&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;%s:%d: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">input_file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lineno&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>从上面的代码可以看出，如果使用&lt;code>...&lt;/code>来表示变长参数，那么在宏定义中就用预定义宏变量&lt;code>__VA_ARGS__&lt;/code>来代表这些参数，如果是在某一个参数名的后面加上&lt;code>...&lt;/code>，那么就是用将这个参数变成变长参数。&lt;/p>
&lt;p>另外，变长参数之前可以有普通的参数，如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define eprintf(format, …) fprintf (stderr, format, __VA_ARGS__)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>不过需要注意的是，在标准C中这样的情况下变长参数至少需要输入一个参数，否则在转义时参数末尾会多一个逗号。即&lt;code>eprintf(&amp;quot;success!\n&amp;quot;, );&lt;/code>会变成&lt;code>fprintf(stderr, &amp;quot;success!\n&amp;quot;, );&lt;/code>。在GNU CPP中这个问题可以通过在&lt;code>__VA_ARGS__&lt;/code>前面加上&lt;code>##&lt;/code>符号来解决。&lt;/p>
&lt;h2 id="predefined-macros4-预定义的宏">Predefined Macros&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup> (预定义的宏)&lt;/h2>
&lt;p>在标准中有提供一些内置的宏，可以给调试提供很多方便~&lt;/p>
&lt;ul>
&lt;li>&lt;code>__FILE__&lt;/code>：当前文件的路径名&lt;/li>
&lt;li>&lt;code>__LINE__&lt;/code>：调用处的行号&lt;/li>
&lt;li>&lt;code>__func__&lt;/code>(C99)/&lt;code>__FUNCTION__&lt;/code>(GCC)：调用处所属的函数名&lt;/li>
&lt;li>&lt;code>__DATE__&lt;/code>：处理器上当前的日期&lt;/li>
&lt;li>&lt;code>__TIME__&lt;/code>：处理器上当前的时间&lt;/li>
&lt;li>&lt;code>__STDC_VERSION__&lt;/code>：C标准的版本，例如C11标准下会展开成201103&lt;/li>
&lt;li>&lt;code>__cplusplus&lt;/code>：在C++编译器时会被定义，展开结果同&lt;code>__STDC_VERSION__&lt;/code>
其他还有很多的不在标准中的预定义的宏，具体可以查看编译器的说明。其中GNU C的预定义宏可以参考&lt;a class="link" href="https://gcc.gnu.org/onlinedocs/cpp/Common-Predefined-Macros.html#Common-Predefined-Macros" target="_blank" rel="noopener"
>Common Predefined Macros&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="directives-within-macro-arguments5-在宏参数里修改宏">Directives Within Macro Arguments&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup> (在宏参数里修改宏)&lt;/h2>
&lt;p>GNU编译器还提供了在展开宏的参数时修改宏的功能。。。这个功能非常少用，先举个病态的例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define f(x) x x
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="n">f&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#undef f
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define f 2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这一段语句展开后得到的结果是&lt;code>1 2 1 2&lt;/code>，这就是在参数中修改宏。但是这个宏非常影响阅读，太tricky了，最好还是别用。&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a class="link" href="https://gcc.gnu.org/onlinedocs/cpp/Stringizing.html#Stringizing" target="_blank" rel="noopener"
>GCC文档中的Stringizing部分&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>&lt;a class="link" href="https://gcc.gnu.org/onlinedocs/cpp/Concatenation.html#Concatenation" target="_blank" rel="noopener"
>GCC文档中的Concatenation部分&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>&lt;a class="link" href="https://gcc.gnu.org/onlinedocs/cpp/Variadic-Macros.html#Variadic-Macros" target="_blank" rel="noopener"
>GCC文档中的Variadic部分&lt;/a>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>&lt;a class="link" href="https://gcc.gnu.org/onlinedocs/cpp/Predefined-Macros.html#Predefined-Macros" target="_blank" rel="noopener"
>GCC文档中的预定义宏&lt;/a>&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5">
&lt;p>&lt;a class="link" href="https://gcc.gnu.org/onlinedocs/cpp/Directives-Within-Macro-Arguments.html#Directives-Within-Macro-Arguments" target="_blank" rel="noopener"
>GCC文档中Directives部分&lt;/a>&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Minecraft - MOD杂谈</title><link>https://zyxin.xyz/blog/2017-09/MCMods/</link><pubDate>Wed, 13 Sep 2017 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2017-09/MCMods/</guid><description>&lt;img src="https://zyxin.xyz/blog/2017-09/MCMods/aetherII.png" alt="Featured image of post Minecraft - MOD杂谈" />&lt;p>Minecraft之所以能这么火热，一方面是因为是开发得较早的沙盒游戏，另一方面则是Minecraft庞大的Mod（Modification，中文称模组）数量，Mod生态环境非常棒！这篇文章里就稍微介绍一下Minecraft的Mod吧~（Mod具体怎么使用直接搜索就行）&lt;/p>
&lt;p>介绍的主要是客户端的Mod，服务端的Mod由于没有开过服，知道的很少，就不在这写了~&lt;/p>
&lt;h2 id="mod资源">Mod资源&lt;/h2>
&lt;p>MC的Mod这么多，在哪里去找呢？不外乎两种方式，一种是知道Mod的名字的话就可以直接搜索，如果不知道的话就需要去整合Mod的资源站去找了：&lt;/p>
&lt;ul>
&lt;li>论坛中的Mod板块：&lt;a class="link" href="http://www.minecraftforum.net/forums/mapping-and-modding/minecraft-mods" target="_blank" rel="noopener"
>MinecraftForum&lt;/a> / &lt;a class="link" href="http://www.mcbbs.net/forum.php?gid=168" target="_blank" rel="noopener"
>MCBBS&lt;/a> / &lt;a class="link" href="http://forum.minecraftuser.jp/viewforum.php?f=13&amp;amp;sid=b01d19de40ff8fa604d3b3e033e017b2" target="_blank" rel="noopener"
>MinecraftUser&lt;/a>&lt;/li>
&lt;li>Mod整合站: &lt;a class="link" href="http://www.hzyswiki.com/wiki/" target="_blank" rel="noopener"
>Hzyswiki&lt;/a> / &lt;a class="link" href="http://www.mcmod.cn/" target="_blank" rel="noopener"
>MCMod&lt;/a> / &lt;a class="link" href="https://www.curseforge.com/minecraft/mc-mods" target="_blank" rel="noopener"
>Curse&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> （其中Curse是维护MCWiki托管站Gamepedia的公司）
这里推荐一下MCMod，里面有很多小功能，比如神秘研究帮助、模组关系图等。&lt;/li>
&lt;/ul>
&lt;h2 id="核心mod介绍">核心Mod介绍&lt;/h2>
&lt;p>有三大Mod是几乎每一个Mod玩家以及Mod整合包都会安装的：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="http://files.minecraftforge.net/" target="_blank" rel="noopener"
>Forge&lt;/a>: 最常用的模组加载器(Modloader)，是大量Mod的基础Mod，抽象出了一套Mod接口。&lt;/li>
&lt;li>&lt;a class="link" href="http://www.liteloader.com/" target="_blank" rel="noopener"
>Liteloader&lt;/a>: 最常用的加载器之二，被不少UI相关的Mod所用。可以与Forge共存，只需在Forge之后安装即可。&lt;/li>
&lt;li>&lt;a class="link" href="http://optifine.net/home" target="_blank" rel="noopener"
>Optifine&lt;/a>：高清修复。不仅仅是高清，而且还有帧速的提升，以及在1.9之后把光影核心也加入了其中。也就是现在如果要加载光影包只需要安装Optifine即可。如果是1.9之前的版本加载光影的话还需要安装&lt;a class="link" href="http://www.minecraftforum.net/forums/mapping-and-modding/minecraft-mods/1286604-shaders-mod-updated-by-karyonix" target="_blank" rel="noopener"
>ShadersMod&lt;/a>这个光影模组。&lt;/li>
&lt;/ul>
&lt;h2 id="世界观mod推荐">世界观Mod推荐&lt;/h2>
&lt;p>Minecraft的Mod里面有很大一部分是工具类的Mod，比如小地图、物品整理、创世神等；另一大部分则是给Minecraft加了自定义的方块、物品，如和风、枪战、IC等。这些Mod我不会推荐给大家，因为一方面这一类Mod可能会导致Minecraft难度下降，自动化程度过高，另一方面是这种Mod实在数量太多。。每种Mod都有很多相似的替代品。。&lt;/p>
&lt;blockquote>
&lt;p>工具类的Mod个人认为只需要一个地图和一个物品整理就可以了。个人用的是Rei&amp;rsquo;s Minimap和Inventory Tweak，不过有人十分推荐Journey Map和Not enough items，我没有试过。&lt;/p>
&lt;/blockquote>
&lt;p>我觉得十分难得的是给Minecraft加入新的世界观的Mod，这些Mod的内容丰富，并且可以带来不一样的Minecraft体验。当然这一类Mod也比较大，内容丰富到可能能玩半年，但这也正是乐趣所在！~&lt;/p>
&lt;h3 id="神秘时代---thaumcrafthttpswwwcurseforgecomminecraftmc-modsthaumcraft">&lt;a class="link" href="https://www.curseforge.com/minecraft/mc-mods/thaumcraft" target="_blank" rel="noopener"
>神秘时代 - Thaumcraft&lt;/a>&lt;/h3>
&lt;p>神秘时代是一个十分著名的Mod，为游戏加入了魔法元素（称为&lt;em>要素&lt;/em>）与炼金系统，魔法与炼金系统的设计十分有趣，并且良心的是作者一直在更新，加入新的魔法要素。最棒的是Mod里面自带一份指南（魔导手册），随着不断的学习能够解锁新的知识，这个过程非常容易产生满足感！炼金体系的平衡性设计的也不错，强大的物品消耗的物品和要素也十分惊人。此外这个Mod还衍生出很多其他的Mod，总之非常值得一试！&lt;/p>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2017-09/MCMods/thaumcraft.png"
width="2048"
height="1089"
loading="lazy"
alt="神秘时代魔法森林"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="451px"
>
&lt;img src="https://zyxin.xyz/blog/blog/2017-09/MCMods/thaumcraft_crafting.png"
width="1366"
height="705"
loading="lazy"
alt="神秘时代中的注魔"
class="gallery-image"
data-flex-grow="193"
data-flex-basis="465px"
>&lt;/p>
&lt;h3 id="以太---aetherhttpswwwcurseforgecomminecraftmc-modsthe-aether-ii">&lt;a class="link" href="https://www.curseforge.com/minecraft/mc-mods/the-aether-ii" target="_blank" rel="noopener"
>以太 - Aether&lt;/a>&lt;/h3>
&lt;p>以太是一个老牌的Minecraft世界模组，在Wiki中都有介绍。以太新增了浮空岛的世界，它的定位是与下界（地狱）相反的天堂，加入了很多天堂动物，天堂的景色也非常不错，如果站在浮空岛边缘不小心掉下去了还会掉回主世界233。此外还在天堂增加了地牢，里面错综复杂难度不小，是一个冒险元素挺强的模组。&lt;/p>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2017-09/MCMods/aetherII.png"
width="2048"
height="1089"
loading="lazy"
alt="以太浮空岛"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="451px"
>&lt;/p>
&lt;h3 id="暮光森林---the-twilight-foresthttpswwwcurseforgecomminecraftmc-modsthe-twilight-forest">&lt;a class="link" href="https://www.curseforge.com/minecraft/mc-mods/the-twilight-forest" target="_blank" rel="noopener"
>暮光森林 - The Twilight Forest&lt;/a>&lt;/h3>
&lt;p>暮光森林Mod加入了暮光森林世界，这个世界美丽而宁静，比原版的森林群系更像真正的森林。这个世界里有很多生物群系，如彩色的冰川等等，也是一个冒险元素比较浓厚的Mod。暮光森林里面也有类似于地牢的存在，不过是以塔的形式矗立在森林之中。总而言之这个模组最吸引我这个外貌协会成员的还是里面美好的风景啦~&lt;/p>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2017-09/MCMods/twilight_forest.png"
width="2048"
height="1089"
loading="lazy"
alt="暮光森林"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="451px"
>&lt;/p>
&lt;h3 id="其他mod">其他Mod&lt;/h3>
&lt;p>Mod分很多很多种，如功能拓展、HUD增强、多样生物群系，还有更为复杂的工业、能源、物流Mod（如著名的&lt;a class="link" href="https://www.curseforge.com/minecraft/mc-mods/industrial-craft" target="_blank" rel="noopener"
>工业时代2 - IC2&lt;/a>）。仅仅是创造世界观的Mod也有很多很多，我也只玩过一部分，下面是另一些我没有玩过的Mod，也列在这里了：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="http://www.minecraftforum.net/forums/mapping-and-modding/minecraft-mods/1287390-the-lord-of-the-rings-mod-bringing-middle-earth-to" target="_blank" rel="noopener"
>魔戒 - The Lord of Ring&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="http://arwiki.dmodoomsirius.me/" target="_blank" rel="noopener"
>火箭 - Advanced Rocketry&lt;/a>：这货可以带你上太空o,o&lt;/li>
&lt;li>&lt;a class="link" href="https://sites.google.com/site/witcherymod/" target="_blank" rel="noopener"
>巫师 - Witchery&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://tropicraft.net/" target="_blank" rel="noopener"
>热带 - Tropicraft&lt;/a>&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>这一类Mod在Curse中被分为&lt;a class="link" href="https://mods.curse.com/mc-mods/minecraft/category/adventure-rpg" target="_blank" rel="noopener"
>Adventure and RPG&lt;/a>，可以去这里面淘优秀的模组~&lt;/p>
&lt;blockquote>
&lt;p>更多Mod推荐可以参考知乎里的两个问题：https://www.zhihu.com/question/41743331 和 &lt;a class="link" href="https://www.zhihu.com/question/31954440" target="_blank" rel="noopener"
>https://www.zhihu.com/question/31954440&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Curse Mod的官网旧地址是https://mods.curse.com/mc-mods/minecraft&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>如何解决Intel集显笔记本插外接显示器时，外接显示器识别但不可用的问题</title><link>https://zyxin.xyz/blog/2017-09/IntelMultiDisplayer/</link><pubDate>Tue, 12 Sep 2017 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2017-09/IntelMultiDisplayer/</guid><description>&lt;p>从美帝回来以后终于可以用上宿舍的大屏， 但是却发现显示器插在笔记本上又不显示了。。。这个问题在上学期也遇到过，当时还一度以为是电脑的接口烧了，摆弄了好几天没能用上显示器，给科技服务队也没能弄好，最后还是狠心尝试把驱动卸了才成功= =前前后后折腾了一周，非常头疼，在这把解决方案贴出来供参考。。。&lt;/p>
&lt;h2 id="环境">环境&lt;/h2>
&lt;ul>
&lt;li>OS：Windows 10 1607/1703&lt;/li>
&lt;li>集显：Intel HD Graphics 4600&lt;/li>
&lt;li>独显：NVIDIA GeForce GTX 850M&lt;/li>
&lt;li>外显：AOC Q2577W&lt;/li>
&lt;li>显卡驱动版本：Intel 15.40.20 / NVIDIA 376.54&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2017-09/IntelMultiDisplayer/driver_infopanel.png"
width="465"
height="536"
loading="lazy"
alt="集显驱动属性，卸载驱动也在这个面板进行操作"
class="gallery-image"
data-flex-grow="86"
data-flex-basis="208px"
>&lt;/p>
&lt;h2 id="问题描述">问题描述&lt;/h2>
&lt;p>这两次出现的毛病都是插上显示器能够检测到显示器但是无法使用它，具体表现为你无论开复制还是扩展模式都还是显示在原来的显示器上（即笔记本自带的显示器上），外接显示器则一直黑屏。该问题出现在Windows10系统上，但我怀疑也可能会出现在其他Windows版本上。&lt;/p>
&lt;p>具体的两个特征有：&lt;/p>
&lt;ol>
&lt;li>右键桌面打开显示设置可以发现有多个显示器（大于实际的显示器数量）。例如加上外接的显示器我的笔记本一共就两个显示器，但是却显示为6个。&lt;img src="https://zyxin.xyz/blog/blog/2017-09/IntelMultiDisplayer/display_setting.png"
width="981"
height="664"
loading="lazy"
alt="显示设置面板"
class="gallery-image"
data-flex-grow="147"
data-flex-basis="354px"
>&lt;/li>
&lt;li>在设备管理器中查看“监视器”时会发现除了自带的和外接的显示器之外多出了四个“通用非即插即用监视器”。 &lt;img src="https://zyxin.xyz/blog/blog/2017-09/IntelMultiDisplayer/displayer_list.png"
width="186"
height="136"
loading="lazy"
alt="监视器列表"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="328px"
>&lt;/li>
&lt;li>Intel的“英特尔核心显卡控制面板”无法打开。&lt;img src="https://zyxin.xyz/blog/blog/2017-09/IntelMultiDisplayer/intel_setting_panel.png"
width="92"
height="107"
loading="lazy"
alt="核心显卡控制面板快捷方式"
class="gallery-image"
data-flex-grow="85"
data-flex-basis="206px"
>&lt;/li>
&lt;/ol>
&lt;h2 id="解决方案">解决方案&lt;/h2>
&lt;p>按理来说最开始想到的方案就是安装最新驱动，但是实际尝试以后发现两个显卡都更新驱动以后仍然没有改变。后来便怀疑是硬件问题，但想想能识别到外接显示器应该是没有硬件损坏的。最后心惊胆战地卸载了集显的驱动意外地就好了。。。&lt;/p>
&lt;p>问题原因处在Intel翔一般的集显驱动上，两次出现这个问题都是在系统大版本更新之后，前一次是1511到1607，这次是1607到1703，更新系统时会强制把显卡驱动一起更新掉，而这个问题刚好就是因为&lt;strong>新版Intel显卡驱动的某BUG&lt;/strong>，并且一直没修复。笔记本电脑的外接显示接口一般是集显的接口，因此改动N卡驱动是没用的。上一次解决这个问题时，搜索这个问题发现了一个回答说是因为Intel的锅，具体的帖子已经找不到了。&lt;/p>
&lt;p>解决方法就是卸载新版的集显驱动，装回老版的驱动。如果这个问题是手动更新驱动造成的话，应该卸载驱动之后就直接可以使用外接显示器了，而如果是系统更新造成的话则还要装回老版的显卡驱动。15年的Intel显卡驱动亲测可用，如果官网的连接找不到了的话可以使用我下载的版本&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>。&lt;/p>
&lt;p>如果想避免之后因为驱动更新再次造成这个问题的话可以禁用Intel显卡的驱动更新。禁止方法参见&lt;a class="link" href="http://jingyan.baidu.com/article/20b68a88b40c79796cec6212.html" target="_blank" rel="noopener"
>这篇百度经验&lt;/a>：&lt;/p>
&lt;ol>
&lt;li>设备管理器 → “显示适配器” → 集显显卡 → 右键点击属性 → “详细信息”选项卡 → “类Guid”属性 → 记录下GUID&lt;/li>
&lt;li>打开本地组策略编辑器（&lt;kbd>Win&lt;/kbd>+&lt;kbd>R&lt;/kbd> → 输入gpedit.msc） → “计算机配置” → “管理模板” → “系统” → “设备安装” → “设备安装限制” → “阻止安装与下列任何设备ID相匹配的设备” → 右键点击编辑 → 启用，并点击“显示”按钮输入上面记录的GUID&lt;/li>
&lt;/ol>
&lt;p>如果想重新允许驱动安装，可以直接禁用这个策略，也可以把同一个策略组的“允许管理员忽略设备安装限制策略”启用。后一种方法可以避免重新输入GUID。&lt;/p>
&lt;blockquote>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;ul>
&lt;li>Intel论坛上&lt;a class="link" href="https://communities.intel.com/thread/110642" target="_blank" rel="noopener"
>一个相似问题的帖子&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://superuser.com/questions/1142454/device-manager-showing-extra-generic-non-pnp-monitors" target="_blank" rel="noopener"
>StackExchange上的帖子&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a class="link" href="https://downloadmirror.intel.com/25150/eng/win64_154004.2.exe" target="_blank" rel="noopener"
>15.40.4&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Minecraft - 人肉大炮</title><link>https://zyxin.xyz/blog/2017-09/MCHumanCannon/</link><pubDate>Fri, 01 Sep 2017 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2017-09/MCHumanCannon/</guid><description>&lt;blockquote>
&lt;p>这篇文章里的设计方案都是我从视频中以及MC论坛里看到的，非原创。&lt;/p>
&lt;/blockquote>
&lt;p>人肉大炮是MC里面有趣的娱乐活动之一，尤其是当你的刷怪塔收获了很多火药而没地方用的时候2333。人肉大炮的原理不复杂，简而言之就是一堆围绕你的TNT炸了以后把你送上高空。TNT在水里炸的时候不会产生伤害，因此可以在生存模式玩，但是请注意，从高空摔下来的时候你是会摔死的！因此最好在湖边或海边建造人肉大炮。&lt;/p>
&lt;blockquote>
&lt;p>人肉大炮有两种，一种是射高，一种是射远~但天空是人类的梦想，因此本文还是主要讲述向上发射的人肉大炮，横向和斜向发射的大炮本文就不介绍了~&lt;/p>
&lt;/blockquote>
&lt;h2 id="naive版">Naive版&lt;/h2>
&lt;p>最最简单的人肉大炮的结构图如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 俯视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|ab|ab|ab|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|tnt|tnt|tnt|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|tnt|wa |tnt|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|tnt|tnt|tnt|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|ab|ab|ab|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-se|rd-ew|wb-$n|rd-ew|rd-sw|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-ns| | | |rd-ns|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-ns| | | |rd-ns|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-ns| | | |rd-ns|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-ne|rd-ew|rd-ew|rd-ew|rd-nw|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>填充完TNT以后，站在水中按下开关，八个TNT一起爆炸瞬间让你扶摇直上，把你推上60+的高度！2333&lt;/p>
&lt;h2 id="双层大炮">双层大炮&lt;/h2>
&lt;!-- 可以选择在底部加一个垫脚石，飞的会低一点 -->
&lt;p>简单的改进就是在第二层也放上TNT，变成双层大炮。由于这种情况下第一层没法通过上面的布线方式来引燃TNT，因此体积会稍微扩大一点。点燃TNT用两种方法，一种是强充能TNT相邻的方块，另一种是用含有打火石的发射器对着TNT，然后激活发射器就能引燃TNT。处于成本考虑，本方案使用中继器充能的方法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 俯视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||ab||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||rd-nse|rd-sew|rd-sw||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-se|rd-ew|rr-w1|rd-nw|rr-s1|rd-ne|rr-e1|rd-ew|rd-sw|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-ns| |ab |ab |ab |ab |ab | |rd-ns|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-nse|rr-e1|ab |tnt |tnt |tnt |ab |rr-w1|rd-nsw|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-nse|rr-e1|ab |tnt |wa |tnt |ab |rr-w1|rd-nsw|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-ns| |ab |tnt |tnt |tnt |ab | |rd-ns|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-ns| |ab |ab |ab |ab |ab | |rd-ns|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-ns| | |rr-n1|rr-n1|rr-n1| | |rd-ns|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-ne|rd-ew|rd-ew|rd-new|rd-new|rd-new|rd-ew|rd-ew|rd-nw|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||rd-se|ab|||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||ab|||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||ab|||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab|ab|ab|ab|ab|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab|tnt|tnt|tnt|ab|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab|tnt||tnt|ab|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab|tnt|tnt|tnt|ab|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab|ab|ab|ab|ab|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||rd-sw|||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||rd-ns|||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||rr-s2|||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||rd-se|rd-ew|rd-new|rd-ew|rd-sw|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||rd-ns||||rd-ns|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||rd-ns||||rd-ns|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||rd-ns||||rd-ns|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||rd-ne|rd-ew|rd-ew|rd-ew|rd-nw|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||ab|||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||wb-n|||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>站在水里按下按钮即可起飞(误。这个方案的发射高度可达250+，十分高效~不过如果嫌在中间按按钮不方便的话，可以把第一层的水换成石头，然后在上方放上水。但是这样会损失一些发射高度。&lt;/p>
&lt;h2 id="堆叠大炮">堆叠大炮&lt;/h2>
&lt;p>实际上对于上面形式的炮，飞的高度与同时爆炸的TNT数量有关，因此可以通过堆叠TNT来达到增加炮的高度的目的~&lt;/p>
&lt;p>具体的堆叠方式见下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 俯视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|ab|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|ab|ab|ab|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|tnt|tnt|tnt|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|tnt|wa |tnt|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|tnt|tnt|tnt|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|ab|ab|ab|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ts|rd-sew|wb-$n|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||rr-s1||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-se|rd-new|rd-ew|rd-ew|rd-sw|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-ns||||rd-ns|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-ns||||rd-ns|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-ns||||rd-ns|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-ne|rd-ew|rd-ew|rd-ew|rd-nw|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level 2k|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-ew|ts+→||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ts||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|ab|ab|ab|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|tnt|tnt|tnt|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|tnt| |tnt|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|tnt|tnt|tnt|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|ab|ab|ab|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level 2k+1|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ts|rd-sw||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||rr-s1||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-se|rd-new|rd-ew|rd-ew|rd-sw|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-ns||||rd-ns|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-ns||||rd-ns|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-ns||||rd-ns|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-ne|rd-ew|rd-ew|rd-ew|rd-nw|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>堆叠有效的关键是需要在同一时刻点燃TNT，所以当堆叠很高时，会需要通过中继器来延长信号，此时中继器会产生1tick的延时，因此在低层需要额外增加中继器的延时。这个时候就可以沿箭头方向绕着延长某一层的红石输入，并在其中加入足够的中继器即可，如下所示。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 俯视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level 2k（延时）|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-ew|ts|ts|ts|ts|ts|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||ts|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|ab|ab|ab|ab|ts|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|tnt|tnt|tnt|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|tnt| |tnt|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|tnt|tnt|tnt|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|ab|ab|ab|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level 2k+1（延时）|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ts|rd-ew|rr-e4|rr-e4|rr-e4|rd-sw|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||rr-s1|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-se|rd-ew|rd-ew|rd-ew|rd-sew|rd-nw|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-ns||||rd-ns||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-ns||||rd-ns||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-ns||||rd-ns||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-ne|rd-ew|rd-ew|rd-ew|rd-nw||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>至于堆叠的高度与大炮射程的关系，由于TNT点燃后掉落方向是随机的，因此大炮射的高度每次也不一样。我做了一个小试验，1~4层堆叠，每种两组，一组静止发射10次，一组边跳边发射10次。（边跳边发射的话能够射得更高，如果在快到跳的最高点时被发射，高度就能显著增加！）试验中，每次发射时都通过&lt;code>/tp&lt;/code>命令传送到TNT炮塔的中心，以避免站位的影响。（站位偏了的话会造成向上射变成斜射，影响高度。）试验结果如下：&lt;/p>
&lt;!--
试验结果：
1层不跳:[68, 68, 68.3, 68.2, 68.3, 68.4, 68.1, 68.2, 68.1, 68.1]
1层跳:[76.4, 73.7, 74.9, 75.6, 75.6, 75.3, 78.1, 107.6, 77.7, 77.4]
2层不跳:[188, 191, 188, 188, 188, 188, 190, 188, 190, 188]
2层跳:[205, 207, 217, 209, 286, 221, 205, 207, 211, 207]
3层不跳:[331, 331, 331, 331 ,331 ,339, 331, 331, 331, 331]
3层跳:[359, 351, 496, 350, 495, 362, 350, 494, 365, 360]
4层不跳:[486, 486, 486, 486, 486, 486, 492, 486, 489, 486]
4层跳:[559, 513, 726, 527, 535, 537, 516, 716, 517, 548]
-->
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2017-09/MCHumanCannon/mc_human_cannon_test.png"
width="640"
height="473"
loading="lazy"
alt="纯净1.12中测试结果"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="324px"
>&lt;/p>
&lt;p>图中绿色三角为均值。可以发现TNT层数（可以按一层8个换算成个数）与发射高度并不呈完全线性的关系，当TNT较多时，发射高度的增加会变快。&lt;/p>
&lt;p>这个方案的炮塔堆叠不能无限高，因为TNT激活后掉落到底部的池子里是需要花时间的，如果炮塔太高，则可能导致TNT没有落进池子便爆炸，这不仅会浪费TNT，还会造成爆炸破坏（不在水里的TNT是有爆炸伤害的）。根据试验，大概堆叠个36层（72格高）就不能再堆了，再高TNT就会在控制爆炸。当然，这个堆叠型的炮塔还能够更加密集，把两侧之间的空隙也用TNT填上，然后交替用前面提到的两种方法激活TNT就能够做到更加密集的TNT爆炸，不过线路会复杂很多。&lt;/p>
&lt;p>堆叠方案有两个缺点，一个是在生存模式下装填比较麻烦，二是塔较高的时候进到发射位置就比较麻烦，可以考虑从地下开通道过去。&lt;/p>
&lt;h2 id="飞的更高">飞的更高&lt;/h2>
&lt;p>如果你想让你的大炮&lt;del>射&lt;/del>得更高，还有一下这些方法来改进~&lt;/p>
&lt;ul>
&lt;li>扩大TNT的形状（不是3x3，而是3x4或者分布式的炸药之类的~）&lt;/li>
&lt;li>用其他方法堆叠TNT，以在有限时间内堆叠更多的TNT。（例如&lt;a class="link" href="https://tieba.baidu.com/p/4623560243?see_lz=1" target="_blank" rel="noopener"
>使用漏斗矿车&lt;/a>）&lt;/li>
&lt;li>二次推进：先用一个小炮打到一定高度，再用大炮打上天。这样可以让你在进入大炮时有一定初速度~（&lt;a class="link" href="https://www.youtube.com/watch?v=ObPY4x8GHQw" target="_blank" rel="noopener"
>见Youtube上的案例&lt;/a>）&lt;/li>
&lt;/ul>
&lt;p>更复杂的大炮就自行创造啦~如果是服务器生存，这样最基本的大炮已经够玩掉不少火药了233。&lt;/p></description></item><item><title>Minecraft - 集成养鸡场</title><link>https://zyxin.xyz/blog/2017-08/MCChickenFarm/</link><pubDate>Thu, 31 Aug 2017 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2017-08/MCChickenFarm/</guid><description>&lt;p>养鸡大概是Minecraft里面最省事的养殖业了，只要有鸡蛋就能砸出小鸡，只要有小鸡就能生鸡蛋。不像牵个牛一样还得奔袭万里，甚至遇见夜里把自己埋一晚第二天牛就不见的尴尬。养鸡尽管可以很简单，但是最爽的还是做一个完全自动的养鸡场，砸鸡蛋捡鸡蛋甚至杀鸡都不用自己亲自动手，这是坠吼的！&lt;/p>
&lt;p>一个全能型的全自动的养鸡场大概分为如下几个模块：自动收集、鸡蛋传递系统、自动鸡蛋发射器、自动杀鸡器等，下面挨个介绍一下每一个模块的红石结构，以及最终的完整集成结构。&lt;/p>
&lt;h2 id="自动收集">自动收集&lt;/h2>
&lt;p>自动收集是养鸡场最基本的功能。养鸡场的典型建法是把鸡困在一个格子内，然后在鸡的脚底放上下半砖，下方放上漏斗收集鸡蛋。使用半砖的目除了防止鸡跑出来以外，是为了在杀鸡时让成熟的鸡被杀掉而小鸡不被影响到。这是因为小鸡的碰撞箱高度小于等于半格。&lt;del>因此只要它不乱跳就不会被杀&lt;/del>&lt;/p>
&lt;p>典型的鸡圈的结构如下图&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 俯视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|C|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|glass|slab|glass|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ho-$n||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>玻璃用来观察鸡的情况，C处就是鸡所在的地方，可以往这个地方砸鸡蛋。这样的结构在后文就简称鸡圈了。&lt;/p>
&lt;h2 id="鸡蛋传递系统">鸡蛋传递系统&lt;/h2>
&lt;p>鸡蛋传递系统在鸡场里起到的作用是，将鸡生出来的鸡蛋传送到发射器中自动砸成小鸡。由于砸小鸡需要在鸡圈的上方，因此需要一个将物品向上传递的系统。由于漏斗不能向上放置，因此需要别的方法来实现这个目的。&lt;/p>
&lt;p>向上传递物品有两种方式，一种是利用投掷器能向容器里传递物品的特性，另一种是利用方块会把物品“挤”到最顶端的特性。由于养鸡场砸鸡蛋只需要向上传递3格，因此也就以3格为例，传递更高的方案可以同理搭建出来。&lt;/p>
&lt;h3 id="投掷器塔">投掷器塔&lt;/h3>
&lt;p>投掷器按照向上发射的方向摆成塔，然后通过红石信号依次激活他们即可做到向上传递。具体结构如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 俯视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ts|rd-ew|rd-ew|rt-e|ab|rd|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-ns|rr-s1|ab|ab|rd-!|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-ns|dr-u|ho-w|st|st|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|rc-s|ab|ab|rr-n1!|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|rt-w!|rd-ew!|rd-nw!||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-se|ts||ab|rr-e2|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||st|st|st|st|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||dr-u||←|←|←|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rt-!|st|st|st|st|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||rd-sw|||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||rr-s2|||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||dr-u|||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||dr-u|st|st|st|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rt||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||st|st|st|st|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||dr-u|→|→|→|→|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|ab|st|st|st|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-ew|rd-ew|||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这种方案成本较高，但重在噪声小。&lt;/p>
&lt;p>平滑的石头代表与红石无关的方块，箭头指的方向是物品移动的方向。物品的移动可以通过流水（部分方块就是为流水设计的），也可以通过漏斗管道来移动（可以去掉一些方块），但是会进一步提高成本。&lt;/p>
&lt;h3 id="方块挤压">方块挤压&lt;/h3>
&lt;p>如果将九宫格中周围八格都放上石头，终中间丢一个物品，那么在往中间放上石头后物品会被挤压而浮到玻璃上面。利用方块的这个特性就可以制作一个向上传递的机构。结构如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 俯视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||sp-u|sp-u|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||rr-n4|rr-n2|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|ab|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|U|←|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|ab|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level4 ~ Level(n-1)|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|ab|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|ab|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|ab|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Leveln|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|ab|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|U|→|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|ab|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个方案看起来很没有技术含量，但确实是最简单省事，并且最省材料的方案。同样的，箭头代表物品移动的方向，U为物品上行的地方。比较器需要通入周期信号以不停地传输物品，如果用水流移动物品周期最好为1s（10Tick）左右，而如果是漏斗管道+投掷器则可以短一点。&lt;/p>
&lt;blockquote>
&lt;p>需要注意的是，收集鸡蛋和收集杀鸡的产物都通过同一个漏斗，因此其实在鸡蛋传递系统之前应该还要加一个物品分流装置。物品分流通过活塞实现比较麻烦，因此一般是通过改变水的流向来改变。改变水流方向十分简单，在这里就不叙述了。&lt;/p>
&lt;/blockquote>
&lt;h2 id="自动发射器">自动发射器&lt;/h2>
&lt;p>自动发射器把收集到的鸡蛋砸到鸡圈里，生出新的小鸡，进行可持续发展。这个自动发射装置的原理我在[小麦塔教程]({{ ref &amp;ldquo;MCTowerWheat&amp;rdquo; }})中的漏斗转移装置中有讲到，只需要用比较器获取容器中是否含有物品，再接上高频时钟即可。这里也略过了。&lt;/p>
&lt;h2 id="自动杀鸡器">自动杀鸡器&lt;/h2>
&lt;p>杀死鸡有两种方法，一种是用实心方块填充鸡圈，使得鸡窒息而死，另一种则是利用岩浆烧死鸡。自动杀鸡的装置需要在养鸡之前就设计好，不然后加就比较麻烦。&lt;/p>
&lt;h3 id="窒息">窒息&lt;/h3>
&lt;p>使鸡窒息的操作非常简单，只需要用一个粘性活塞将实心方块推到上文提到的鸡圈结构中的C位置即可使鸡窒息而死。因此只需要一个开关、一个活塞、一个方块，或者多加一个自动复位的计时器，就可以实现这个功能了~&lt;/p>
&lt;p>窒息杀死的鸡会掉落生鸡肉和羽毛。&lt;/p>
&lt;h3 id="岩浆烧死">岩浆烧死&lt;/h3>
&lt;p>岩浆烧死稍微麻烦一点，因为岩浆不能一直放在鸡圈里，而是需要杀鸡的时候才放出来。这个可以通过发射器来实现，当发射器中有一个岩浆桶的时候，给发射器一个信号它就能喷出一格岩浆，再给一次信号即可收回。而杀鸡时需要在喷出岩浆后立即收回，否则可能会把杀鸡的收获物都烧掉。这个需要通过脉冲信号来实现。&lt;/p>
&lt;p>脉冲发生器对发射器以及投掷器非常有用，因为经常会出现需要让发射电路迅速复位的情况。此外，脉冲发生器还是大量数字电路的组成部分，产生触发信号。&lt;/p>
&lt;p>脉冲发生器的基本结构在&lt;a class="link" href="https://minecraft-zh.gamepedia.com/%E8%84%89%E5%86%B2%E7%94%B5%E8%B7%AF" target="_blank" rel="noopener"
>MCWiki里有明确讲到&lt;/a>，如果需要产生单次脉冲，可以采用最简单的断路器脉冲发生器。但是由于我们不仅要喷出岩浆还要立即收回，因此需要使用两个时间间隔很密的脉冲发生器来激活两次。（理论上来说，使用开关+双边沿触发器也可以达到收放岩浆的效果，但是为了迅速收回岩浆，最好还是使用两个脉冲发生器）&lt;/p>
&lt;p>一种比较廉价的双脉冲发生器的方案如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 俯视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|pi-u|ab|ab|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|pi-u|ab|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|sand|rr-e1|rd-ew|→|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd+S|sand|rr-e3|→|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>激活S处的红石后（最简单的方法是按钮），箭头所指的方向就能输出两次间隔很短的脉冲信号。如果连上发射器的话就可以做到岩浆的发射与立即收回。&lt;/p>
&lt;p>岩浆杀死的鸡会掉落熟鸡肉，能够省去后序烧鸡的步骤。不过由于村民交易时会需要生鸡肉，因此两种方法最好都加到鸡场中去。&lt;/p>
&lt;h2 id="集成结构">集成结构&lt;/h2>
&lt;p>有了上面这些部件以后，就可以集成出一个全自动养鸡场啦~布线的方案有很多，这里就不细讲了，大概的流程是：&lt;/p>
&lt;ul>
&lt;li>自动收集 → 分流 → 储物/鸡蛋上行 → 自动投掷鸡蛋&lt;/li>
&lt;li>一个按钮连接粘性活塞控制窒息法杀鸡获得生鸡肉&lt;/li>
&lt;li>一个按钮连接发射器控制岩浆杀鸡获得熟鸡肉&lt;/li>
&lt;/ul>
&lt;p>另一点是鸡圈的布置：鸡圈的C格上方用来砸鸡蛋，左右分别是活塞+实心方块和发射器，用来杀鸡，底部用漏斗收集。这样就能有效利用鸡圈的空间了。&lt;/p>
&lt;blockquote>
&lt;p>其实这个自动鸡场还有进一步改进的地方，比如最近参观dxsc的鸡场就看到了可以用一个按钮控制自由繁殖/自动杀鸡，这就更加方便了~不过本文中这样的一个鸡场已经完全够用啦~&lt;/p>
&lt;/blockquote></description></item><item><title>Minecraft - 高频电路</title><link>https://zyxin.xyz/blog/2017-08/MCHfOscillation/</link><pubDate>Tue, 29 Aug 2017 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2017-08/MCHfOscillation/</guid><description>&lt;p>时钟电路在MC里面是十分基础的结构，主要用于发射器或者活塞，用来循环进行某一活动。而高频时钟除了这些东西以外还会产生一些别的Side Effect（比如[刷铁轨机](https://zyxin.xyz/blog/2017-08/MCTrailAndStone/什么的）。本文就稍微总结一下我知道的时钟电路方案~&lt;/p>
&lt;blockquote>
&lt;p>文中概念说明：&lt;/p>
&lt;ul>
&lt;li>RT代指&lt;a class="link" href="https://minecraft-zh.gamepedia.com/%E5%88%BB#.E7.BA.A2.E7.9F.B3.E5.88.BB" target="_blank" rel="noopener"
>红石刻(Redstone Tick)&lt;/a>。&lt;/li>
&lt;li>电路&lt;strong>可控&lt;/strong>代表可以用开关（拉杆）控制起停。&lt;/li>
&lt;li>时钟&lt;strong>不稳定&lt;/strong>指的是把时钟关上后可能会产生结构变化导致&lt;strong>需要调整后才能继续使用&lt;/strong>。&lt;/li>
&lt;li>高频电路&lt;strong>可扩展&lt;/strong>指的是可以通过改变中继器的延时或增加中继器来延长周期。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="中继器比较器">中继器&amp;amp;比较器&lt;/h2>
&lt;h3 id="方案1">方案1&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 俯视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-se|rr-e1!|rd-sw!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-ne|rr-w1|rd-nw!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>周期≥2RT，不可控，不稳定，可扩展。&lt;br/>该方案应该是最直观的时钟电路，不过开启循环比较麻烦，需要迅速通入红石信号以后再撤掉。可以通过调节中继器的数目和刻度来调节周期。&lt;/p>
&lt;h3 id="方案2">方案2&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 俯视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-ew|rr-e1!|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|rr-w1|rd-ew!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>周期为2RT，不可控，不稳定，不可扩展。&lt;br/>比较器的延时只能是1RT。&lt;/p>
&lt;h3 id="方案3">方案3&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 俯视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||rd-se|rd-sw|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rt-!|rc-e!|rd-nw|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>周期为2RT，可控，稳定，可扩展。&lt;br/>该方案是最经济并且可控的方案，实用性非常高。使用时右键比较器即可开闭。&lt;/p>
&lt;h2 id="活塞--恒定信号">活塞 + 恒定信号&lt;/h2>
&lt;h3 id="方案4">方案4&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 俯视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|rd-ew|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|sp-s||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-ns|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-ne||le-d|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>周期为3RT，可控，不稳定。&lt;/p>
&lt;h3 id="方案5">方案5&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 俯视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||rt-!|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|le-e!|ab|rd-ns!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||sp-s!|rd-ns!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||se-s|rd-ns!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>周期为3RT，可控，稳定。&lt;/p>
&lt;h3 id="方案6">方案6&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 俯视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|le-e!|ab|sp-s!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||rd-ns!|se-s|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||br|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||rd-ns!||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>周期为3RT，可控，稳定。&lt;br/>这个方案是结构非常精简的一个方案，十分有用。&lt;/p>
&lt;h3 id="方案7">方案7&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 俯视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rt-!||rd-ns!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-ne!|ab|rd-ns!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||sp-s!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||se-s|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||rd-ew!|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||le-n!||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>周期为3RT，可控，稳定。&lt;/p>
&lt;h2 id="红石火把">红石火把&lt;/h2>
&lt;p>使用红石火把作为高频源时需要注意，红石火把会在2RT周期的时钟信号中烧毁而熄灭，因此如果只用一个火把的话需要把周期调至4RT以上，否则就需要采用两个火把交替熄灭的方案。&lt;/p>
&lt;h3 id="方案8">方案8&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 俯视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-se|rd-ew|rt-s|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-ne|rr-e2|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||le-d!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>周期≥6RT，可控，稳定，可扩展。&lt;br/>中继器的延时至少设为2RT，否则会使得火把烧毁。&lt;/p>
&lt;h3 id="方案9">方案9&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 俯视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rt-s!|rd-ew!|rd-sw!||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|rr-w2|ab|le-w!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||rd-ns!||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>周期≥6RT，可控，稳定，可扩展。&lt;br/>中继器的延时同样至少为2RT。&lt;/p>
&lt;h3 id="方案10">方案10&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 俯视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|le-e!|ab|rd-sew!|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||rt-n!|rd-new!|rt-n!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||rd-ew!||rd-ew!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>周期为2RT，可控，稳定，不可扩展。&lt;br/>原理是两个火把交替熄灭。有一个缺点是火把熄灭时会产生噪音2333。&lt;/p>
&lt;h3 id="方案11">方案11&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 俯视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|rt-w!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rt-n||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-!|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|le-n|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>周期为2RT，可控，稳定，不可扩展。&lt;br/>原理同样是交替熄灭。这个结构是周期为2RT的结构中最精简的一个，不需要中继器和比较器即可稳定产生高频。需要注意的是火把只能相邻放置，不能对置在方块两侧，因为火把熄灭产生的更新可以使相邻的火把重新可用。&lt;/p>
&lt;h2 id="对置漏斗">对置漏斗&lt;/h2>
&lt;h3 id="方案12">方案12&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 俯视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ho-e|ho-w|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|rc-s|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|le-$n!||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>周期为7RT，可控，稳定，可扩展。&lt;br/>使用时只需在漏斗中任意放一个物品即可。如果需要增长周期，可以使用更长的循环漏斗管道。&lt;/p>
&lt;h2 id="矿车">矿车&lt;/h2>
&lt;p>只要让铁轨首尾相连，并再其上放上矿车，加上动力和检测铁轨就能造出时钟电路。这个方案非常直观，并且调整周期、起停控制很方便，可控性高，并且可以一周期内产生多次信号。&lt;/p>
&lt;h3 id="方案13">方案13&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 俯视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ra-se|dr-ew|ra-sw|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ar-ns!|le-d!|ar-ns!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ra-ne|ar-ew!+mc-ew|ra-nw|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>周期为20RT，可控，不稳定，可扩展。&lt;br/>这是最简单的铁路时钟电路了，感应铁轨可以产生周期信号。但由于矿车停下来的位置不可确定，因此不稳定。&lt;/p></description></item><item><title>Minecraft - 刷雪机</title><link>https://zyxin.xyz/blog/2017-08/MCSnowMachine/</link><pubDate>Sun, 27 Aug 2017 11:28:55 +0000</pubDate><guid>https://zyxin.xyz/blog/2017-08/MCSnowMachine/</guid><description>&lt;p>雪块在Minecraft里面是不错的建筑材料，材质好看，并且来源容易。不过如果有个刷雪机的话还是能够大大提高出产速度的。刷雪机有很多种版本，其中在纯净服务器能用的目前我知道的只有半自动的刷雪机，全自动的大多利用的是某种BUG，并且在之后的版本就被修复了。&lt;/p>
&lt;p>刷雪机的基本原理是雪傀儡会在脚底下生成雪（除在沙漠等群系下除外），并且除掉雪以后会立即重新生成。这就给刷雪提供了来源。收集雪球的原理全自动版本有两种，一种是1.5之前可用的活塞推动雪傀儡&lt;del>下体&lt;/del>的雪，雪被破坏后会直接生成雪球。另一种是1.5之后很多教程里提到的用水冲雪即可生成雪球。但实际上后一种是Forge的Bug，&lt;strong>纯净的Minecraft用水冲雪是无法生成雪球的&lt;/strong>。因此据我所知，在1.5之后Minecraft里没有自动刷雪的可能了，因此只能手动刷雪了。&lt;/p>
&lt;p>虽然理论上只要把雪傀儡困住即可开始刷雪，但是这样很容易伤到雪傀儡，并且挖雪角度比较小。这里介绍一个比较方便的刷雪方案，并且如果使用Forge的话，就可以立即改造为全自动的刷雪机。这个方案的核心是站在灵魂沙上的雪傀儡可以在相邻的低一格的方块上生成雪，这是因为灵魂沙的碰撞箱比较特殊，会让在其上的实体下沉两个像素。&lt;/p>
&lt;h2 id="困雪傀儡">困雪傀儡&lt;/h2>
&lt;p>刷雪机最基础的一步是困住雪傀儡，虽然困住雪傀儡很容易，但是由于方案的需要，我们要把雪傀儡捆在两个或者四个方块中间的位置，来让灵魂沙相邻的低一格方块上能够生成雪。因此最好是放在四格的中心，能够生成三格雪。&lt;/p>
&lt;p>这个方案的困雪傀儡可以分为如下几步：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>在第二格高搭建一个3x3的空心栅栏围墙&lt;/p>
&lt;/li>
&lt;li>
&lt;p>把栅栏围墙中间的地面换成灵魂沙，并在其上用两个雪块和南瓜造一个雪傀儡&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在雪傀儡头顶放一个活塞和一个栅栏，栅栏在活塞下方，并准备好红石信号（红石块或方块+拉杆）&lt;/p>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2017-08/MCSnowMachine/snowgolem_with_fence.jpg"
width="552"
height="705"
loading="lazy"
alt="被围困的雪傀儡"
class="gallery-image"
data-flex-grow="78"
data-flex-basis="187px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>用雪球把雪傀儡打到一个角落&lt;/p>
&lt;/li>
&lt;li>
&lt;p>激活活塞，把栅栏推进中间&lt;/p>
&lt;/li>
&lt;li>
&lt;p>把多余的栅栏打掉&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2017-08/MCSnowMachine/snowgolem_with_fence_in.jpg"
width="830"
height="467"
loading="lazy"
alt="困好的雪傀儡|去掉多余的栅栏"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>这样困住的雪傀儡一方面会在地上三格产生雪，另外头顶其实是被栅栏封住的，因此下雨不会影响到它。&lt;/p>
&lt;h2 id="刷雪设置">刷雪设置&lt;/h2>
&lt;p>困好傀儡后在周围稍稍改动一下就能很方便地进行刷雪了。首先需要把雪傀儡相邻的四格地面方块，除了灵魂沙以外的三个都打掉，然后&lt;strong>把雪傀儡脚底的雪打掉&lt;/strong>。此时就会发现低一层的三格表面已经可以生成雪了。这样其实就已经可以愉快地刷雪啦~&lt;/p>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2017-08/MCSnowMachine/snowgolem_low.jpg"
width="412"
height="544"
loading="lazy"
alt="雪傀儡在相邻的三格表面产雪"
class="gallery-image"
data-flex-grow="75"
data-flex-basis="181px"
>&lt;/p>
&lt;p>但是这样刷雪的时候由于雪球堆叠数目少，并且合成雪块又需求比较大，会经常碰见背包拾满的情况，因此可以增加一个物品收集系统。最直接方便的就是把相邻三格换成漏斗做地面，直接就能收集。另外一种是把三格做成水道封起来，然后在一端用发射器放水，另一端用漏斗接收即可。然后将发射器连上周期为8tick的时钟就可以自动冲雪了。这样不仅节省材料，而且&lt;strong>在有Forge的情况下就是一个自动刷雪机&lt;/strong>~&lt;/p>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2017-08/MCSnowMachine/snow_machine.jpg"
width="895"
height="680"
loading="lazy"
alt="完成版的刷雪机"
class="gallery-image"
data-flex-grow="131"
data-flex-basis="315px"
>&lt;/p></description></item><item><title>Minecraft - 刷花机</title><link>https://zyxin.xyz/blog/2017-08/MCFlowerMachine/</link><pubDate>Sun, 27 Aug 2017 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2017-08/MCFlowerMachine/</guid><description>&lt;p>Minecraft里面有很多种类的花，如玫瑰、向日葵、郁金香、兰花等等，如果配上一个好的材质包，就十分美好了~！除此之外，花也是合成染料的原料，因此在搭大型建筑物的时候花也是需求很大的。本文就介绍Minecraft中的刷花机，用花团装饰你的家吧！&lt;/p>
&lt;p>需要注意的是刷花机需要大量的骨粉，因此建议先建一个刷怪塔（最好是小白刷怪塔）~&lt;/p>
&lt;h1 id="抖动刷花机">抖动刷花机&lt;/h1>
&lt;p>这一类刷花机的原理是对草地使用骨粉的话会生成草丛和花，再使用时钟或者BUD将花“抖落”即可。下面是BUD刷花的方案（用到了之前在红石基础里没有讲到的水平BUD，可以参见&lt;a class="link" href="https://minecraft-zh.gamepedia.com/%E6%95%99%E7%A8%8B/%E6%96%B9%E5%9D%97%E6%9B%B4%E6%96%B0%E6%84%9F%E5%BA%94%E5%99%A8#.E6.B4.BB.E5.A1.9EBUD.E4.BD.8D.E5.85.85.E8.83.BD" target="_blank" rel="noopener"
>Wiki页面的“活塞BUD位充能”&lt;/a>）。结构如下：&lt;/p>
&lt;p>{% minecraft 俯视图 %}
|&amp;mdash;-Level1|-
|ab|ab|ab|ab|ab|rt-!| | | |-
|ab| | | | |rt-!|ab|ab|ab|-
|ab| | | | |ab | | |ab|-
|ab|pi-e!|pe-e|gb|gb|gb|gb|pi-w|ab|-
|ab|pi-e!|pe-e|gb|gb|gb|gb|pi-w|ab|-
|ab|pi-e!|pe-e|gb|gb|gb|gb|pi-w|ab|-
|ab|pi-e!|pe-e|gb|gb|gb|gb|pi-w|ab|-
|&amp;mdash;-Level2|-
|rd-se!|rd-ew!|rd-ew!|rd-sew!|rr-w1!|ab | |||-
|rd-ns!| | |ab | |pe-n |rr-e1!|rd-ew!|rd-sw!|-
|rd-ns!| | | | |pi-n!| ||rd-ns!|-
|rd-ns!| | | | |S | ||rd-ns!|-
|rd-ns!| | | | | | ||rd-ns!|-
|rd-ns!| | | | | | ||rd-ns!|-
|rd-ns!| | | | | | ||rd-ns!|-
|&amp;mdash;-Level3|-
|||| | |||||-
||||rd-ns!| |||||-
||||ab |ab|||||-
|&amp;mdash;-Level4|-
||||||||||-
||||||||||-
||||rt|rd-ew|||||-
{% endminecraft %}&lt;/p>
&lt;p>这个刷花机本质上是个大型的BUD，其中S上方的活塞为感应器，剩下的活塞都是执行器。对S处地面不停地使用骨粉就能够大量刷花了~草地原则上尺寸不限，不过由于感应器位置的限制，4x4左右的尺寸是比较合适的，大了骨粉几乎影响不到，小了又会浪费骨粉。&lt;/p>
&lt;p>这个刷花机能够刷出的花为一格高的花，并且与地形有关，因此基本上在繁花森林(Flower Forest)建一个刷花机就基本能满足需求了。唯一的例外是兰花，兰花只在沼泽生成，因此需要兰花的话得去沼泽建刷花机。具体的生物群系与话的关系&lt;a class="link" href="https://minecraft-zh.gamepedia.com/%E8%8A%B1#.E8.8A.B1.E4.B8.8E.E7.94.9F.E7.89.A9.E7.BE.A4.E7.B3.BB" target="_blank" rel="noopener"
>参见Wiki&lt;/a>。&lt;/p>
&lt;p>另外需要注意的是，中间刷花的地面一定要是草方块，因此如果不是利用现成的地形改造刷花机的话就需要用精准镐子采集草方块来造刷花机了。&lt;/p>
&lt;h1 id="发射器刷花机">发射器刷花机&lt;/h1>
&lt;p>上面一种刷花机只能刷一格高的花，而两格高的花（玫瑰从、向日葵等）有一个特别好用的特性，对这个花的第二格使用骨粉会直接掉落一朵新的花。因此可以用发射器与高频时钟来快速刷花，并且效率比第一种方案要高很多~&lt;/p>
&lt;p>上结构：
{% minecraft 侧视图 %}
|&amp;mdash;-Level1|-
|||||-
|||||-
|rd-$!|rd-$!|rd-$!||-
|ab|ab|ab||-
|&amp;mdash;-Level2|-
|||||-
||||rt-$n!|-
|rd-$!|rr-s1!+R|rd-$!|rd-$!|-
|ab|ab|ab|ab|-
|&amp;mdash;-Level3|-
|||||-
||di-$s|rc-$e|ab|-
|rt-$e|ab|ab|ab|-
|&amp;mdash;-Level4|-
||glass|||-
|glass|F|glass||-
|glass|F|glass||-
||gb|||-
||mc/ho-$ew+ra-$ew|||-
|ch-$|ho-$w|||-
|&amp;mdash;-Level5|-
|||||-
||glass|||-
||glass|||-
{% endminecraft %}&lt;/p>
&lt;p>R代表一个继电器，朝着发射器下方的方块。F代表两格高的花~刷花机的本体是Level4，下方用漏斗矿车来收集掉落物，其他的方块只是为了把花封闭起来防止掉落物乱跑，或者为了生成高频时钟。&lt;/p>
&lt;p>这个刷花机体积小，制造简单，唯一可惜的就是只能刷大型花~&lt;/p></description></item><item><title>Minecraft - 刷铁轨&amp;刷石机</title><link>https://zyxin.xyz/blog/2017-08/MCTrailAndStone/</link><pubDate>Sun, 27 Aug 2017 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2017-08/MCTrailAndStone/</guid><description>&lt;p>铁轨是自动化设备的另一大功臣，充能铁轨作为长距离自动运输最重要的手段，成本比较高，因此在最开始玩MC的时候根本就没怎么造铁轨。。但后面进了服务器后发现可以刷铁轨！顿时打开了新世界的大门，不仅用铁轨搭建高空交通站，欣赏雨林、针叶林风景、还能抓村民回来当苦工~2333因此在这里介绍一下刷铁机的造法。&lt;/p>
&lt;p>此外，因为如果把铁轨搭建在地面上的话经常会受到怪物的干扰，因此一般会选择把铁轨搭在地下或者空中。而我个人比较喜欢空中铁轨，能看风景，而搭建空中铁轨就需要耗费大量耗材。出于成本和稳定性考虑铁路路基一般选择石头而不是雪块或者其他更难刷的材料，因此会需要大量的石头。这里也顺便把刷石机介绍一下了~&lt;/p>
&lt;p>PS: 本文所有结构都是我之前在各种教程中看到的，非原创，这里只是整理一下。&lt;/p>
&lt;h2 id="刷铁轨">刷铁轨&lt;/h2>
&lt;p>刷铁轨的原理是利用MC在高频推动铁轨时产生的判定BUG，因此这些原理很有可能在将来有会被禁掉。&lt;del>不过总有大佬能发现这样的BUG哈哈&lt;/del>刷铁轨机能够刷全种类铁轨：普通铁轨、充能铁轨、激活铁轨、感应铁轨，因此非常实用！不过唯一需要注意的是由于使用了高频信号，在服务器上运行时不要常开。&lt;/p>
&lt;h3 id="19-版本前">1.9 版本前&lt;/h3>
&lt;p>在1.9之前，通常利用的刷铁轨机是两个错位对置的活塞，这是一个半自动机构，需要手动放置铁轨。具体结构如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 俯视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level1|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|ab|ab|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|↑||ab+R||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||↑|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level2|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|sp-e|ra-ns||ra-ew||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||sp-w|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个结构中，铁轨的朝向不限，箭头代表高频时钟信号输入（两个活塞要连同一个信号）。用法是当开启高频时钟输入以后，在R处不停放置你想刷的铁轨，即可获得两倍的铁轨。&lt;/p>
&lt;h3 id="19-版本后">1.9 版本后&lt;/h3>
&lt;p>1.9以及1.9之后，这个BUG被修复了。现在可以使用的刷铁轨机是另一种方案，结构如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 侧视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||R|sl|sp-w||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ra-$eu|sl|sl|ab|←|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|obsidian|A|A|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中R处放上想刷的铁轨，箭头代表高频时钟信号输入（貌似周期要在2tick以上），A处要留成空气（避免粘液块粘上其他东西，该装置粘液块的其他方向上也不能有方块）。这里使用黑曜石的目的是防止此方块被粘液块带走，这是这个刷铁轨机的关键。&lt;/p>
&lt;blockquote>
&lt;p>关于高频时钟信号的设计见&lt;a class="link" href="https://zyxin.xyz/blog/2017-08/MCHfOscillation/" >我的另一篇文章&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="刷石机">刷石机&lt;/h2>
&lt;p>刷石机的基本原理是&lt;strong>流动&lt;/strong>的岩浆与的&lt;strong>流动的&lt;/strong>水相遇会生成石头（水可以是静止水，但是生产效率没有流动水高）。这是游戏本身的设定，因此刷石机在版本更新后基本上不会有太大的变化。用这个原理直接就能造出很简单的刷石机，只需要用一个活塞+时钟信号推走石头即可（要注意不能直接在岩浆与水交汇处挖石头，因为这样很有可能石头就被岩浆烧掉了。最合适的时钟间隔是10tick）。不过这里介绍一种利用BUD生成一列石头的方案，能够更加方便的刷石头。&lt;/p>
&lt;p>这里的BUD采用&lt;a class="link" href="https://zyxin.xyz/blog/2017-08/MCTowerRedstone/" >红石基础&lt;/a>中的下落物BUD（因为试了一下别的BUD好象不太行）。刷石机结构示意图如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 俯视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level0|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level1|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab||ab|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level2|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||pi-s|dirt|dirt||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|sp-u|st+G|wa|wa|dirt|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||st|dirt|dirt||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||st||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level3|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|dirt| |dirt||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|gs|lv+S|dirt|wa+S|dirt|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|dirt| |dirt||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level4|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-!|||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|sand|dirt||dirt||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rr-n1!|||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|le-n!|||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中标S的是岩浆源和水源，G是生成石头的地方，石头会沿着G往下一直生成，直到活塞推不动为止（13格）。方案中的泥土是为了封闭岩浆和水。相比采用时钟电路的方案，这个方案有一点不好是活塞推不动以后需要重置设备，重置只需要在挖掉石头以后，在活塞周围放置方块使BUD更新即可。&lt;/p>
&lt;hr>
&lt;blockquote>
&lt;p>Tips:&lt;/p>
&lt;ul>
&lt;li>在Minecraft里面铺设长距离铁路一般是刷感应铁轨和充能铁轨，然后按照1感应铁轨+3充能铁轨的配置来铺，这样能够让矿车自动保持高速，并且省下很多红石材料。&lt;/li>
&lt;li>长距离旅行的话可以使用另一种结构：&lt;strong>冰路&lt;/strong>。就是用冰铺路，并在离地三格高的位置铺方块顶。玩家在冰上行走时边疾行边跳能获得非常快的速度。&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Minecraft - 集成作物塔 - 可可豆</title><link>https://zyxin.xyz/blog/2017-08/MCTowerCocoa/</link><pubDate>Sat, 26 Aug 2017 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2017-08/MCTowerCocoa/</guid><description>&lt;p>可可豆是一种染料，可以种在&lt;strong>丛林木&lt;/strong>的树干上。可可豆由于需求量真心比较低，因此其实没有自动化的必要，一般用量比较大的地方是用作建筑材料的原料，如果是地毯那么手动栽培+羊毛种植其实就够了，而如果是硬化粘土（陶瓦）则直接可以从黏土山挖到。不过由于可可豆种植比较容易集成进作物塔，因此我也把结构放在这里吧~&lt;/p>
&lt;p>由于可可豆是先种植再生长的，因此无法使用BUD来自动化（除非暴力使用长周期时钟，如阳光传感器），只有半自动的结构。可可豆的收集有两种方法，水流式和活塞式。&lt;/p>
&lt;h2 id="基本布置">基本布置&lt;/h2>
&lt;p>两种方法的种植布置方式是一样的，只是收集方式不同，因此把布置方式与底部的水流收集先讲一下。按照作物塔的尺寸，考虑到走道和水流收集，从林木可以种成3排，每一排9格宽，高度不限，但为了便于种植，4格高比较合适。&lt;/p>
&lt;p>布置的俯视图如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 俯视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level1|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||ab|ab| |ab|ab||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||ab|ab| |ab|ab||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||ab|ab| |ab|ab||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||ab|ab| |ab|ab||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||ab|ab|ab |ab|ab||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||ab|ab|si-n+P|ab|ab||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||ab|ab|ab |ab|ab||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||ab|ab| |ab|ab||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||ab|ab| |ab|ab||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||ab|ab| |ab|ab||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||ab|ab| |ab|ab||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level2|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|ab|wa|wa|ab|wa|wa|ab|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|ab|wa|wa|ab|wa|wa|ab|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|ab|wa|wa|ab|wa|wa|ab|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|ab|wa|wa|ab|wa|wa|ab|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|ab|wa|wa|ab|wa|wa|ab|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|ab|wa|wa|wa|wa|wa|ab|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|ab|wa|wa|ab|wa|wa|ab|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|ab|wa|wa|ab|wa|wa|ab|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|ab|wa|wa|ab|wa|wa|ab|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|ab|wa|wa|ab|wa|wa|ab|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|ab|wa|wa|ab|wa|wa|ab|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level3|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st|wa|wa ||fg-ns!| |fg-ns!||wa |wa|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st|wa|ab+S||fg-ns!|ab+S|fg-ns!||ab+S|wa|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st|wa|ab+S||fg-ns!|ab+S|fg-ns!||ab+S|wa|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st|wa|ab+S||fg-ns!|ab+S|fg-ns!||ab+S|wa|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st|wa|ab+S||fg-ns!|ab+S|fg-ns!||ab+S|wa|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st|wa+O|ab+S|| | | ||ab+S|wa+O|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st|wa|ab+S||fg-ns!|ab+S|fg-ns!||ab+S|wa|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st|wa|ab+S||fg-ns!|ab+S|fg-ns!||ab+S|wa|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st|wa|ab+S||fg-ns!|ab+S|fg-ns!||ab+S|wa|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st|wa|ab+S||fg-ns!|ab+S|fg-ns!||ab+S|wa|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st|wa|wa ||fg-ns!| |fg-ns!||wa |wa|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>O代表水源，S代表此处为从林木种植处（一共三排），P为作物塔管道出口。左右的平整石头代表走道，中间的两排栅栏门也是起走道作用，便于在其中播种可可豆。当需要播种时可以把栅栏门关上，播种完毕后把栅栏门打开，便于可可豆下落。栅栏门也可以换成活板门。不过实测站在边上是可以播种到里面的，因此这个栅栏门不是必须的。&lt;/p>
&lt;p>由于下文提到的可可豆种植结构可能会使作物塔管道被遮住，因此又可能需要额外的水流转移绕开遮挡。以及由于本文的红石设计难度不大，并且有额外的一圈供铺设红石，因此与上下层的红石连接，以及半自动设备中开关信号的接收在这里就略去了。&lt;/p>
&lt;h2 id="水流式">水流式&lt;/h2>
&lt;p>水流式的一排可可豆种植结构如图：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 侧视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----无红石信号|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||ab|wa|ab||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||pi-e!|pe-e|ab||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||ab+lighter+B|||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||| ab |||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||ab||ab||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab||||ab|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab||||||ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|Ow-$|Ow-$|Ow-$|Ow-$||Ow-$|Ow-$|Ow-$|Ow-$|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|Ow-$|Ow-$|Ow-$|Ow-$||Ow-$|Ow-$|Ow-$|Ow-$|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ellipsis-ns|ellipsis-ns|ellipsis-ns|ellipsis-ns||ellipsis-ns|ellipsis-ns|ellipsis-ns|ellipsis-ns|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|Ow-$|Ow-$|Ow-$|Ow-$||Ow-$|Ow-$|Ow-$|Ow-$|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|Ow-$|Ow-$|Ow-$|Ow-$||Ow-$|Ow-$|Ow-$|Ow-$|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----有红石信号|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||ab|wa|ab||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||pi-e!|pe-e|ab||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||rt-$e!+lighter|ab+lighter+B|||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||ab+rt-$n|||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||ab|rt-$!|ab||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab||ab||ab|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|||rt-$|||ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|Ow-$|Ow-$|Ow-$|Ow-$|ab|Ow-$|Ow-$|Ow-$|Ow-$|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|Ow-$|Ow-$|Ow-$|Ow-$|rt-$!|Ow-$|Ow-$|Ow-$|Ow-$|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ellipsis-ns|ellipsis-ns|ellipsis-ns|ellipsis-ns|ellipsis-ns|ellipsis-ns|ellipsis-ns|ellipsis-ns|ellipsis-ns|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|Ow-$|Ow-$|Ow-$|Ow-$|ab|Ow-$|Ow-$|Ow-$|Ow-$|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|Ow-$|Ow-$|Ow-$|Ow-$|rt-$!|Ow-$|Ow-$|Ow-$|Ow-$|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>顶端较亮的B方块是在指这一个平面前后两个都有一个方块，以限制水在这一格只能向左右流下去&lt;/p>
&lt;p>当种在树干上的可可豆成熟之后可以switch红石灯，然后水则会顺着几个砖块流下，使得每一列从林木都能被水冲刷到，种在上面的可可豆即可被冲刷掉。&lt;/p>
&lt;p>可以看出该方案好在结构简单，成本十分低廉。但缺点是整体过高，并且水流下落和收回的时间均较慢。&lt;/p>
&lt;h2 id="活塞式">活塞式&lt;/h2>
&lt;p>活塞式的设计就是通过对称的活塞把从林木“晃”一下，使得可可豆掉落。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 正视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----正面|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ellipsis-ns|ellipsis-ns|ellipsis-ns|ellipsis-ns|ellipsis-ns|ellipsis-ns|ellipsis-ns||ellipsis-ns|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|pi-e|Ow-$|Ow-$|Ow-$|Ow-$|Ow-$|Ow-$||pi-w|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|pi-e|Ow-$|Ow-$|Ow-$|Ow-$|Ow-$|Ow-$||pi-w|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|pi-e|Ow-$|Ow-$|Ow-$|Ow-$|Ow-$|Ow-$||pi-w|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|pi-e|Ow-$|Ow-$|Ow-$|Ow-$|Ow-$|Ow-$||pi-w|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>侧面的活塞红石布线如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 侧视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----后面|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||rd-$!||rd-$!|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|pi-d|rd-$!|ts-$|pi-d|ts-$|rd-$!|pi-d|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|pi-d|ts-$|rd-$!|pi-d|rd-$!|ts-$|pi-d|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|pi-d|rd-$!|ts-$|pi-d|ts-$|rd-$!|pi-d|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|pi-d|ts-$|rd-$!|pi-d|rd-$!|ts-$|pi-d|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|wa-$2|wa-$1|ts-$| |ts-$|wa-$1|wa-$2|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----前面|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||rd-$!||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||rd-$!|ab|rd-$!|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab |ab|ab |||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>只需将传入本层的红石信号引到侧面就行。在三排之间穿行的方法，一种是从活塞与木头间的空格通过，另一种就是可以单独用一排栅栏门替换从林木，造一个通道出来。&lt;/p>
&lt;hr>
&lt;p>可可豆的自动农场之前在服务器上没有搭建过，这个实在本地试验出来的，尺寸和作物塔是可以对上的，敬请参考~&lt;/p></description></item><item><title>Minecraft - 红石相关资源</title><link>https://zyxin.xyz/blog/2017-08/MCRedstoneRes/</link><pubDate>Fri, 25 Aug 2017 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2017-08/MCRedstoneRes/</guid><description>&lt;p>Minecraft中的红石有非常多的玩法，基本只有你想不到，没有你做不到的。但是Minecraft的红石原理入门较难，如果有数电基础还好说，没有的话推荐通过看一些大佬的教程的上手。这里就介绍一些学习红石的资源~&lt;/p>
&lt;h1 id="minecraft-wiki">Minecraft Wiki&lt;/h1>
&lt;p>Minecraft Wiki中的内容非常全面，其中对红石的教程也比较多，是很好的参考材料。Wiki中文版大部分是翻译自英文版的内容，因此如果能读英文版的话学到的东西会多一点。&lt;/p>
&lt;ul>
&lt;li>红石页面：&lt;a class="link" href="https://minecraft-zh.gamepedia.com/%E7%BA%A2%E7%9F%B3" target="_blank" rel="noopener"
>中文&lt;/a>|&lt;a class="link" href="https://minecraft.gamepedia.com/Redstone" target="_blank" rel="noopener"
>EN&lt;/a>&lt;/li>
&lt;li>红石设备列表：&lt;a class="link" href="https://minecraft-zh.gamepedia.com/Template:Redstone" target="_blank" rel="noopener"
>中文&lt;/a>|&lt;a class="link" href="https://minecraft.gamepedia.com/Template:Redstone" target="_blank" rel="noopener"
>EN&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="明月庄主">明月庄主&lt;/h1>
&lt;p>很多MC老玩家应该都听过庄主的名字了，我就是看他的红石视频入门的。庄主已经持续高产好几年了，从基础的红石到复杂红石设备都有涉及，并且还会有生存直播等等。非常值得关注~&lt;/p>
&lt;ul>
&lt;li>微信公众号：moonmc666&lt;/li>
&lt;li>&lt;a class="link" href="https://space.bilibili.com/2170934" target="_blank" rel="noopener"
>B站&lt;/a>：ID 2170934&lt;/li>
&lt;/ul>
&lt;h1 id="youtube-tunnels">Youtube Tunnels&lt;/h1>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.youtube.com/user/sethbling" target="_blank" rel="noopener"
>sethbling&lt;/a>：著名油管MC播主。在前几年经常有各种各样的红石设计视频，但好象最近没什么更新了。&lt;/li>
&lt;li>&lt;a class="link" href="https://www.youtube.com/channel/UCO0jGQi0zxbpbNQ2Qz6b2Hw" target="_blank" rel="noopener"
>Automatic Redstone&lt;/a>：中文，无语音，基础红石设备为主。&lt;/li>
&lt;/ul>
&lt;h1 id="贴吧">贴吧&lt;/h1>
&lt;ul>
&lt;li>&lt;a class="link" href="http://tieba.baidu.com/f?kw=%e7%ba%a2%e7%9f%b3%e7%94%b5%e8%b7%af" target="_blank" rel="noopener"
>红石电路吧&lt;/a>：大佬聚集地，貌似现在里面有一个TheRedPixel团队了？&lt;/li>
&lt;/ul>
&lt;hr>
&lt;blockquote>
&lt;p>题外话：红石电路其实分两种，一种是利用了命令方块的，相当于开挂。能做的东西多很多，并且体积也比较小，但是这对生存模式是不友好的；另一种是不用命令方块的，能实现的电路也很多，只是体积相对较大。在学习的时候要区分一下~&lt;/p>
&lt;/blockquote></description></item><item><title>Minecraft - 集成作物塔 - 甘蔗</title><link>https://zyxin.xyz/blog/2017-08/MCTowerSugarcane/</link><pubDate>Wed, 23 Aug 2017 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2017-08/MCTowerSugarcane/</guid><description>&lt;p>甘蔗机是一个在早期就能搭建起来的复杂自动设备。甘蔗在水边很容易就能找到，并且生长会产生新方块，因此甘蔗机只需要一个BUD和一堆活塞。如果使用普通活塞制作BUD的话，就能够在挖到铁块之后立即建造出来。&lt;/p>
&lt;p>一般如果独立造甘蔗机的话会并排造，而在作物塔内还要考虑到收集的方便，并对尺寸进行了一定的压缩。BUD使用的是在[红石基础](https://zyxin.xyz/blog/2017-08/MCTowerRedstone/中的粘性活塞+火把结构（当然，也可以使用别的BUD结构），然后通过活塞阵列进行扩增。当甘蔗生长时立刻被活塞推掉变成掉落实体，然后流水收集即可。&lt;/p>
&lt;p>话不多说，直接上结构。一排甘蔗机的结构如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 俯视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level0|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ellipsis-ns||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level1|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|ab|ab|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|wa+O|dirt|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|wa|dirt|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|wa|dirt|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|wa|dirt|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ellipsis-ns|ellipsis-ns|ellipsis-ns|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level2|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|ab|ab|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab||S|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab||S|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab||S|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab||S|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ellipsis-ns||ellipsis-ns|ellipsis-ns||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level3|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|ab|pe-u|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ib-ns||pi-w||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ib-ns||pi-w||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ib-ns||pi-w||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ib-ns||pi-w||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ellipsis-ns||ellipsis-ns||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level4|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|ab|ab|ab|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||ellipsis-ns|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level5|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|rr-w1||rd-ew!|rd-sw!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||rd-ns!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||rd-ns!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||rd-ns!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||rd-ns!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||ellipsis-ns|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level6|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-ew|ab|ab|rt-w!||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level7|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||rd-ew|rd-ew|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>O是水源方块，S的位置种上甘蔗。这个结构里面有很多多余的方块，有些是为了便于爬上去建造，另一些是为了保证甘蔗不被弹到别的地方。可以适当去掉其中的一些。栅栏的作用一是防止误落水中，二是限制甘蔗掉落的位置，保证甘蔗能够掉落到水中。&lt;/p>
&lt;p>将几列这样的结构并排放置即可得到作物塔中的甘蔗层。具体的密排方式如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 俯视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level0|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|ab|ab|ab|ab|ab|ab|ab|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level1|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|||ab|||ab||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|||ab|||ab||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|||ab|||ab||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|||ab|||ab||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|||ab|||ab||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|||ab|||ab||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|||ab|||ab||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|ab|ab|ab|ab|ab|ab|ab|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|wa+O|wa|wa|wa|wa|wa|wa|wa|P||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|ab|ab|ab|ab|ab|ab|ab|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level2|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|ab|ab|ab|ab|ab|ab|ab|ab|st|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|wa+O|dirt|ab|wa+O|dirt|ab|wa+O|dirt||st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|wa|dirt|ab|wa|dirt|ab|wa|dirt||st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|wa|dirt|ab|wa|dirt|ab|wa|dirt||st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|wa|dirt|ab|wa|dirt|ab|wa|dirt||st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|wa|dirt|ab|wa|dirt|ab|wa|dirt||st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|wa|dirt|ab|wa|dirt|ab|wa|dirt||st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|wa|dirt|ab|wa|dirt|ab|wa|dirt||st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|wa|dirt|ab|wa|dirt|ab|wa|dirt||st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab||||||||||st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st|st|st|st|st|st|st|st|st|st|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level3|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|ab|ab|ab|ab|ab|ab|ab|ab|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab||S|ab||S|ab||S|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab||S|ab||S|ab||S|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab||S|ab||S|ab||S|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab||S|ab||S|ab||S|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab||S|ab||S|ab||S|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab||S|ab||S|ab||S|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab||S|ab||S|ab||S|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab||S|ab||S|ab||S|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab||ab|||ab|||ab|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level4|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||pe-u||||||pe-u|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ib-ns||pi-w|ib-ns||pi-w|ib-ns||pi-w||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ib-ns||pi-w|ib-ns||pi-w|ib-ns||pi-w||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ib-ns||pi-w|ib-ns||pi-w|ib-ns||pi-w||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ib-ns||pi-w|ib-ns||pi-w|ib-ns||pi-w||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ib-ns||pi-w|ib-ns||pi-w|ib-ns||pi-w||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ib-ns||pi-w|ib-ns||pi-w|ib-ns||pi-w||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ib-ns||pi-w|ib-ns||pi-w|ib-ns||pi-w||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ib-ns||pi-w|ib-ns||pi-w|ib-ns||pi-w||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ib-ns|||ib-ns|pe-u||ib-ns|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level5|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|ab|ab|ab|ab||ab|ab|ab|ab|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||ab|||ab|||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||ab|||ab|||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||ab|||ab|||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||ab|||ab|||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||ab|||ab|||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||ab|||ab|||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||ab|||ab|||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||ab|||ab|||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||ab|ab|ab|ab|ab||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level6|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|rr-w1||rd-ew!|rd-sw!||ab|rr-w1||rd-ew!|rd-sw!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||rd-ns!|||rd-ns!|||rd-ns!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||rd-ns!|||rd-ns!|||rd-ns!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||rd-ns!|||rd-ns!|||rd-ns!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||rd-ns!|||rd-ns!|||rd-ns!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||rd-ns!|||rd-ns!|||rd-ns!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||rd-ns!|||rd-ns!|||rd-ns!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||rd-ns!|||rd-ns!|||rd-ns!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||rd-ns!|||rd-ns!|||rd-ns!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||ab|rr-w1||rd-ew!|rd-nw!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level7|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-ew|ab|ab|rt-w!|||rd-ew|ab|ab|rt-w!||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||rd-ew|ab|ab|rt-w!||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level8|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||rd-ew|rd-ew|||||rd-ew|rd-ew|rt-w!||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||rd-ew|rd-ew|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>按照惯例，O为水源，S种甘蔗，平整石头代表走道，P代表作物塔管道。&lt;/p>
&lt;p>这个方案在底层的密度非常大，两排甘蔗机刚好可以在BUD的中继器处分开，不产生干扰（红石信号强度不足以锁定中继器）。可以看出甘蔗田由于BUD的存在，高度比之前的几种都要高（相互叠加的情况下Level0和Level8是不能重合的，因此实际要占9层），并且高层的空间利用率比较低。不过空间什么的应该不会缺吧2333~。&lt;/p>
&lt;p>如果有侦测器的话应该能把高度压缩不少，但是成本应该会有一定上升。&lt;/p>
&lt;p>右下角有一缺口，这个位置就是作物通道的位置，上层的作物可以流到这一格进入管道向下传递。不过由于甘蔗层的管道在角落上，因此如果要与管道在中间的层（如小麦塔）相连，则需要像&lt;a class="link" href="https://zyxin.xyz/blog/2017-08/MCTowerCactus/" >上一篇&lt;/a>所写的转移装置来转移位置。&lt;/p></description></item><item><title>Minecraft - 集成作物塔 - 南瓜&amp;西瓜</title><link>https://zyxin.xyz/blog/2017-08/MCTowerPumpkin/</link><pubDate>Wed, 23 Aug 2017 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2017-08/MCTowerPumpkin/</guid><description>&lt;p>南瓜和西瓜都是需要先长出茎，茎成熟之后则会在周围四个生成南瓜或西瓜。由于这两种作物的生成是在四周生成的，因此BUD的排列比较Tricky。&lt;/p>
&lt;p>我使用的BUD结构仍然是在&lt;a class="link" href="https://zyxin.xyz/blog/2017-08/MCTowerRedstone/" >红石基础&lt;/a>中的粘性活塞+火把结构。南瓜茎需要交替种植，在交替的泥土之间会生成南瓜，用BUD检测它然后用活塞推掉即可。&lt;/p>
&lt;p>自动南瓜的基本单元是一个BUD+一个南瓜可能生成的格子，因此不考虑布线的情况下暴力堆叠即可。但是在这个自动塔中由于尺寸的限制，需要一定的规划~&lt;/p>
&lt;p>直接上结构示意图：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;span class="lnt">84
&lt;/span>&lt;span class="lnt">85
&lt;/span>&lt;span class="lnt">86
&lt;/span>&lt;span class="lnt">87
&lt;/span>&lt;span class="lnt">88
&lt;/span>&lt;span class="lnt">89
&lt;/span>&lt;span class="lnt">90
&lt;/span>&lt;span class="lnt">91
&lt;/span>&lt;span class="lnt">92
&lt;/span>&lt;span class="lnt">93
&lt;/span>&lt;span class="lnt">94
&lt;/span>&lt;span class="lnt">95
&lt;/span>&lt;span class="lnt">96
&lt;/span>&lt;span class="lnt">97
&lt;/span>&lt;span class="lnt">98
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 俯视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level0|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|ab|ab|ab|ab|ab|ab|ab|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level1|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab|||st|||ab|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab|||st|||ab|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab|||st|||ab|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab|||st|||ab|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab|||st|||ab|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab|||st|||ab|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab|||st|||ab|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|ab|ab|ab|ab|ab|ab|ab|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|wa+O|wa|wa|wa|wa|wa|wa|wa|P||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|ab|ab|ab|ab|ab|ab|ab|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level2|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st|st|st|st|st|st|st|st|st|st|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|dirt|wa+O|fa|ab||ab|dirt|wa+O|fa|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|fa|wa|dirt|ab|ts|ab|fa|wa|dirt|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|dirt|wa|fa|ab|ts|ab|dirt|wa|fa|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|fa|wa|dirt|ab|ts|ab|fa|wa|dirt|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|dirt|wa|fa|ab|ts|ab|dirt|wa|fa|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|fa|wa|dirt|ab|ts|ab|fa|wa|dirt|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|dirt|wa|fa|ab|ts|ab|dirt|wa|fa|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|fa|wa|dirt|ab| |ab|fa|wa|dirt|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st||||||||||st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st|st|st|st|st|st|st|st|st|st|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level3|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|pi-e||ib-ns|S|gs||pi-e||ib-ns|S|gs|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|gs|S|ib-ns||pi-w||gs|S|ib-ns||pi-w|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|pi-e||ib-ns|S|gs||pi-e||ib-ns|S|gs|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|gs|S|ib-ns||pi-w||gs|S|ib-ns||pi-w|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|pi-e||ib-ns|S|gs||pi-e||ib-ns|S|gs|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|gs|S|ib-ns||pi-w||gs|S|ib-ns||pi-w|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|pi-e||ib-ns|S|gs||pi-e||ib-ns|S|gs|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|gs|S|ib-ns||pi-w||gs|S|ib-ns||pi-w|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level4|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||sp-u||||||sp-u||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||pe-u||||||sp-u||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||sp-u||||||sp-u||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||sp-u||||||sp-u||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||sp-u||||||sp-u||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||sp-u||||||sp-u||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||sp-u||||||sp-u||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||sp-u||||||sp-u||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level5|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|ab|ab||||ab|ab|ab|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab|ab|ab||||ab|ab|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|ab|ab||||ab|ab|ab|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab|ab|ab||||ab|ab|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|ab|ab||||ab|ab|ab|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab|ab|ab||||ab|ab|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|ab|ab||||ab|ab|ab|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab|ab|ab||||ab|ab|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level6|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-!||rr-e1|ab|||rd-!||rr-e1|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|rr-w1||rd-!|||ab|rr-w1||rd-!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-!||rr-e1|ab|||rd-!||rr-e1|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|rr-w1||rd-!|||ab|rr-w1||rd-!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-!||rr-e1|ab|||rd-!||rr-e1|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|rr-w1||rd-!|||ab|rr-w1||rd-!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-!||rr-e1|ab|||rd-!||rr-e1|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|rr-w1||rd-!|||ab|rr-w1||rd-!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level7|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rt-e!|ab|ab|rd-ew|||rt-e!|ab|ab|rd-ew||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||rd-ew|ab|ab|rt-w!|||rd-ew|ab|ab|rt-w!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rt-e!|ab|ab|rd-ew|||rt-e!|ab|ab|rd-ew||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||rd-ew|ab|ab|rt-w!|||rd-ew|ab|ab|rt-w!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rt-e!|ab|ab|rd-ew|||rt-e!|ab|ab|rd-ew||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||rd-ew|ab|ab|rt-w!|||rd-ew|ab|ab|rt-w!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rt-e!|ab|ab|rd-ew|||rt-e!|ab|ab|rd-ew||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||rd-ew|ab|ab|rt-w!|||rd-ew|ab|ab|rt-w!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level8|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||rd-ew|rd-ew|||||rd-ew|rd-ew|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||rd-ew|rd-ew|||||rd-ew|rd-ew||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||rd-ew|rd-ew|||||rd-ew|rd-ew|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||rd-ew|rd-ew|||||rd-ew|rd-ew||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||rd-ew|rd-ew|||||rd-ew|rd-ew|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||rd-ew|rd-ew|||||rd-ew|rd-ew||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||rd-ew|rd-ew|||||rd-ew|rd-ew|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||rd-ew|rd-ew|||||rd-ew|rd-ew||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>O是水源，S种南瓜或西瓜种子，平整的石头是走道，P是作物塔管道。上面的萤石可以换成南瓜灯，是用来&lt;strong>照明的&lt;/strong>，当然也可以用其他的方块，只要保证南瓜不生成在这个格子即可。水流方向也可以左右对调。&lt;/p>
&lt;p>这个方案资源开销特别大，粘性活塞和中继器都很多，在前期可能不太吃得消，但重在特别整齐o(*￣▽￣*)ゞ。整个机构净高有8层，堆叠时Level0和Level8是可以重合的。&lt;/p>
&lt;hr>
&lt;p>到这为止，我在服务器上搭的作物塔层已经全部介绍完了~下面还会介绍一些没有在服务器上搭的作物层以及一些新版本的作物。&lt;/p></description></item><item><title>Minecraft - 集成作物塔 - 仙人掌&amp;鸡蛋</title><link>https://zyxin.xyz/blog/2017-08/MCTowerCactus/</link><pubDate>Tue, 22 Aug 2017 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2017-08/MCTowerCactus/</guid><description>&lt;h2 id="仙人掌">仙人掌&lt;/h2>
&lt;p>仙人掌收获的基本原理是，当仙人掌方块被生成时，如果周围方块内有物体，那么仙人掌方块会变成实体掉落。（周围有方块时仙人掌方块无法被放置，但是如果先放置仙人掌后放置其他方块，则仙人掌会掉落）&lt;/p>
&lt;p>因此常见的仙人掌农场会把仙人掌间隔着交叉种植，并在空隙上放上栅栏来使仙人掌掉落。具体结构如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 侧视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----侧视图|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||ib-ns||ib-ns||ib-ns||ib-ns||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||cactus-$||cactus-$||cactus-$||cactus-$||cactus-$|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||sand||sand||sand||sand||sand|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st||ab||ab||ab||ab||ab||st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||slab+ts-$|wa+O|wa-$7|wa-$6|wa-$5|wa-$4|wa-$5|wa-$6|wa-$7|wa+O|slab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab|ab|ab|ab|ab|ab|ab|ab|ab|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% minecraft 俯视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----俯视图|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st|st|st|st|st|st|st|st|st|st|st|st|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st|ts+S|ts+S|ts+S|ts+S|ts+S|ts+S|ts+S|ts+S|ts+S|ts+S|ts+S|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st|ts+S|sand+cactus+O|wa+rd-!|sand+cactus|wa+rd-!|sand+cactus|wa+rd-!|sand+cactus|wa+rd-!|sand+cactus+O|ts+S|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st|ts+S|wa+rd-!|sand+cactus|wa+rd-!|sand+cactus|wa+rd-!|sand+cactus|wa+rd-!|sand+cactus|wa+rd-!|ts+S|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st|ts+S|sand+cactus|wa+rd-!|sand+cactus|wa+rd-!|sand+cactus|wa+rd-!|sand+cactus|wa+rd-!|sand+cactus|ts+S|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st|ts+S|wa+rd-!|sand+cactus|wa+rd-!|sand+cactus|wa+rd-!|sand+cactus|wa+rd-!|sand+cactus|wa+rd-!|ts+S|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st|ts+S|sand+cactus|wa+rd-!|sand+cactus|wa+rd-!|P|wa+rd-!|sand+cactus|wa+rd-!|sand+cactus|ts+S|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st|ts+S|wa+rd-!|sand+cactus|wa+rd-!|sand+cactus|wa+rd-!|sand+cactus|wa+rd-!|sand+cactus|wa+rd-!|ts+S|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st|ts+S|sand+cactus|wa+rd-!|sand+cactus|wa+rd-!|sand+cactus|wa+rd-!|sand+cactus|wa+rd-!|sand+cactus|ts+S|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st|ts+S|wa+rd-!|sand+cactus|wa+rd-!|sand+cactus|wa+rd-!|sand+cactus|wa+rd-!|sand+cactus|wa+rd-!|ts+S|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st|ts|sand+cactus+O|wa+rd-!|sand+cactus|wa+rd-!|sand+cactus|wa+rd-!|sand+cactus|wa+rd-!|sand+cactus+O|ts+S|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st|ts+S|ts+S|ts+S|ts+S|ts+S|ts+S|ts+S|ts+S|ts+S|ts+S|ts+S|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st|st|st|st|st|st|st|st|st|st|st|st|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的示意图中，O代表水源，S代表下半砖，P代表作物塔管道。铁栅栏可以用木栅栏代替，俯视图的红石代表栅栏的位置。没有标记S的砖块用作台阶，周围的石头代表走廊。这个方案中栅栏有浪费，最节省的方案中，栅栏所影响的方块是不相互重叠的。不过为了美观和插火把的需要，本文中还是在全部缝隙中插入了栅栏。&lt;/p>
&lt;p>被栅栏破坏的仙人掌方块会掉入到下面流动的水中，最终被四角水源产生的水流冲到中间的通道，掉落下去而被收集，简单有效。唯一不足就是仙人掌掉落的方向随机，可能会掉到其他仙人掌上而被破坏，或者掉落到走廊上而无法收集。&lt;/p>
&lt;h2 id="鸡蛋">鸡蛋&lt;/h2>
&lt;p>鸡会以一定间隔自动生蛋，因此非常省事，只需要把它们养起来就可以啦233。有一种更为复杂的鸡圈，除了收集鸡蛋外还可以自动杀鸡、烤鸡和生小鸡，这个会在后面的文章中讲到。&lt;/p>
&lt;p>在作物塔中养鸡可以直接用一池水把鸡圈养着，鸡生出的鸡蛋可以直接掉入下方进行收集。该层的剖面如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 侧视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----中部|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab||||||||||ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st|ab||||||||||ab|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|wa|wa|wa|wa|wa|wa|wa|wa|wa|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|fg-$ew!|fg-$ew!|fg-$ew!|fg-$ew!|fg-$ew!|fg-$ew!|fg-$ew!|fg-$ew!|fg-$ew!|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|wa-$4|wa-$3|wa-$2|wa-$1|P|wa-$1|wa-$2|wa-$3|wa-$4|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab|ab|ab|ab||ab|ab|ab|ab|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----边上|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab||||||||||ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st|ab||||||||||ab|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|wa|wa|wa|wa|wa|wa|wa|wa|wa|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|fg-$ew!|fg-$ew!|fg-$ew!|fg-$ew!|fg-$ew!|fg-$ew!|fg-$ew!|fg-$ew!|fg-$ew!|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|wa+O|wa-$7|wa-$6|wa-$5|wa-$4|wa-$5|wa-$6|wa-$7|wa+O|ab||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab|ab|ab|ab|ab|ab|ab|ab|ab|||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>收集方法类似于上面的仙人掌，是利用四角水源把鸡蛋冲到中间。这个方案中上层每一歌水的下方都有一个&lt;strong>打开的栅栏门&lt;/strong>来阻隔水，同时不阻挡方块的下落。用告示牌可以达到相似的效果，但是告示牌阵列是依附于一个初始方块的，如果那个方块被破坏，那么所有告示牌都会被破坏。这样很不稳定，而栅栏门则没有这个问题。&lt;/p>
&lt;p>使用时向池子里打鸡蛋，或者把鸡从外面赶进来即可。另外一个需要注意的是水面到池边需要&lt;strong>至少两格的高度差&lt;/strong>，否则鸡可能会从池子里扑腾出来。&lt;/p>
&lt;hr>
&lt;blockquote>
&lt;h2 id="tips">Tips&lt;/h2>
&lt;p>这两种农场都是四角水源，因此可以用于通道转移，将角落的通道掉落下来的物品冲到中间继续下落（南瓜和甘蔗会从角落下落）。&lt;/p>
&lt;/blockquote>
&lt;p>非常简单的两层农场。下面会写使用了BUD的农场，会比较复杂。&lt;/p></description></item><item><title>Minecraft - 集成作物塔 - 小麦</title><link>https://zyxin.xyz/blog/2017-08/MCTowerWheat/</link><pubDate>Tue, 22 Aug 2017 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2017-08/MCTowerWheat/</guid><description>&lt;p>小麦塔的原理非常简单，也是大部分生存玩家最先考虑的自动设施。小麦塔不仅仅可以种&lt;strong>小麦&lt;/strong>，还可以种&lt;strong>土豆&lt;/strong>、&lt;strong>胡萝卜&lt;/strong>，甚至&lt;strong>地狱疣&lt;/strong>，以及1.9进入PC版的&lt;strong>甜菜&lt;/strong>。&lt;/p>
&lt;p>在作物塔中的小麦层有两种，一种是半自动的，一种是全自动的~还有一种&lt;a class="link" href="https://www.baidu.com/link?url=empBD1QmwvUrtpwHx_d8MHgY1dh81Ye6yHEYeTvKY-s-D30Ui54MZXnVBbk9J7Cv&amp;amp;wd=&amp;amp;eqid=908f4a640000b1050000000459976271" target="_blank" rel="noopener"
>1x1的刷小麦机&lt;/a>，靠大量骨粉来催熟，速度超群，在有刷小白的刷怪塔后可以建造这样的小麦机，也属于半自动的，同样适用上述作物，就不放在这里讲了。&lt;/p>
&lt;h1 id="半自动小麦塔">半自动小麦塔&lt;/h1>
&lt;p>半自动小麦塔的功能是自动收割，但是不能自动播种，因此每次收割完毕后需要人工播种。半自动小麦塔的结构如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;span class="lnt">84
&lt;/span>&lt;span class="lnt">85
&lt;/span>&lt;span class="lnt">86
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 俯视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level0|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||||rt-!+darker|||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||| |dirt| ||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||dirt|si-n+P|dirt||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||| |dirt| ||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level1|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||||st|||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||fa|fa|fa|fa|fa|fa|fa|fa|fa||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||fa|fa|fa|fa|fa|fa|fa|fa|fa||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||fa|fa|fa|fa|fa|fa|fa|fa|fa||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||fa|fa|fa|fa|fa|fa|fa|fa|fa||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||fa|fa|fa|fa|wa|fa|fa|fa|fa||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||fa|fa|fa|fa|fa|fa|fa|fa|fa||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||fa|fa|fa|fa|fa|fa|fa|fa|fa||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||fa|fa|fa|fa|fa|fa|fa|fa|fa||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||fa|fa|fa|fa|fa|fa|fa|fa|fa||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level2|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||||rt|||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ts+S|ts+S|ts+S|ts+S|ts+S|ts+S|ts+S|ts+S|ts+S|ts+S|ts+S||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ts+S||||||||||ts+S||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ts+S||||||||||ts+S||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ts+S||||||||||ts+S||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ts+S||||||||||ts+S||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ts+S||||||||||ts+S||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ts+S||||||||||ts+S||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ts+S||||||||||ts+S||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ts+S||||||||||ts+S||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ts+S||||||||||ts+S||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ts+S|ts+S|ts+S|ts+S|ts+S|ts |ts+S|ts+S|ts+S|ts+S|ts+S||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level3|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st|st|st|st|st|st|st|st|st|st|st|st|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st| | |||||||| | |st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st|pi-e!|pe-e||||||||pe-w|pi-w!|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st| | |||||||| | |st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st| | |||||||| | |st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st| | |||||||| | |st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st| | |||||||| | |st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st| | |||||||| | |st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st| | |||||||| | |st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st| | |||||||| | |st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st|pi-e!|pe-e||||||||pe-w|pi-w!|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st| | |||||||| | |st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|st|st|st|st|st|st|st|st|st|st|st|st|st|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level4|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||||rt-!|||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ts|ts|ts|ts|ts |ts |ts |ts|ts|ts|ts||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ts|wa|ts| | | | | |ts|wa|ts||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ts|ts| | | | | | | |ts|ts||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ts| | | | | | | | | |ts||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ts| | | | |dirt+lighter| | | | |ts||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ts| | | |dirt+lighter|si-n |dirt+lighter| | | |ts||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ts| | | | |dirt+lighter| | | | |ts||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ts| | | | | | | | | |ts||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ts|ts| | | | | | | |ts|ts||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ts|wa|ts| | | | | |ts|wa|ts||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|| |ts| | | | | | | |ts| ||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level1&amp;#39; (上一层)|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||||st+lighter|||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||rd-se!|rd-ew!|rd-ew!|rd-ew!|rd-ew!|rd-new!|rd-ew!|rd-ew!|rd-ew!|rd-ew!|rd-sw!||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||rd-ns!|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|rd-ns!||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||rd-ns!|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|rd-ns!||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||rd-ns!|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|rd-ns!||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||rd-ns!|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|rd-ns!||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||rd-ns!|fa+lighter|fa+lighter|fa+lighter|fa+lighter|wa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|rd-ns!||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||rd-ns!|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|rd-ns!||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||rd-ns!|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|rd-ns!||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||rd-ns!|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|rd-ns!||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||rd-ns!|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|fa+lighter|rd-ns!||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>图示说明：&lt;/p>
&lt;ul>
&lt;li>P代表作物塔管道出口，上层以及本层的作物通过该出口落向下一层。&lt;/li>
&lt;li>严格来说小麦塔只有四层高，在叠加的时候，第0层是可以与下一层重合的。&lt;/li>
&lt;li>第0层的四个泥土只有放告示牌的是必须的，其他的都可以不要，放在这只是为了对称，以及可以插下一层的火把~~&lt;/li>
&lt;li>第3层周围的石头代表走道。&lt;/li>
&lt;li>标为S的半砖是下半砖，第2层唯一一个上半砖可以作为台阶，用来跳上走道&lt;/li>
&lt;li>最顶层Level1&amp;rsquo;其实是上一层的Level1。&lt;/li>
&lt;/ul>
&lt;p>小麦塔中间的泥土9x9的尺寸是由一格水可以灌溉周围四格以内的耕地所决定的。&lt;/p>
&lt;p>收割的原理非常简单，当信号切换后，活塞不再激活，活塞头收回，水下流，把小麦冲到中间的水源里。之后小麦会掉落下去或者被漏斗收集。中间的告示牌用来阻挡水下流。红石信号通过示意图上端的红石火把向上传递，小麦塔四层的高度可以保证它可以正确累加而信号没有错误。&lt;/p>
&lt;h1 id="全自动小麦塔">全自动小麦塔&lt;/h1>
&lt;p>村民农场也称全自动小麦农场，顾名思义完全不需要人为操作，会自动产生作物。这个方案实现全自动是靠村民&lt;del>用爱发电&lt;/del>。村民会自动照顾作物，并且村民在一定情况下会向其他农民扔作物，利用这个特性就可以从村民手里骗吃的了2333。更棒的一点是村民在仍作物时会自动用小麦合成面包，这样连合成的时间都能省啦~&lt;/p>
&lt;p>不过由于需要村民，因此找到村庄是前提条件，并且还要花大力气把村民运到家里（一般是通过矿车捕获村民，然后通过下界铁路运送回来）。但其实只要有两个村民就能开始繁殖，然后就一劳永逸了~&lt;/p>
&lt;p>村民小麦塔的结构如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 俯视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level0|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||ab||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level1|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||st||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||st||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||fa |fa |fa |fa |fa |fa |fa |fa |fa ||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||fa |fa |fa |fa |fa |fa |fa |fa |fa ||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||fa |fa |fa |fa |fa |fa |fa |fa |fa ||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||fa |fa |fa |fa |fa |fa |fa |fa |fa ||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||fa |fa |fa |fa |wa |fa |fa |fa |fa ||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||fa |fa |fa |fa |fa |fa |fa |fa |fa ||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||fa |fa |fa |fa |fa |fa |fa |fa |fa ||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ho-d|fa |fa |fa |fa |fa |fa |fa |fa |fa ||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||st|ho-n|ho-w|fa|fa|fa|fa |fa |fa |fa |fa ||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level2|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||||ab|fg-ew|ab|||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab|ab|ab|ab|ab|fg-ew|ab|ab|ab|ab|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab||||| |||||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab||||| |||||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab||||| |||||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab||||| |||||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab||||| |||||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab||||| |||||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab||||| |||||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|ho-d||||| |||||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|V|ab||||| |||||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|ab|ab|ab|ab|ab|ab |ab|ab|ab|ab|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level3|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||||||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab|ab|ab|ab|ab||ab|ab|ab|ab|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab||||| |||||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab||||| |||||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab||||| |||||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab||||| |||||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab|||||ab+lighter |||||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab||||| |||||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||ab||||| |||||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|ho-d||||| |||||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|V|ab||||| |||||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|ab|ab|ab|ab|ab|ab |ab|ab|ab|ab|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>标注V的地方需要囚禁一个&lt;strong>身上没有作物的农民&lt;/strong>进去（比如刚出生的），此外还要在&lt;strong>农田区域内放另一个农民&lt;/strong>。可以看到村民农场比水流农场要矮一层，更加紧凑了。不过由于是用漏斗收集作物，因此物品的传输需要使用漏斗管道。&lt;/p>
&lt;p>这个作物塔的原理是，村民会主动照料周围一定范围内的耕地，并且当它发现附近（可以穿透方块）有农民身上没有什么作物的话它可能会把作物扔给较穷的农民。因此我们只要保证一个一直很穷的农民在吸引他扔食物即可~~~~简直是地主剥削~~。两个栅栏门的作用是便于出入并防止农民跑出来。&lt;/p>
&lt;h2 id="漏斗转移装置">漏斗转移装置&lt;/h2>
&lt;p>由于村民农场的收集方式为漏斗，如果要与下层的水流收集的作物层叠加的话需要把漏斗中的物品转移到水流中。转移可以使用一个自动喷射装置，如下所示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 俯视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-se!|rd-ew!|rd-sew!|dirt+darker+rd-ew!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-ne!|rr-w1!|rs-w! |dr-s |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中泥土上的红石比其他红石要高一层（即在发射器上表面那一层）。比较器是否激活都可以。将漏斗管道的出口接到发射器中，发射器会自动把物品喷射到指定方向。将发射器出口放一个水流，即可完成漏斗管道到水流收集的过渡。&lt;/p>
&lt;p>自动喷射的原理是当发射器中有物品时，发射器会从后端向比较器输入信号，激活比较器自身构成的时钟电路。时钟电路再通过图中的泥土块激活发射器。只要发射器中有物品，时钟电路便会一直运行，直到将物品清空。&lt;/p>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2017-08/MCTowerWheat/mc_wheat_auto.png"
width="1366"
height="705"
loading="lazy"
alt="村民农场"
class="gallery-image"
data-flex-grow="193"
data-flex-basis="465px"
>&lt;/p>
&lt;hr></description></item><item><title>Word - 快速输入数学公式</title><link>https://zyxin.xyz/blog/2017-08/WordMath/</link><pubDate>Tue, 22 Aug 2017 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2017-08/WordMath/</guid><description>&lt;p>周围很多人对Word中输入公式的方式非常不满，认为在Word中打公式太慢，因而转投LaTeX。每当发现这样的情况，我就会告诉他们其实Word现在输入公式已经可以非常快了，而且相比TeX，可以实时预览能方便太多！我的大部分复变笔记就是在Surface上全部用Onenote输入的。然而坑爹的就是Word对公式输入的帮助非常少，&lt;del>很难搜到详细的文档&lt;/del>（好吧我被打脸了，这里有官方文档：&lt;a class="link" href="https://support.office.com/en-us/article/Linear-format-equations-using-UnicodeMath-and-LaTeX-in-Word-2E00618D-B1FD-49D8-8CB4-8D17F25754F8" target="_blank" rel="noopener"
>英文&lt;/a>|&lt;a class="link" href="https://support.office.com/zh-cn/article/%E5%9C%A8-Word-%E4%B8%AD%E4%BD%BF%E7%94%A8-UnicodeMath-%E5%92%8C%E4%B9%B3%E8%83%B6%E6%BC%86%E7%BA%BF%E6%80%A7%E6%A0%BC%E5%BC%8F%E5%85%AC%E5%BC%8F-2E00618D-B1FD-49D8-8CB4-8D17F25754F8" target="_blank" rel="noopener"
>中文&lt;/a>）。因此此文的目的就在于详细展示一下Word中快速输入公式的技巧，造福广大苦逼工科生。&lt;/p>
&lt;p>在Office2010之前的早期版本，Word中的公式是MathType通过“域”的方式插入的（类似于在Word中插入Visio图表的样子），实际渲染时直接是生成图片，而如果需要编辑的话得在外部程序MathType中编辑。这个方式有很多弊端，一很丑，二生成的pdf的公式是图片，三操作很不方便。而在近期的Office版本中公式输入大有改进，并且在&lt;strong>PPT、Onenote（包括Win10的UWP版）等Office软件&lt;/strong>中已经全面支持native体验的公式输入（公式编辑器貌似被称作&lt;em>UnicodeMath&lt;/em>，在Office大部分产品中都已包含），现在我打公式的速度已经起飞了。&lt;/p>
&lt;h2 id="基本操作">基本操作&lt;/h2>
&lt;p>在Word中任意位置按下&lt;kbd>Alt&lt;/kbd>+&lt;kbd>=&lt;/kbd>（Mac中是&lt;kbd>Control&lt;/kbd>+&lt;kbd>=&lt;/kbd>）可以切换公式编辑，或者选中文字按下&lt;kbd>Alt&lt;/kbd>+&lt;kbd>=&lt;/kbd>把它变成公式，再按&lt;kbd>Ctrl&lt;/kbd>+&lt;kbd>I&lt;/kbd>可以设置成斜体。输入内置公式或者拷入的公式可以按&lt;kbd>Enter&lt;/kbd>可以整体格式化。对于格式化的公式可以选择“线性”格式查看原始文字。在公式编辑中，快捷命令通过空格可以立即转换成格式化后的公式形式，因此当公式没有按照你想要的形式生成时可以按空格试试。&lt;/p>
&lt;p>例如内置公式&lt;code>(a+b)^n=∑_(k=0)^n▒〖(n¦k) a^k b^(n-k) 〗&lt;/code>，选中它后按下&lt;kbd>Alt&lt;/kbd>+&lt;kbd>=&lt;/kbd>，然后把光标移到末尾按回车即可变成格式化的公式：
$$(a+b)^n=\sum_{k=0}^n\binom{n}{k}a^kb^{n-k}$$&lt;/p>
&lt;p>在Word公式中有一些内置的函数识别（例如sin、exp），这些函数的名字打完后按空格会自动生成公式块，并且取消函数名称的斜体显示。即$sin$ → $\sin\square$&lt;/p>
&lt;blockquote>
&lt;p>内置的函数名的列表可以在Word的公式选项中“可识别的按钮”面板中查看&lt;/p>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2017-08/WordMath/word_math_funcs.png"
width="673"
height="297"
loading="lazy"
alt="内置函数列表"
class="gallery-image"
data-flex-grow="226"
data-flex-basis="543px"
>&lt;/p>
&lt;/blockquote>
&lt;h2 id="快捷命令">快捷命令&lt;/h2>
&lt;p>公式输入有不少快捷命令（转义符），熟练掌握就能大大提高速度。&lt;/p>
&lt;blockquote>
&lt;p>Note: 在下面的命令中，&lt;strong>空格是很重要&lt;/strong>的。如果代码中有空格的话代表在Word中输入时也要按下空格。&lt;/p>
&lt;/blockquote>
&lt;h3 id="常规符号">常规符号&lt;/h3>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2017-08/WordMath/word_symbol.jpg"
width="936"
height="258"
loading="lazy"
class="gallery-image"
data-flex-grow="362"
data-flex-basis="870px"
>&lt;/p>
&lt;p>在Word的公式工具栏中，鼠标移到工具栏符号列表中的符号上即可看见符号的意义和快捷命令。（不过不是所有符号都有快捷键）&lt;/p>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2017-08/WordMath/word_symbol_sample.png"
width="290"
height="212"
loading="lazy"
alt="一个例子"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="328px"
>&lt;/p>
&lt;p>例如在上图中，小于等于的快捷输入方法是&lt;code>\le&lt;/code>、&lt;code>\leq&lt;/code>和&lt;code>&amp;lt;=&lt;/code>，其中输入&lt;code>&amp;lt;=&lt;/code>会自动转换成该符号，而另外两个需要输入后&lt;strong>按空格才会立即转换&lt;/strong>（不按的话在继续输入公式时也会转换）。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Tips&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>变体字母有三种：手写体（&lt;code>\script$&lt;/code>），花体（&lt;code>\fraktur$&lt;/code>），双线（&lt;code>\double$&lt;/code>），其中&lt;code>$&lt;/code>为任意字母（大小写是对应的）。这三种字母应用在不同的场景，需注意区分。如&lt;code>\doubleR&lt;/code>($\mathbb{R}$)为实数，&lt;code>\scriptR&lt;/code>($\mathcal{R}$)为黎曼积分，&lt;code>\frakturR&lt;/code>($\mathfrak{R}$)为实部。部分字母的双线形式可以直接通过&lt;code>\$$&lt;/code>打出（如&lt;code>\jj&lt;/code> → $\mathbb{j}$，&lt;code>\Dd&lt;/code> → $\mathbb{D}$）&lt;/li>
&lt;li>〈与TeX相同〉希腊字母的快捷命令，小写开头为小写，大写开头为大写：&lt;code>\gamma&lt;/code> → γ &lt;code>\Gamma&lt;/code> → Γ。个别字母有多种小写，如&lt;code>\phi&lt;/code> → $\phi$ | &lt;code>\varphi&lt;/code> → $\varphi$。这样的字母有&lt;code>\varepsilon \varphi \varpi \varrho \varsigma \vartheta&lt;/code>。&lt;/li>
&lt;li>〈与TeX相同〉积分符号、导数等是可以累计的：&lt;code>\int \iint \iiint \oint \oiint \dot \ddot \prime \pprime&lt;/code>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="括号">括号&lt;/h3>
&lt;p>括号会默认配对和自动封闭，如果需要输入不自动配对的括号，或者转义括号，请使用命令输入括号，而不是直接打（括号的快捷命令见下文）。&lt;/p>
&lt;p>如果只有一边括号，使用位置符可以&lt;code>\open&lt;/code> &lt;code>\close&lt;/code>或&lt;code>\begin&lt;/code> &lt;code>\end&lt;/code>封闭括号块：
&lt;code>{5x\close&lt;/code>结果为$\{5x$，&lt;code>\open5x}&lt;/code>结果为$5x\}$。当然，直接打&lt;code>{5x&lt;/code>也是可以的，但是这样的话&lt;code>5x&lt;/code>和&lt;code>{&lt;/code>会在同一级，而如果封闭括号块后&lt;code>5x&lt;/code>会被包在一个公式块内，并且可以&lt;strong>自动根据括号内内容调整大小&lt;/strong>。&lt;/p>
&lt;p>&lt;em>例：&lt;code>123\open 45\close &lt;/code>=&lt;code>123\begin 45\end &lt;/code>=&lt;code>123〖45〗 &lt;/code>=&lt;code>123\box 45 &lt;/code> → $123\boxed{45}$&lt;/em>&lt;/p>
&lt;h3 id="排版符号">排版符号&lt;/h3>
&lt;ul>
&lt;li>位置格式符：
&lt;ul>
&lt;li>&lt;code>\above&lt;/code>: 位于上方 （显示为 $\perp$ ，即&lt;code>\perp&lt;/code>/&lt;code>\bot&lt;/code>）&lt;/li>
&lt;li>&lt;code>\below&lt;/code>: 位于下方 （显示为 $\top$ ，即&lt;code>\top&lt;/code>）&lt;/li>
&lt;li>&lt;code>\left&lt;/code>: 位于左侧 （显示为 $\vdash$ ，即&lt;code>\vdash&lt;/code>）&lt;/li>
&lt;li>&lt;code>\right&lt;/code>: 位于右侧 （显示为 $\dashv$ ，即&lt;code>\dashv&lt;/code>）&lt;/li>
&lt;li>&lt;code>\atop&lt;/code>: 上下排列 （显示为 ¦ ）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>\rect&lt;/code>: 矩形方框&lt;/li>
&lt;li>&lt;code>\matrix&lt;/code>: 矩阵 &amp;amp; &lt;code>\eqarray&lt;/code>：多行公式
&lt;ul>
&lt;li>&lt;code>&amp;amp;&lt;/code>: 换列（可以看作&lt;code>\t&lt;/code>，对应TeX的&lt;code>&amp;amp;&lt;/code>）
&lt;ul>
&lt;li>也可以作为参数分隔：&lt;em>&lt;code>\sqrt(5&amp;amp;2)&lt;/code> → $\sqrt[5]2$&lt;/em>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>@&lt;/code>: 换行（可以看作&lt;code>\n&lt;/code>，对应TeX的&lt;code>\\&lt;/code>）&lt;/li>
&lt;li>&lt;em>例：&lt;code>\matrix (A&amp;amp;B@C&amp;amp;D) &lt;/code> → $\begin{array}{lc}A&amp;amp;B\\C&amp;amp;D\end{array}$&lt;/em>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>\of&lt;/code>：构建子区域，用于文字运算的表达
&lt;ul>
&lt;li>&lt;em>例：&lt;code>cov \of (A^T A) &lt;/code> → $\mathrm{cov}\left(A^TA\right)$&lt;/em>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>Tips&lt;/strong>
多行公式可以利用&lt;code>&amp;amp;&lt;/code>指定对齐位置：&lt;/p>
&lt;ul>
&lt;li>&lt;code>\eqarray (x+y&amp;amp;=2@x+y+z&amp;amp;=3@z&amp;amp;=5)&lt;/code> $$\begin{array}{rcl}x+y&amp;amp;=&amp;amp;2\\x+y+z&amp;amp;=&amp;amp;3\\z&amp;amp;=&amp;amp;5\end{array}$$&lt;/li>
&lt;li>&lt;code>\eqarray (&amp;amp;x+y=2@&amp;amp;x+y+z=3@&amp;amp;z=5)&lt;/code> $$\begin{align}&amp;amp;x+y=2\\&amp;amp;x+y+z=3\\&amp;amp;z=5\end{align}$$&lt;/li>
&lt;/ul>
&lt;p>多行公式对齐也可以用&lt;kbd>Shift&lt;/kbd>+&lt;kbd>Enter&lt;/kbd>换行之后，右键在菜单中选定指定位置对齐。不过此方法只能指定一个对齐位置。&lt;/p>
&lt;p>使用&lt;code>\Vmatrix&lt;/code>开头可以直接输入竖线包围的矩阵：&lt;/p>
&lt;ul>
&lt;li>&lt;code>\Vmatrix (A&amp;amp;B@C&amp;amp;D) &lt;/code> $$\begin{Vmatrix}A&amp;amp;B\\C&amp;amp;D\end{Vmatrix}$$&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="自动合并">自动合并&lt;/h3>
&lt;p>在公式输入时，有不少的符号会自动合并，便于你输入一些常用符号。如之前所说，这些快捷方式都能在工具栏的提示框中可以找到，但是由于不好找，这里还是总结一下:&lt;/p>
&lt;ul>
&lt;li>&lt;code>+-&lt;/code> → $\pm$, &lt;code>-+&lt;/code> → $\mp$&lt;/li>
&lt;li>&lt;code>...&lt;/code> → $\ldots$&lt;/li>
&lt;li>&lt;code>/=&lt;/code> → $\neq$, &lt;code>~=&lt;/code> → $\cong$, &lt;code>/~=&lt;/code> → $\ncong$ &lt;code>:=&lt;/code> → $\mathrel{\vcenter{:}}=$&lt;/li>
&lt;li>&lt;code>/&amp;gt;&lt;/code> → $\ngeq$, &lt;code>/&amp;lt;&lt;/code> → $\nleq$&lt;/li>
&lt;li>&lt;code>&amp;gt;&amp;gt;&lt;/code> → $\gg$, &lt;code>&amp;lt;&amp;lt;&lt;/code> → $\ll$&lt;/li>
&lt;li>&lt;code>&amp;gt;=&lt;/code> → $\geq$, &lt;code>&amp;lt;=&lt;/code> → $\leq$&lt;/li>
&lt;li>&lt;code>-&amp;gt;&lt;/code> → $\rightarrow$, &lt;code>&amp;lt;-&lt;/code> → $\leftarrow$&lt;/li>
&lt;li>&lt;code>&amp;gt;-&lt;/code> → $\succ$, &lt;code>-&amp;lt;&lt;/code> → $\prec$ (好像只有OneNote支持)&lt;/li>
&lt;li>&lt;code>=&amp;gt;&lt;/code> → $\Rightarrow$ (好像只有OneNote支持)&lt;/li>
&lt;/ul>
&lt;h2 id="工具栏中常用结构的输入">工具栏中常用结构的输入&lt;/h2>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2017-08/WordMath/word_math_tools.png"
width="501"
height="67"
loading="lazy"
alt="Word中的公式工具栏"
class="gallery-image"
data-flex-grow="747"
data-flex-basis="1794px"
>&lt;/p>
&lt;h3 id="分数">分数&lt;/h3>
&lt;ul>
&lt;li>$\frac{A}{B}$ ← &lt;code>A/B&lt;/code>&lt;/li>
&lt;li>&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;mfrac bevelled="true">&lt;mi>A&lt;/mi>&lt;mi>B&lt;/mi>&lt;/mfrac>&lt;/math> ← &lt;code>A\sdiv B&lt;/code>&lt;/li>
&lt;li>$A⁄B$ ← &lt;code>A\ldiv B&lt;/code>&lt;/li>
&lt;li>$\partial A$ ← &lt;code>\partial A&lt;/code>（偏导）&lt;/li>
&lt;/ul>
&lt;h3 id="上下标">上下标&lt;/h3>
&lt;ul>
&lt;li>$A^B$ ← &lt;code>A^B&lt;/code>&lt;/li>
&lt;li>$A_B$ ← &lt;code>A_B&lt;/code>&lt;/li>
&lt;li>$A^B_C$ ← &lt;code>A^B_C&lt;/code>&lt;/li>
&lt;li>$_C^BA$ ← &lt;code>(_C^B)A&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="根式">根式&lt;/h3>
&lt;ul>
&lt;li>$\sqrt A$ ← &lt;code>\sqrt A&lt;/code>&lt;/li>
&lt;li>$\sqrt[B]A$ ← &lt;code>\sqrt (B&amp;amp;A)&lt;/code> 或 &lt;code>\root B\of A&lt;/code>&lt;/li>
&lt;li>$\sqrt[3]A$ ← &lt;code>\cbrt A&lt;/code>&lt;/li>
&lt;li>$\sqrt[4]A$ ← &lt;code>\qdrt A&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="积分大型运算符">积分、大型运算符&lt;/h3>
&lt;ul>
&lt;li>$\int A$ ← &lt;code>\int \of A&lt;/code>&lt;/li>
&lt;li>$\int^B_C A$ ← &lt;code>\int^B_C\of A&lt;/code>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>Tips&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>积分号可以换成如下符号：〈与TeX相同〉
&lt;ul>
&lt;li>积分: &lt;code>\int \iint \iiint \oint \oiint \oiiint \coint \aoint&lt;/code>&lt;/li>
&lt;li>求和/积: &lt;code>\sum \amalg \prod \coprod&lt;/code>&lt;/li>
&lt;li>逻辑: &lt;code>\bigcap \bigcup \bigsqcup \bigvee \bigwedge&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>转换&lt;img src="https://zyxin.xyz/blog/blog/2017-08/WordMath/word_sum.png"
width="85"
height="92"
loading="lazy"
class="gallery-image"
data-flex-grow="92"
data-flex-basis="221px"
>这两种形式的符号有两种方法：
&lt;ol>
&lt;li>右键积分符号
&lt;img src="https://zyxin.xyz/blog/blog/2017-08/WordMath/word_sum_change1.png"
width="266"
height="122"
loading="lazy"
class="gallery-image"
data-flex-grow="218"
data-flex-basis="523px"
>
右键菜单中还有隐藏上下限等选项。&lt;/li>
&lt;li>在公式选项页面卡中
&lt;img src="https://zyxin.xyz/blog/blog/2017-08/WordMath/word_sum_change2.png"
width="544"
height="235"
loading="lazy"
class="gallery-image"
data-flex-grow="231"
data-flex-basis="555px"
>
（前提是公式显示为“显示”模式而非“内嵌”模式）&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="括号-1">括号&lt;/h3>
&lt;ul>
&lt;li>$\left(A\right)$ ← &lt;code>(A) &lt;/code>&lt;/li>
&lt;li>$A)$ ← &lt;code>\open A) &lt;/code>&lt;/li>
&lt;li>$(A$ ← &lt;code>(A\close &lt;/code>&lt;/li>
&lt;li>$\left(A\vert B\right)$ ← &lt;code>(A\vbar B) &lt;/code> （分隔符能分割出两个公式块）&lt;/li>
&lt;li>$\binom{A}{B}$ ← &lt;code>(A\atop B) &lt;/code>&lt;/li>
&lt;li>$\left\{\begin{aligned}A\\B\end{aligned}\right.$ ← &lt;code>{\matrix (A@B)\close &lt;/code>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>括号有如下选择：&lt;code>\bra \ket \langle \rangle \Rangle \lbrace \rbrace \lbbrack \Rbrack \lbrack \rbrack \lceil \rceil \lfloor \rfloor \vert \Vert \lmoust \rmoust&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;h3 id="导数符号上下标">导数符号（上下标）&lt;/h3>
&lt;ul>
&lt;li>$\overrightarrow A$ ← &lt;code>A\vec &lt;/code>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>相同用法的符号有：&lt;code>\dot \ddot \dddot \bar \Bar \ubar \Ubar \vec \lvec \hvec=\rhvec \lhvec \tvec \hat \tilde&lt;/code>，以及音标符号：&lt;code>\grave \acute \breve \check&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>$\overbrace A^B$ ← &lt;code>\overbrace A\above B &lt;/code>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>相同用法的符号有：&lt;code>\overbar \overbrace \overbracket \overline \overparen \overshell&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>$\underbrace A_B$ ← &lt;code>\underbrace A\below B &lt;/code>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>相同用法的符号有：&lt;code>\underbar \underbrace \underbracket \underline \underparen&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>$\boxed A$ ← &lt;code>\rect A &lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="极限和对数">极限和对数&lt;/h3>
&lt;ul>
&lt;li>$\log_B\left(A\right)$ ← &lt;code>log_B A&lt;/code>&lt;/li>
&lt;li>&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;munder>&lt;mi>lim&lt;/mi>&lt;mi>B&lt;/mi>&lt;/munder>&lt;mi>A&lt;/mi>&lt;/math> ← &lt;code>lim\below B A&lt;/code> 或 &lt;code>lim_B A &lt;/code>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;code>min&lt;/code>、&lt;code>max&lt;/code>、&lt;code>sup&lt;/code>、&lt;code>inf&lt;/code>等用法类似&lt;/p>
&lt;/blockquote>
&lt;h3 id="运算符">运算符&lt;/h3>
&lt;ul>
&lt;li>$\overset{def}{=}$ ← &lt;code>\defeq&lt;/code>， $\overset\cdot=$ ← &lt;code>\doteq&lt;/code>， $\overset\Delta=$ ← &lt;code>\Deltaeq&lt;/code>&lt;/li>
&lt;li>$\xrightarrow A$ ← &lt;code>\rightarrow \below A&lt;/code>&lt;/li>
&lt;li>$\xleftarrow[A]{}$ ← &lt;code>\leftarrow \above A&lt;/code>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>可以替换的箭头符号：&lt;code>\leftarrow \Leftarrow \leftharpoondown \leftharpoonup \rightarrow \Rightarrow \rightharpoondown \rightharpoonup \leftrightarrow \Leftrightarrow \Longleftarrow \Longleftrightarrow \Longrightarrow \lrhar&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;h3 id="矩阵">矩阵&lt;/h3>
&lt;ul>
&lt;li>$\begin{array}{ccc}A&amp;amp;B&amp;amp;C\\D&amp;amp;E&amp;amp;F\end{array}$ ← &lt;code>\matrix (A&amp;amp;B&amp;amp;C@D&amp;amp;E&amp;amp;F)&lt;/code>&lt;/li>
&lt;li>常用占位符:
&lt;ul>
&lt;li>$\cdots$ ← &lt;code>\cdots&lt;/code>&lt;/li>
&lt;li>$\ddots$ ← &lt;code>\ddots&lt;/code>&lt;/li>
&lt;li>$\vdots$ ← &lt;code>\vdots&lt;/code>&lt;/li>
&lt;li>&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;mo>⋰&lt;/mo>&lt;/math> ← &lt;code>\rddots&lt;/code>&lt;/li>
&lt;li>$\dots$ ← &lt;code>\dots&lt;/code> 或 &lt;code>\ldots&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;em>例：与括号结合：&lt;code>(\matrix (A&amp;amp;\cdots &amp;amp;B@\vdots &amp;amp;\ddots &amp;amp;\vdots @C&amp;amp;\cdots &amp;amp;D) ) &lt;/code> → $\begin{pmatrix}A&amp;amp;\cdots&amp;amp;B\\\vdots&amp;amp;\ddots&amp;amp;\vdots\\C&amp;amp;\cdots&amp;amp;D\end{pmatrix}$&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;h2 id="预置公式">预置公式&lt;/h2>
&lt;ul>
&lt;li>&lt;code>\binomial&lt;/code>: 二项式展开&lt;/li>
&lt;li>&lt;code>\identitymatrix&lt;/code>: 单位矩阵&lt;/li>
&lt;li>&lt;code>\integral&lt;/code>: 某积分式&lt;/li>
&lt;li>&lt;code>\limit&lt;/code>: e的极限定义式&lt;/li>
&lt;li>&lt;code>\quadratic&lt;/code>: 一元二次方程根&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>在工具栏里没有显示出来的命令还有很多，比如空格命令：&lt;code>\nbsp \thicksp \thinsp \vthicksp \zwnj \zwsp&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;h2 id="其他技巧">其他技巧&lt;/h2>
&lt;h3 id="快捷命令列表">快捷命令列表&lt;/h3>
&lt;p>对于Word中符号的快捷命令，有很多都是与TeX相似的，因此可以参照TeX的符号列表查找符号的输入。此外，还可以参考前文提到的&lt;a class="link" href="https://support.office.com/en-us/article/Linear-format-equations-using-UnicodeMath-and-LaTeX-in-Word-2E00618D-B1FD-49D8-8CB4-8D17F25754F8" target="_blank" rel="noopener"
>很全面的官方参考文档&lt;/a>，以及在百度我搜到的唯一一份&lt;a class="link" href="http://wenku.baidu.com/link?url=Dq-oZHiINdb5sQQE-U9gymEPt5i8V7lJMhWj5pfRjc-CW_vSb7Mbgpyvq6c412RMofyQX2h8DQ0kNlslZCRNY5Z90PrfnHZb8ddgFnyD-4G" target="_blank" rel="noopener"
>介绍Word公式快捷输入的文档&lt;/a>，这里面有一部分命令的列表。&lt;/p>
&lt;p>工具栏内所展示的快捷命令其实不完全，Word中所有内置的快捷命令可以通过“公式选项”→“数学符号自动更正”菜单进行查看，不过这里面的列表可读性太差，因此不推荐使用。
&lt;img src="https://zyxin.xyz/blog/blog/2017-08/WordMath/word_math_shortcuts.png"
width="768"
height="554"
loading="lazy"
alt="快捷命令列表"
class="gallery-image"
data-flex-grow="138"
data-flex-basis="332px"
>&lt;/p>
&lt;h3 id="使用mathml来进行tex与word公式的转换">使用MathML来进行TeX与Word公式的转换&lt;/h3>
&lt;p>MathML是一种用于描述公式的XML语言，十分强大，公式的描述能力要强于Word与TeX，但缺点就在于过于繁杂。MathML格式的公式可以直接拷贝进Word公式编辑中，因此如果需要在TeX与Word公式之间进行转换的话，可以先将TeX公式渲染为MathML，然后将MathML导入Word。这里推荐一个网站：&lt;a class="link" href="http://www.wiris.com/editor/demo/en/mathml-latex" target="_blank" rel="noopener"
>Wiris Editor&lt;/a>&lt;/p>
&lt;p>此外在Word2016以后，已经直接支持内置公式与TeX公式的转换了。&lt;a class="link" href="https://support.office.com/zh-cn/article/%E7%BC%96%E5%86%99%E3%80%81%E6%8F%92%E5%85%A5%E6%88%96%E6%9B%B4%E6%94%B9%E5%85%AC%E5%BC%8F-1D01CABC-CEB1-458D-BC70-7F9737722702" target="_blank" rel="noopener"
>详见官网&lt;/a>。&lt;/p>
&lt;h3 id="公式自动编号">公式自动编号&lt;/h3>
&lt;p>编写论文时经常会遇到公式自动编号的问题，这是很多人转投TeX的另一个原因。但其实在Word里实现公式自动编号也很简单，可以用一个&lt;em>无框表格&lt;/em>把公式包起来，第一个单元格放公式，第二个单元格放编号。编号可以用自定义的编号样式来完成，设定好编号以后输入新公式时编号使用同样的样式即可完成自动编号了。&lt;/p>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2017-08/WordMath/word_math_number.png"
width="529"
height="245"
loading="lazy"
alt="自定义编号样式"
class="gallery-image"
data-flex-grow="215"
data-flex-basis="518px"
>&lt;/p>
&lt;h3 id="其他资料">其他资料&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="http://unicode.org/notes/tn28/UTN28-PlainTextMath-v3.pdf" target="_blank" rel="noopener"
>Unicode Nearly Plain-Text Encoding of MathematicsVersion 3&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.cs.bgu.ac.il/~khitron/Equation%20Editor.pdf" target="_blank" rel="noopener"
>Word数学符号输入手册&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="http://mohu.org/info/symbols/symbols.htm" target="_blank" rel="noopener"
>常用数学符号的 LaTeX 表示方法&lt;/a>：可以参考里面的符号命令，与Word是基本一致的。&lt;/li>
&lt;li>&lt;a class="link" href="http://www.wiris.com/editor/demo/en/developers#mathml-latex" target="_blank" rel="noopener"
>MathML与LaTeX生成器&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>本文介绍了一下Word中公式输入的快捷键，Office中有很多没有well-documented的功能，大家可以多去挖掘挖掘，能够有效提高效率~&lt;/p></description></item><item><title>Minecraft - 集成作物塔 - 红石基础</title><link>https://zyxin.xyz/blog/2017-08/MCTowerRedstone/</link><pubDate>Mon, 21 Aug 2017 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2017-08/MCTowerRedstone/</guid><description>&lt;h2 id="bud">BUD&lt;/h2>
&lt;p>&lt;a class="link" href="https://minecraft-zh.gamepedia.com/%E6%95%99%E7%A8%8B/%E6%96%B9%E5%9D%97%E6%9B%B4%E6%96%B0%E6%84%9F%E5%BA%94%E5%99%A8" target="_blank" rel="noopener"
>&lt;strong>方块更新感应器（Block Update Detector, BUD）&lt;/strong>&lt;/a>是Minecraft中绝大部分自动设备的部件，它能够检测方块的更新并产生一次脉冲。因此掌握方块更新是制造自动设备的必备技能~&lt;/p>
&lt;p>不过让我郁闷的是，1.11中引入了一个萌萌的方块叫做&lt;a class="link" href="https://minecraft-zh.gamepedia.com/%E4%BE%A6%E6%B5%8B%E5%99%A8" target="_blank" rel="noopener"
>&lt;strong>侦测器&lt;/strong>&lt;/a>，能起到类似BUD的效果。不过由于侦测器的检测范围比BUD小，以及BUD有&lt;strong>感应器与执行器可以用同一个方块&lt;/strong>的优点，灵活性高，因此部分场合还是需要BUD上场，然而对于作物塔中作物生长的检测来说，侦测器其实已经完全足够了。（原本Tricky的方法被官方支持应该是件好事，然而我还是无法避免地感到郁闷。。）&lt;/p>
&lt;p>BUD的基本原理是将红石电路置于一种本应不稳定的状态（即通过不同的方式推导线路状态能得到不同的结果），此时电路中的一些处于“叠加态”的结构会停止对电路的变化产生反应（其中本应产生反应的方块即为&lt;strong>感应器&lt;/strong>，一般为活塞），而当感应器周围方块有更新时，电路会重新运行而使得结构被改变且重新复原（之后又会停止反应），这个过程可以产生红石信号。&lt;/p>
&lt;p>BUD的一种替代是高频时钟电路，通过不断地暴力尝试而产生类似BUD的效果。替代的前提条件是没有方块更新时，电路信号不会产生额外的破坏。有些情况下，方块更新地过于频繁，使得更新方块本身也成为了BUD开关，或者BUD电路的执行器和感应器产生冲突，这时就只能使用高频信号了（e.g. 刷石机）。&lt;/p>
&lt;p>BUD的实现方式很多，一般会根据密排和材料的需要选择对应的BUD。BUD通常需要粘性活塞或者活塞加下落物使得电路复位。下面介绍几种我常用的BUD形式（由于活塞激活的方式较多，因此BUD结构的灵活性很大，每种方案都可以有很多放置方法，只展示其中最便于描述的一种）：&lt;/p>
&lt;h3 id="粘性活塞--红石火把">粘性活塞 + 红石火把&lt;/h3>
&lt;p>&lt;i id="bud_example"/>&lt;/i>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 侧视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----基本式|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| |rd-$ |rd-$ | |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-$ |AB |AB |rt-$w! |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|AB |rr-$w1 | |rd-$! |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| |AB |AB |AB |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | |sp-n | |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----扩增式|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| |rd-$ |rd-$ | |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-$ |AB |AB |rt-$w! |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|AB |rr-$w1 | |rd-$! |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| |AB |AB |AB |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | |sp-n | |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | | |sp-w |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在活塞四周产生的方块更新会被感应到（在扩增式中两个活塞都能起感应作用）。如果活塞用普通活塞，而用沙子作为活塞上方的方块的话，这个电路就会变成高频时钟电路。&lt;/p>
&lt;p>这个装置的BUD原理是，中间一层右端激活的红石会使得下方的方块充能，活塞被激活（活塞激活的范围可以参考wiki&lt;a class="link" href="https://minecraft-zh.gamepedia.com/%E6%B4%BB%E5%A1%9E#.E5.85.85.E8.83.BD" target="_blank" rel="noopener"
>活塞页面&lt;/a>和&lt;a class="link" href="https://minecraft-zh.gamepedia.com/File:Activation_by_piston_connectivity.png" target="_blank" rel="noopener"
>红石页面&lt;/a>）活塞激活后会推动上方方块，方块被右端红石充能，使得中间层左侧的电路被充能，这会导致红石火把熄灭，导致中间一层右端激活的红石不再被充能而熄灭。电路产生了矛盾进入不稳定状态，产生了BUD效果。&lt;/p>
&lt;h3 id="粘性活塞--容器">(粘性)活塞 + 容器&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 侧视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----后部|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | |rd-$! |rd-$! |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-$! |rr-$e1!|AB |AB |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|AB |AB | | |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----前部|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | | | |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|AB |rc-$w! |AB |fu-$s |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|AB |AB |sp-n |pi-u |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个BUD方案的好处在于结构精简。左边的活塞是粘性活塞（可以换成普通活塞+下落物），两个活塞都是感受器。容器可以是任何可以产生信号的容器，熔炉、箱子、漏斗都可以，需要在容器中放至少一个物品使得其可以产生信号。该BUD的原理是容器产生的信号通过比较器与中继器的放大，连接到活塞上方方块的背后。本来在这种情况下活塞是被激活了的，会推动上方方块，但是如果上方方块被推动就会导致信号截断，不能传导到背后，这就形成了BUD开关，原理与上个方案相似。&lt;/p>
&lt;p>中继器在这个结构中起到的作用是延长信号（因为比较器产生的信号可能很弱），但通过调节它的刻度也能够调节BUD复位的速度。&lt;/p>
&lt;a id="bud_example2"/>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2017-08/MCTowerRedstone/mc_bud_sugarcane.jpg"
width="763"
height="370"
loading="lazy"
alt="一种利用BUD制造的自动甘蔗机"
class="gallery-image"
data-flex-grow="206"
data-flex-basis="494px"
>&lt;/p>
&lt;p>相比&lt;a class="link" href="https://minecraft-zh.gamepedia.com/File:Sugar_Cane_with_Observer.png" target="_blank" rel="noopener"
>利用侦测器制造的自动甘蔗机&lt;/a>，BUD方案可以在甘蔗生长出第二格时立即首歌，并且可以通过BUD的延长来精简体积。&lt;/p>
&lt;h3 id="活塞--红石块">活塞 + 红石块&lt;/h3>
&lt;p>由于粘性活塞较难获得（&lt;del>单机玩根本就找不到史莱姆好吗&lt;/del>），因此再介绍一种替代方案。“粘性”在电路中的作用是让截断方块复位，因此可以通两个活塞对置来实现复位。下面就是一种普通活塞与红石块结合产生BUD的方案：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 侧视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-$ |AB |pi-s | |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|AB |rr-$e1 | | |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| |AB |br |rd-$! |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | |AB |AB |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | |pi-n | |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>同样，在这个电路中活塞是感应器。&lt;/p>
&lt;h3 id="粘性活塞--下落物">粘性活塞 + 下落物&lt;/h3>
&lt;p>如果要使用下落物（沙子、沙砾）来做BUD的话，仍然需要粘性活塞来复位。相比于其他BUD方案，使用下落物的特点在于BUD反应很快，但是复位较慢（下落速度较慢）。一种典型的结构如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 侧视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-$!|sand|rr-$w1!|ab|le-$w!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab |gs |ab | | |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| |sp-n| | | |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>沙子代表下落物（还可以是沙砾），萤石代表不充能的透明方块（还可以是玻璃、海晶灯等）。这个方案还有个特点是体积小，但是噪音会比较大233&lt;/p>
&lt;h3 id="bud的扩增延长">BUD的扩增（延长）&lt;/h3>
&lt;p>在前面的BUD方案中提到了BUD的扩增，这是一种非常实用的设计。这里的BUD扩增指的是&lt;strong>感应器的增加与延长&lt;/strong>，而不仅仅是红石线路的延长。&lt;/p>
&lt;p>搭建好基础的BUD后，可以在感应器（一般是活塞）周围再放置一个活塞，并让活塞可以被BUD电路的执行器一段激活（例如&lt;a class="link" href="#bud_example1" >第一个BUD例子&lt;/a>和&lt;a class="link" href="#bud_example2" >第二个BUD例子&lt;/a>所示）。这种情况下，新加入的活塞受BUD电路的激活本应推动&lt;del>空气&lt;/del>，但活塞的动作会导致基础BUD的感应器周围产生更新（出现了活塞头），导致BUD电路中断，这样就可以让新活塞也成为了BUD的一部分。&lt;/p>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2017-08/MCTowerRedstone/mc_bud_expand.jpg"
width="634"
height="614"
loading="lazy"
alt="向两个方向延长的BUD结构"
class="gallery-image"
data-flex-grow="103"
data-flex-basis="247px"
>&lt;/p>
&lt;p>再用示意图举一个双排扩增BUD的例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 俯视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level1|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||pi-s|pi-s|pi-s||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|pi-n||||pi-u|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|pi-w|||pi-n||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|pi-w|||pi-w||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|pi-w|||pi-w||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ellipsis-ns|||ellipsis-ns||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level2|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|ab|ab|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ab|||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ellipsis-ns|||ellipsis-ns|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level3|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||rd-se!|rd-ew!|rd-ew!|br|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||rd-ns!|||rd-ns!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||rd-ns!|||rd-ns!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||rd-ns!|||rd-ns!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">||ellipsis-ns|||ellipsis-ns|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level4|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||rr-n1|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----Level5|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||rd|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||pi-d|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个技巧是BUD优于侦测器的特点之一，因此在之后的文章中作物塔的自动收割还是通过BUD实现（&lt;del>其实是因为之前没玩过1.9以后的版本&lt;/del>），不过改成侦测器的话应该也不会太难，并且也可以降低电路复杂度。&lt;/p>
&lt;h2 id="红石布线">红石布线&lt;/h2>
&lt;p>红石电路之所以困难，原因之一是布线非常麻烦，由于Minecraft是方块化的，因此布置红石有一定的限制，不像&lt;del>Altium&lt;/del>之类的那样方便。这里也简单介绍一下红石布线的技巧。&lt;/p>
&lt;h3 id="信号向上传递">信号向上传递&lt;/h3>
&lt;p>&lt;em>&lt;a class="link" href="https://minecraft-zh.gamepedia.com/%E7%BA%A2%E7%9F%B3%E7%94%B5%E8%B7%AF#.E4.BC.A0.E8.BE.93.E7.94.B5.E8.B7.AF]" target="_blank" rel="noopener"
>参见Wiki纵向传输页面&lt;/a>&lt;/em>&lt;/p>
&lt;p>作物塔很高，如果使用半自动设备，并且希望在底部操作开关的话就会遇到红石信号向上传递的问题。此外在布置红石电路的时候也会遇到向上传递的需求。&lt;/p>
&lt;p>信号纵向传递主要有以下几种方式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 侧视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----阶梯式|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-$! | | |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|AB |rd-$! | |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| |AB |rd-$! |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | |AB |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----红石火把（向上）|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| |rt-$ | |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| |AB | |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| |rt-$! | |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| |AB | |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----红石火把（向下）|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|AB |rt-$w! | |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| |rd-$! | |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rt-$e |AB | |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-$ | | |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----半砖|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| |rd-$! | |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-$! |ts-$ | |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ts-$ |rd-$! | |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-$! |ts-$ | |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----萤石|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| |rd-$! | |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-$! |gs | |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|gs |rd-$! | |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| |gs | |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>原理是半砖和萤石可以交叉向上连接红石而不阻隔信号，红石火把能充能上方或下方的方块。红石火把传递的方案有一个限制就是纵向传递&lt;strong>会使信号交替改变&lt;/strong>（红石火把相当于非门），因此如果要保持信号不变的话需要使红石火把的层数为奇数。&lt;/p>
&lt;p>这里面最常用的方法是半砖电路和红石火把，廉价并且占地小。&lt;/p>
&lt;h3 id="密集布线">密集布线&lt;/h3>
&lt;p>在集成化的过程中，密集布线经常会让人头疼。如何使红石电路占地最小并且隔离其他电路的影响是集成的关键。布线据我所知没有一个统一的方法，但是有如下一些要点：&lt;/p>
&lt;ul>
&lt;li>在斜交叉时不透明方块会阻断线路，透明方块不会
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 侧视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----不连通|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-$ |AB |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|AB |rd-$! |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----连通|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-$! |glass |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|AB |rd-$! |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>注意避免红石在规划外的地方出现上下两层相连的情况&lt;/li>
&lt;li>当两条不同的红石线路并排时使用继电器可以将两条线路隔离&lt;/li>
&lt;li>在集成自动机构时，尽量使得红石机构位于一个平面内，这样有利于机构的密排，密排时适当错位避免以错误的红石连接。&lt;/li>
&lt;/ul>
&lt;h2 id="作物塔后处理">作物塔后处理&lt;/h2>
&lt;h3 id="物品分类">物品分类&lt;/h3>
&lt;p>在我的作物塔中，所有作物都是水流汇集后通过一个漏斗收集的，如果仅仅放在一个箱子里会比较乱，不利于取用（如果你有MOD就当我没说）。因此在最后接一个分类系统是不错的选择。&lt;/p>
&lt;p>物品分类系统有很多的实现方式，在这里介绍非常朴素而古老的一种，利用漏斗的信号控制来使得漏斗中的物体保持一定的量，再利用漏斗只能叠加同类物品来进行分类。&lt;/p>
&lt;p>基本原理是漏斗中每1/3组物品会输出1个信号强度，以及如果漏斗五格都有物品，漏斗只会吸收它所含有的物品类型。因此可以通过占位物品实现分类，输出信号控制开关，避免占位物品也被吸收走。&lt;/p>
&lt;p>具体的结构如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 侧视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----单层分类器截面|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|S |ho-$s | | | |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|C |ho-$d |AB |rc-$e! |AB |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ch-$ |ho-$w | |ts-$ |rd-$! |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| |rt-$e! |AB |rd-$! |AB |-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中S漏斗是物品收集管道，C是分类装置。C漏斗需要在其中预先放置好需要分类的物品和占位物品。例如如果要分类仙人掌，用木棍作为占位物品，则可以放置成如下样式&lt;/p>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2017-08/MCTowerRedstone/mc_filter.png"
width="187"
height="45"
loading="lazy"
alt="物品分类摆放样式"
class="gallery-image"
data-flex-grow="415"
data-flex-basis="997px"
>&lt;/p>
&lt;p>当S漏斗有物品通过时，物品会优先向下漏。如果是仙人掌，那么就会漏进C与原有的仙人掌叠加，如果不是，由于占位物品的存在则无法漏入（除非通过的物品是占位物品）。这就实现了分类功能。而红石电路能够保证C漏斗中物品数少于1/3组时不继续下漏，能够保护占位物品不被漏掉。&lt;/p>
&lt;p>C漏斗中，第一格放上需要分类的物品，一个即可，剩下四格放占位物品（什么都可以），但总量不要超过1/3组。占位物品越多，漏斗中残余的分类物品（这里是仙人掌）就越少。但如果少到没有了，那这个分类器也就失效了。&lt;/p>
&lt;h3 id="物品自动搬运">物品自动搬运&lt;/h3>
&lt;p>当物品从作物塔中收集下来以后，如果作物塔离储存物资的地方比较远，可以通过物品搬运系统来进行自动转移。一般这种功能是通过&lt;em>运输矿车&lt;/em>来实现的。具体的红石设计&lt;a class="link" href="https://minecraft-zh.gamepedia.com/%E6%95%99%E7%A8%8B/%E7%9F%BF%E8%BD%A6%E5%82%A8%E5%AD%98" target="_blank" rel="noopener"
>在Wiki里面讲的已经很清楚了&lt;/a>，这里就不再赘述~&lt;/p>
&lt;h3 id="物品下漏限制">物品下漏限制&lt;/h3>
&lt;p>这个功能是个小trick。当漏斗管道接上熔炉进行燃烧的时候，如果漏斗管道中的物品生产较慢，则会导致熔炉中的燃料极大浪费。这个时候可以通过限制物品下漏来使得进入熔炉中的物品不会太少。&lt;/p>
&lt;p>下面这个装置可以实现当物品数量达到23以后才会继续下漏：（该方案仅支持可烧制的物品，如果混入不可烧制的物品则会无效）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{% minecraft 俯视图 %}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-se!|rd-ew!|rr-w1!|rd-ew!|rd-ew!|rd-sw!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rr-s1!|rr-w1|rd-ew|||rd-ns!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ab|ab|ab|ab|ab|rd-ns!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|ho-d|rc-e|rd-sew|rr-e1|ab|rr-n1!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||rd-ne|rr-e1|ab|rt-w!|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|----|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|||rt-s||||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|rd-ew!|rd-ew!|ab|rd-ew|rd-sw|ab|-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|S||||rt||-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{% endminecraft %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>选取数字23是因为这是它在&lt;a class="link" href="https://minecraft-zh.gamepedia.com/%E7%BA%A2%E7%9F%B3%E6%AF%94%E8%BE%83%E5%99%A8#.E5.AE.B9.E5.99.A8" target="_blank" rel="noopener"
>比较器产生的信号阶梯&lt;/a>中物品数量较少时最接近8的倍数，因此能够较好地节省煤炭。（当漏斗中有2组又32个物品时刚好可以产生8格信号，但是这会使得红石线路体积增大，并且增长物品处理周期，因此还是选用了23个物品产生2格信号的方案。）当然，如果使用别的燃料的话可以针对性地延长从比较器到中继器中间的红石，就可以挑选最省燃料的下落限制值了。（各种燃料一次能烧多少个物品&lt;a class="link" href="https://minecraft-zh.gamepedia.com/%E7%83%A7%E7%82%BC#.E7.87.83.E6.96.99.E6.95.88.E7.8E.87" target="_blank" rel="noopener"
>见Wiki&lt;/a>）&lt;/p>
&lt;hr>
&lt;p>以上就是在作物塔中使用到的基本红石原理，如果看不太懂没关系，作物塔搭出来就能慢慢理解了233~接下来就会介绍作物塔的详细构造了。&lt;/p></description></item><item><title>Minecraft - Recollections</title><link>https://zyxin.xyz/blog/2017-08/MCRecollect/</link><pubDate>Fri, 18 Aug 2017 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2017-08/MCRecollect/</guid><description>&lt;img src="https://zyxin.xyz/blog/2017-08/MCRecollect/mc_moonlight.png" alt="Featured image of post Minecraft - Recollections" />&lt;p>由于最近暑研比较闲，在油管上又开始刷Minecraft红石视频，于是捡起Minecraft又开始玩了。想想Minecraft也陪伴了我很久，于是决定把之前在MC里面捣鼓的东西都写下来，希望珍贵的回忆不要就这么淡去。。&lt;/p>
&lt;p>玩Minecraft也有快五年了，最早应该是在高二听说了这个游戏，那个时候版本好象还是1.3，下载一看这么辣鸡的画质就立马弃掉了o(￣ヘ￣o＃)~后来是在学OI的时候在学长机器里发现了1.5的工业神秘整合包！打开他的存档发现了一堆电路和核弹，顿时仿佛打开了新世界的大门，玩得不亦乐乎，不过那时还是玩的创造模式。后面进了大学才有精力开始认真玩，进了烟花服，纯净生存，一周目快结束玩到三周目中后期，快两年的时间也算是老玩家了可惜后面关服了。这期间也试过很多著名的Mod，如工业IC(IndustrialCraft)、通用电力UE(Universal Electricity)、神秘TC(Thaumcraft)、和风Bamboo、暮色TF(The Twilight Forest)，还有枪战、女仆等很多小Mod。MC的Mod多如牛毛，BC(BuildCraft)、以太(Aether)、Avalon、超多地形等等都没有去试，光是一个神秘就能玩几个月。&lt;/p>
&lt;p>在烟花服务器玩的是1.7.10~1.8.3，其中1.7.10这个版本应该是Mod最全的版本了，除了和风其他Mod都能打上。玩了两个周目非常开心，一个人玩的MC和大家一起玩的MC完全不是一个游戏。后面也加了次世代的MC服务器，但是感觉里面大家的创造还是没有烟花服的多，可惜前几天联系包子才知道烟花服已经解散了。本来腐竹是非常友好的，可能是被某些个熊孩子气的不行了吧。。但这就导致很多超漂亮的摄影和存档我都没有保存下来。。。还好包子那里下载了存档，因此我还能回头看看我在花费最多精力的三周目里的成果。于是我决定把在MC里面做的一些小玩意都记录下来，避免以后再懊恼和可惜（&lt;del>以及怕以后不会造了233&lt;/del>）！&lt;/p>
&lt;p>博客里的Minecraft系列一方面会回忆之前的一些东西，也会把新的东西记录下来（前提是我还一直在玩233）。&lt;/p>
&lt;p>贴一些之前电脑里仅存的珍贵截图怀念一下：&lt;/p>
&lt;p>&lt;em>&lt;font color=#bbb>三周目里和sai一起搬运的大教堂，死了好几次。地下还有个超大型农民交易所&lt;/font>&lt;/em>&lt;/p>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2017-08/MCRecollect/mc_cathedral.png"
width="1366"
height="705"
loading="lazy"
alt="大教堂外景"
class="gallery-image"
data-flex-grow="193"
data-flex-basis="465px"
>
&lt;img src="https://zyxin.xyz/blog/blog/2017-08/MCRecollect/mc_cathedral2.png"
width="1366"
height="705"
loading="lazy"
alt="大教堂内景"
class="gallery-image"
data-flex-grow="193"
data-flex-basis="465px"
>&lt;/p>
&lt;p>&lt;em>&lt;font color=#bbb>当初我的得意作品之一：圣诞树。说实话树是最难造的，要不规则的同时还要好看真的是很矛盾。我觉得我可能造不出第二颗这么匀称好看的树了。（这两张是从存档里截的，当初在刚建成时专门拍的圣诞树照片已经随着群的解散而逝去了。&lt;/font>&lt;/em>&lt;/p>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2017-08/MCRecollect/mc_christmas_tree.png"
width="1366"
height="705"
loading="lazy"
alt="白天的圣诞树"
class="gallery-image"
data-flex-grow="193"
data-flex-basis="465px"
>
&lt;img src="https://zyxin.xyz/blog/blog/2017-08/MCRecollect/mc_christmas_tree2.png"
width="1366"
height="705"
loading="lazy"
alt="夜晚的圣诞树"
class="gallery-image"
data-flex-grow="193"
data-flex-basis="465px"
>&lt;/p>
&lt;p>&lt;em>&lt;font color=#bbb>renzhen还是谁在山顶造的百格高巨树，树干直径就有四五十格。（所以我才说树是最难造的）&lt;/font>&lt;/em>&lt;/p>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2017-08/MCRecollect/mc_huge_tree.png"
width="1366"
height="705"
loading="lazy"
alt="高耸的巨树"
class="gallery-image"
data-flex-grow="193"
data-flex-basis="465px"
>&lt;/p>
&lt;p>最后，如果你也想入坑MC的话，推荐以下几个资源：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/huanghongxun/hmcl" target="_blank" rel="noopener"
>HMCL&lt;/a> : 应该是最流行的第三方启动器了，很好用。&lt;/li>
&lt;li>&lt;a class="link" href="http://www.minecraftforum.net" target="_blank" rel="noopener"
>Minecraftforum&lt;/a>/&lt;a class="link" href="http://www.mcbbs.net/forum.php" target="_blank" rel="noopener"
>MCBBS&lt;/a> : 各路大佬都会在这里发帖，MOD、技术、技巧等等，可以多围观一下。&lt;/li>
&lt;li>MCWiki [&lt;a class="link" href="https://minecraft.gamepedia.com/Minecraft_Wiki" target="_blank" rel="noopener"
>en&lt;/a>/&lt;a class="link" href="https://minecraft-zh.gamepedia.com/Minecraft_Wiki" target="_blank" rel="noopener"
>zh&lt;/a>] : 完全相当于技术手册了，对原版MC的内容阐释的很全，并且有详细的&lt;a class="link" href="https://minecraft-zh.gamepedia.com/%E6%95%99%E7%A8%8B" target="_blank" rel="noopener"
>教程&lt;/a>。（本体是英文版的）&lt;/li>
&lt;li>&lt;a class="link" href="http://www.mcmod.cn/" target="_blank" rel="noopener"
>MCMod&lt;/a> : 收集Mod比较全的一个网站。（这有个&lt;a class="link" href="http://www.minecraftmods.com/" target="_blank" rel="noopener"
>国外版&lt;/a>，但感觉根本不全。。）&lt;/li>
&lt;li>&lt;a class="link" href="https://namemc.com/" target="_blank" rel="noopener"
>NameMC&lt;/a>/&lt;a class="link" href="http://www.skinme.cc/" target="_blank" rel="noopener"
>SkinMe&lt;/a> ：找皮肤的网站~（NameMC有很多其他功能）&lt;/li>
&lt;/ul></description></item><item><title>Minecraft - 集成作物塔</title><link>https://zyxin.xyz/blog/2017-08/MCTower/</link><pubDate>Fri, 18 Aug 2017 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2017-08/MCTower/</guid><description>&lt;p>在烟花服里面，我在雪地的基地里造了一个全自动多作物塔，基本上能自动刷的作物我都塞进了一个塔里hhh，非常实用。为了美观以及统一，这个塔的尺寸按照一般的小麦塔设计成了9x9，周围再加一层红石布线、一层走道是13x13，如果再算上围墙则一共占地是15x15。层数不限，每一层的作物有很多选择，可以随意按需累加~&lt;/p>
&lt;p>这个作物塔在纯净生存里非常实用，并且空间紧凑。但如果你加了别的Mod可能会有更优的方案。有了自动作物塔，不仅吃喝不愁，还能和村民进行大波交易（滑稽）~&lt;/p>
&lt;p>作物塔中每类作物塔层的收集口主要有两类，一类是在正中间，另一类是在9x9的一角，因此两类作物层最好分类累加，中间通过一层水流转移接口的位置。水流层就不专门写了，非常简单，如果转移有困难可以考虑造两层水。另外，半自动与全自动的层也最好分开，半自动层位于底层可以便于红石布线，并且方便操作开关。由于所有作物都从同一个口流下，因此在收集端可以接一个物品分类系统，这样就能愉快地刷作物了。（不过需要注意的是区块加载器无法让作物生长，想要刷作物只能在附近挂机，&lt;a class="link" href="https://tieba.baidu.com/p/3522130680#62864157641" target="_blank" rel="noopener"
>见该贴&lt;/a>）&lt;/p>
&lt;p>在服务器我的作物塔垒了十几层，高度已经突破200，上去看看风景也是不错的~作物塔本来是裸露的，后面觉得太丑于是给它加了个外墙，由于羊毛比较廉价，就随便弄了一个圣诞棍外形，但这么高的作物塔其实弄个大型像素图也是可以的~&lt;/p>
&lt;p>当初在服务器里我的塔长这样：&lt;/p>
&lt;p>&lt;img src="https://zyxin.xyz/blog/blog/2017-08/MCTower/mc_tower_expose.png"
width="1366"
height="705"
loading="lazy"
alt="未建成时裸露的作物塔"
class="gallery-image"
data-flex-grow="193"
data-flex-basis="465px"
>
&lt;img src="https://zyxin.xyz/blog/blog/2017-08/MCTower/mc_tower_sealed.png"
width="1316"
height="700"
loading="lazy"
alt="作物塔外壳 | 简陋的物品收集系统"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="451px"
>&lt;/p>
&lt;p>接下来几篇文章就会写不同作物层的搭法~&lt;/p></description></item><item><title>开篇语</title><link>https://zyxin.xyz/blog/2017-08/Initialization/</link><pubDate>Thu, 17 Aug 2017 00:00:00 +0000</pubDate><guid>https://zyxin.xyz/blog/2017-08/Initialization/</guid><description>&lt;img src="https://zyxin.xyz/blog/2017-08/Initialization/hurricane_ridge.jpg" alt="Featured image of post 开篇语" />&lt;p>纠结了很久，最后还是把这个博客搭起来了。实际上在决定搭博客之前有很多很多想写的东西，都存在Trello里面了。但是人懒，过了几年也没把它写出来，导致很多内容都过时了，没有写的必要了。痛心疾首，大把的&lt;ruby>分&lt;rt>zhuāng&lt;/rt>享&lt;rt>bī&lt;/rt>&lt;/ruby>内容没能分享出来，痛定思痛便还是决定搭了这个博客。&lt;/p>
&lt;p>这个博客应该很少会放生活内容了，我个人认为公开的博客不适合放私人生活，在这个信息飞速流通的时代这是有危险的。因此博客的主要内容会是一些干货，以及科研杂记什么的。如果&lt;ruby>心&lt;rt>xiăng&lt;/rt>情&lt;rt>zhuāng&lt;/rt>好&lt;rt>bī&lt;/rt>&lt;/ruby>的话可能会放日记什么的吧2333。&lt;/p>
&lt;p>路漫漫而其修远兮，吾将上下而求索。欢迎留言讨论，也欢迎在各种地方勾搭~&lt;/p>
&lt;p>&lt;em>&lt;font color=#999>最后放一张上周去Olympic National Park的照片作为旅途的开端吧！&lt;/font>&lt;/em>
&lt;img src="https://zyxin.xyz/blog/blog/2017-08/Initialization/hurricane_ridge.jpg"
width="4032"
height="3024"
loading="lazy"
alt="Hurricane Ridge"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p></description></item></channel></rss>